- id: '6001'
  alias: 6001 - Octopus - Free Electric Automation
  description: "# 6001 - Automation to get the most from Octopus Free Electric Sessions\n\n#
    Initial config instructions\n1. Find and replace:\nzappi_XXXXXXXX with your zappi
    number, \nz_ZZZZZZZZ with Octopus account\n2. Paste into your automations.yaml\n\n#
    Change log\nv2.1.4 Renamed automation\nv2.1 - Removed legacy dev work and fix
    bug with charge period 2\nv2.0 - Productionise\nv1.1 - Initial\n\n\n# Overview\nOctopus
    offer free electric sessions in the summer.\nThis automation allows you to automatically
    charge the solax battery and also sets the zappi to fast mode. \nTo prepare for
    the free electricity, options are provided to export the house battery to benefit
    from export rates and to give headroom to charge from the grid for free in the
    session. You can set a time and export threshold. However beware that on a sunny
    day you may already be at the inverters limit so won't be able to discharge the
    battery so you have to balance the time at which you discharge and the battery
    SoC level for which you need to last the day before the free session. To prevent
    the battery filling the inverter mode is set to feed in priority and will return
    to your default mode after the free electric session. If export rates become unfavourable
    you can use the target battery SoC as the charge to if you allow charging from
    grid overnight."
  triggers:
  - at: sensor.octopus_free_electricity_start
    id: start
    trigger: time
    enabled: true
  - at: sensor.octopus_free_electric_stop
    id: stop
    trigger: time
    enabled: true
  - entity_id:
    - binary_sensor.free_electricity_today
    to: 'on'
    id: Prepare
    trigger: state
    for:
      hours: 0
      minutes: 2
      seconds: 0
  - at: input_datetime.octopus_free_electricity_prep
    id: ExportBatteryPrep
    trigger: time
  - trigger: time_pattern
    minutes: /17
  conditions:
  - condition: state
    entity_id: binary_sensor.free_electricity_today
    state: 'on'
  - condition: state
    entity_id: input_boolean.solax_automation_running
    state: 'off'
    enabled: false
  actions:
  - action: input_boolean.turn_on
    metadata: {}
    data: {}
    target:
      entity_id: input_boolean.solax_automation_running
  - variables:
      default_mode: '{{states(''sensor.solax_default_operation_mode'')|int}}'
      default_charge_to: '{{states(''input_number.solax_default_charge_to_limit_soc'')|int}}'
      mode_delay: 15
      settings_delay: 15
      refresh_settings_delay: 10
    enabled: true
  - choose:
    - conditions:
      - condition: trigger
        id:
        - Prepare
      sequence:
      - if:
        - condition: state
          entity_id: input_boolean.octopus_free_electric_soc_use
          state: 'on'
        then:
        - condition: not
          conditions:
          - condition: template
            value_template: "{{states('input_number.octopus_free_session_battery_prep_soc')|int==states('sensor.solax_local_feed_in_battery_charge_from_grid_to')|int
              \nand states('input_number.octopus_free_session_battery_prep_soc')|int==states('sensor.solax_local_selfuse_battery_chrg_frm_grd_to')}}"
        - repeat:
            sequence:
            - data:
                level: '{{states(''input_number.octopus_free_session_battery_prep_soc'')}}'
              action: rest_command.solax_local_set_feedin_charge_battery_from_grid
            - delay:
                hours: 0
                minutes: 0
                seconds: '{{mode_delay}}'
                milliseconds: 0
            - data:
                level: '{{states(''input_number.octopus_free_session_battery_prep_soc'')}}'
              action: rest_command.solax_local_set_charge_battery_from_grid
            - delay:
                hours: 0
                minutes: 0
                seconds: '{{mode_delay}}'
                milliseconds: 0
            - action: homeassistant.update_entity
              data:
                entity_id:
                - sensor.solax_rest_local_settings
            - delay:
                hours: 0
                minutes: 0
                seconds: '{{refresh_settings_delay}}'
                milliseconds: 0
            until:
            - condition: template
              value_template: "{{ (state_attr('sensor.solax_local_settings', 'Data')[2]
                == states('input_number.octopus_free_session_battery_prep_soc') \nand
                state_attr('sensor.solax_local_settings', 'Data')[13] == states('input_number.octopus_free_session_battery_prep_soc'))
                \nor repeat.index == 3 }}"
        else:
        - condition: not
          conditions:
          - condition: template
            value_template: '{{default_charge_to == states(''sensor.solax_local_feed_in_battery_charge_from_grid_to'')|int
              and default_charge_to == states(''sensor.solax_local_selfuse_battery_chrg_frm_grd_to'')|int}}'
        - repeat:
            sequence:
            - data:
                level: '{{default_charge_to}}'
              action: rest_command.solax_local_set_feedin_charge_battery_from_grid
            - delay:
                hours: 0
                minutes: 0
                seconds: '{{mode_delay}}'
                milliseconds: 0
            - data:
                level: '{{default_charge_to}}'
              action: rest_command.solax_local_set_charge_battery_from_grid
            - delay:
                hours: 0
                minutes: 0
                seconds: '{{mode_delay}}'
                milliseconds: 0
            - action: homeassistant.update_entity
              data:
                entity_id:
                - sensor.solax_rest_local_settings
            - delay:
                hours: 0
                minutes: 0
                seconds: '{{refresh_settings_delay}}'
                milliseconds: 0
            until:
            - condition: template
              value_template: "{{ (state_attr('sensor.solax_local_settings', 'Data')[2]
                == default_charge_to \nand state_attr('sensor.solax_local_settings',
                'Data')[13] == default_charge_to) \nor repeat.index == 3 }}"
      - condition: not
        conditions:
        - condition: template
          value_template: "{% set start_time =\n    as_datetime(state_attr('input_datetime.octopus_free_electricity_start',\n
            \   'timestamp') - 0) \n%}\n\n{% set end_time =\n    as_datetime(state_attr('input_datetime.octopus_free_electricity_stop',\n
            \   'timestamp') - 0) \n%}\n\n\n{{ (state_attr('sensor.solax_local_settings',
            'Data')[10] == 1\nand state_attr('sensor.solax_local_settings', 'Data')[7]
            == 1 \nand state_attr('sensor.solax_local_settings', 'Data')[8] == start_time.hour
            + start_time.minute * 256 \nand state_attr('sensor.solax_local_settings',
            'Data')[9] == end_time.hour + end_time.minute * 256) \n}}"
      - repeat:
          sequence:
          - data:
              value: '{{1}}'
            action: rest_command.solax_local_set_inverter_mode
          - delay:
              hours: 0
              minutes: 0
              seconds: '{{mode_delay}}'
              milliseconds: 0
          - action: rest_command.solax_local_set_period2_enable
            data:
              enabled: '{{1}}

                '
          - delay:
              hours: 0
              minutes: 0
              seconds: '{{mode_delay}}'
              milliseconds: 0
          - action: rest_command.solax_local_set_forced_charge_start2
            data:
              value: '{% set start_time = as_datetime(state_attr(''input_datetime.octopus_free_electricity_start'',
                ''timestamp'') - 0) %}{{ start_time.hour + start_time.minute * 256
                }}'
          - delay:
              hours: 0
              minutes: 0
              seconds: '{{mode_delay}}'
              milliseconds: 0
          - action: rest_command.solax_local_set_forced_charge_stop2
            data:
              value: '{% set end_time = as_datetime(state_attr(''input_datetime.octopus_free_electricity_stop'',
                ''timestamp'') - 0) %}{{ end_time.hour + end_time.minute * 256 }}'
          - delay:
              hours: 0
              minutes: 0
              seconds: '{{mode_delay}}'
              milliseconds: 0
          - action: homeassistant.update_entity
            data:
              entity_id:
              - sensor.solax_rest_local_settings
          - delay:
              hours: 0
              minutes: 0
              seconds: '{{refresh_settings_delay}}'
              milliseconds: 0
          until:
          - condition: template
            value_template: "{% set start_time =\n    as_datetime(state_attr('input_datetime.octopus_free_electricity_start',\n
              \   'timestamp') - 0) \n%}\n\n{% set end_time =\n    as_datetime(state_attr('input_datetime.octopus_free_electricity_stop',\n
              \   'timestamp') - 0) \n%}\n\n\n{{ (state_attr('sensor.solax_local_settings',
              'Data')[10] == 1\nand state_attr('sensor.solax_local_settings', 'Data')[7]
              == 1 \nand state_attr('sensor.solax_local_settings', 'Data')[8] == start_time.hour
              + start_time.minute * 256 \nand state_attr('sensor.solax_local_settings',
              'Data')[9] == end_time.hour + end_time.minute * 256) \nor repeat.index
              == 3 }}"
    - conditions:
      - condition: trigger
        id:
        - start
      sequence:
      - action: automation.turn_off
        metadata: {}
        data:
          stop_actions: true
        target:
          entity_id: automation.solax_zappi_octopus_control
      - metadata: {}
        data: {}
        target:
          entity_id: switch.octopus_energy_z_ZZZZZZZZ_intelligent_smart_charge
        action: switch.turn_off
      - metadata: {}
        data:
          option: Fast
        target:
          entity_id: select.myenergi_zappi_XXXXXXXX_charge_mode
        action: select.select_option
      - event: Solax Zappi Octopus Control
        event_data:
          message: 'Free electric session started @ {{now().strftime(''%H:%M'')}}. '
          title: Free Electric Started
          class: high
        enabled: true
    - conditions:
      - condition: trigger
        id:
        - stop
      sequence:
      - repeat:
          sequence:
          - data:
              value: '{{states(''sensor.solax_default_operation_mode'')|int}}'
            action: rest_command.solax_local_set_inverter_mode
          - delay:
              hours: 0
              minutes: 0
              seconds: '{{mode_delay}}'
              milliseconds: 0
          - data:
              value: 0
            action: rest_command.solax_local_set_manual_mode_behaviour
          - delay:
              hours: 0
              minutes: 0
              seconds: '{{mode_delay}}'
              milliseconds: 0
          - data:
              value: 0
            action: rest_command.solax_local_set_period2_enable
          - delay:
              hours: 0
              minutes: 0
              seconds: '{{mode_delay}}'
              milliseconds: 0
          - data:
              level: '{{states(''input_number.solax_default_charge_to_limit_soc'')}}'
            action: rest_command.solax_local_set_charge_battery_from_grid
          - delay:
              hours: 0
              minutes: 0
              seconds: '{{mode_delay}}'
              milliseconds: 0
          - data:
              level: '{{states(''input_number.solax_default_charge_to_limit_soc'')}}'
            action: rest_command.solax_local_set_feedin_charge_battery_from_grid
          - delay:
              hours: 0
              minutes: 0
              seconds: '{{mode_delay}}'
              milliseconds: 0
          - action: homeassistant.update_entity
            data:
              entity_id:
              - sensor.solax_rest_local_settings
          - delay:
              hours: 0
              minutes: 0
              seconds: '{{refresh_settings_delay}}'
              milliseconds: 0
          until:
          - condition: template
            value_template: "{{ (state_attr('sensor.solax_local_settings', 'Data')[10]
              == states('sensor.solax_default_operation_mode')|int \nand state_attr('sensor.solax_local_settings',
              'Data')[7] == 0 \nand state_attr('sensor.solax_local_settings', 'Data')[2]
              == states('input_number.solax_default_charge_to_limit_soc') \nand state_attr('sensor.solax_local_settings',
              'Data')[13] == states('input_number.solax_default_charge_to_limit_soc'))
              \nor repeat.index == 3 }}"
      - event: Solax Zappi Octopus Control
        event_data:
          message: 'Free electric session finished @ {{now().strftime(''%H:%M'')}}. '
          title: Free Electric Finished
          class: high
        enabled: true
      - action: automation.turn_on
        metadata: {}
        data:
          stop_actions: true
        target:
          entity_id: automation.solax_zappi_octopus_control
    - conditions:
      - condition: trigger
        id:
        - ExportBatteryPrep
      - condition: state
        entity_id: input_boolean.export_battery
        state: 'on'
        enabled: false
      - condition: numeric_state
        entity_id: sensor.solax_local_battery_soc
        above: input_number.octopus_free_session_battery_prep_soc
        value_template: '{{ state.state | float(0)  - 14 }}'
      - condition: state
        entity_id: binary_sensor.octopus_energy_z_ZZZZZZZZ_intelligent_dispatching
        state: 'off'
        enabled: false
      - condition: template
        value_template: '{{(state_attr(''sensor.solax_local_settings'', ''Data'')[10]!=
          3)}}'
      sequence:
      - if:
        - condition: numeric_state
          entity_id: sensor.solax_local_battery_soc
          above: input_number.octopus_free_session_battery_prep_soc
          value_template: '{{ state.state | float(0)  - 14 }}'
        then:
        - repeat:
            sequence:
            - data:
                value: 3
              action: rest_command.solax_local_set_inverter_mode
            - delay:
                hours: 0
                minutes: 0
                seconds: '{{mode_delay}}'
                milliseconds: 0
            - data:
                value: 2
              action: rest_command.solax_local_set_manual_mode_behaviour
            - delay:
                hours: 0
                minutes: 0
                seconds: '{{mode_delay}}'
                milliseconds: 0
            - action: homeassistant.update_entity
              data:
                entity_id:
                - sensor.solax_rest_local_settings
            - delay:
                hours: 0
                minutes: 0
                seconds: '{{mode_delay}}'
                milliseconds: 0
            until:
            - condition: template
              value_template: "{{ (state_attr('sensor.solax_local_settings', 'Data')[10]
                == 3 \nand state_attr('sensor.solax_local_settings', 'Data')[11] ==
                2) \nor repeat.index == 3 }}"
        - event: Solax Zappi Octopus Control
          event_data:
            message: Free electric session prep export started @ {{now().strftime('%H:%M')}}.
              Discharging to {{states('input_number.octopus_free_session_battery_prep_soc')}}%
            title: Free Electric Prep
            class: high
          enabled: true
  - action: input_boolean.turn_off
    metadata: {}
    data: {}
    target:
      entity_id: input_boolean.solax_automation_running
  mode: single