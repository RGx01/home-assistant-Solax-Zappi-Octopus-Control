solax_templates:
  template:
    ######################################################
    # Instructions for use
    ######################################################
    # Solax Local Sensor Readings and Settings
    #
    # User must set the battery size in sensor Solax Local Battery Remain Energy
    # User must replace zappi_XXXXXXXX
    # User must set solax_can_see_zappi_load = 1 or 0 in - name: "Solax Local House Load Power"
    # User must add battery size to "Solax Local Battery Remain Energy"
    ######################################################
    # Change log
    ######################################################
    # v3.1   Added system on/off sensor
    # v3.0.0 Added calc for battery in from grid
    # v2.1.4 Improved resilience to sensors reporting defaults/template warnings in logs
    #        due to invalid/empty rest responses.
    # v2.1.3.1 Tidy yaml
    # v2.1.3 Bug fix to solax_local_battery_in_from_solar.
    #        Added device_class where they were missing.
    # v2.0 Battery Warming sensors added
    # V1.1
    # new experimental sensors have been added:
    # - name: "Solax Local Self Consumption Power"
    # - name: "Solax Local Battery In From Solar"
    # - name: "Solax Local Battery Dump Power"
    # - name: "Solax Local House Load Power"
    ######################################################
    - sensor:
        - name: solax_local
          state: >
            {% if state_attr('sensor.solax_rest_local', 'sn')|length == 10  %}
              {{ now().strftime("%H:%M:%S") }}
            {% else %}
              {{ (states('sensor.solax_local')) }}
            {% endif %}
          attributes:
            sn: >-
              {% if state_attr('sensor.solax_rest_local', 'sn')|length == 10 %}
                {{ (state_attr('sensor.solax_rest_local', 'sn')) }}
              {% else %}
                {{ (state_attr('sensor.solax_local', 'sn')) }}
              {% endif %}
            ver: >-
              {% if state_attr('sensor.solax_rest_local', 'sn')|length == 10 %}
                {{ (state_attr('sensor.solax_rest_local', 'ver')) }}
              {% else %}
                {{ (state_attr('sensor.solax_local', 'ver')) }}
              {% endif %}
            type: >-
              {% if state_attr('sensor.solax_rest_local', 'sn')|length == 10 %}
                {{ (state_attr('sensor.solax_rest_local', 'type')) }}
              {% else %}
                {{ (state_attr('sensor.solax_local', 'type')) }}
              {% endif %}
            Data: >-
              {% if state_attr('sensor.solax_rest_local', 'Data')|length > 30 or states('sensor.solax_rest_local') not in ['unknown', 'unavailable','none'] %}
                {{ (state_attr('sensor.solax_rest_local', 'Data')) }}
              {% else %}
                {{ (state_attr('sensor.solax_local', 'Data')) }}
              {% endif %}
            Information: >-
              {% if state_attr('sensor.solax_rest_local', 'sn')|length == 10 %}
                {{ (state_attr('sensor.solax_rest_local', 'Information')) }}
              {% else %}
                {{ (state_attr('sensor.solax_local', 'Information')) }}
              {% endif %}

        ### Make the settings look like sensor data by embedding the info in the Data attribute
        - name: solax_local_settings
          state: >
            {{ now().strftime("%H:%M:%S") }}
          attributes:
            Data: >-
              {%if is_number(states('sensor.solax_rest_local_settings')|length) or states('sensor.solax_rest_local_settings')|length > 0 %}
              {{ (states('sensor.solax_rest_local_settings')) }}
              {%else%}
              {{ state_attr('sensor.solax_local_settings','Data') }}
              {%endif%}

        ######################################################
        # Solax Local Settings
        ######################################################
        
        ### System on/off 
        - name: "Solax Local System State"
          unique_id: solax_local_system_state
          state: "{{ state_attr('sensor.solax_local_settings', 'Data')[19] == 1 | bool(default=false)}}"
          icon: mdi:home-switch

        ### Battery discharge min (%) (Self Use Mode)
        - name: "Solax Local SelfUse Battery Min SoC"
          unique_id: solax_local_selfuse_battery_min_soc
          state: "{{ state_attr('sensor.solax_local_settings', 'Data')[0] | int(default=0) }}"
          unit_of_measurement: "%"
          state_class: measurement
          icon: mdi:battery-20

        ### Battery charge from grid switch (Self Use Mode)
        - name: "Solax Local Self Use Battery Charge From Grid"
          unique_id: solax_local_selfuse_battery_grid_enabled
          state: "{{ state_attr('sensor.solax_local_settings', 'Data')[1] | int(default=1) }}"
          state_class: measurement
          icon: mdi:battery-arrow-up

        ### Battery charge level to (%) from grid (Self Use Mode)
        - name: "Solax Local SelfUse Battery Chrg Frm Grd To"
          #     #unique_id: solax_local_self_use_battery_charge_from_grid_to
          unique_id: solax_local_selfuse_battery_chrg_frm_grd_to
          state: "{{ state_attr('sensor.solax_local_settings', 'Data')[2] | int(default=94) }}"
          unit_of_measurement: "%"
          state_class: measurement
          icon: mdi:battery-charging-90

        ### Battery discharge min (%) (Feed In  Mode)
        - name: "Solax Local Feed In Battery Min SoC"
          unique_id: solax_local_feed_in_battery_min_soc
          state: "{{ state_attr('sensor.solax_local_settings', 'Data')[12] | int(default=0) }}"
          unit_of_measurement: "%"
          state_class: measurement
          icon: mdi:battery-20

        ### Battery charge level to (%) from grid (feed In Mode)
        - name: "Solax Local Feed In Battery Charge From Grid To"
          unique_id: solax_local_feed_in_battery_charge_from_grid_to
          state: "{{ state_attr('sensor.solax_local_settings', 'Data')[13] | int(default=0) }}"
          unit_of_measurement: "%"
          state_class: measurement
          icon: mdi:battery-charging-90

        ### Battery settings charge/discharge (period 1) ###
        - name: "Solax Local Battery Setting Start Charge"
          unique_id: solax_local_battery_setting_start_charge
          state: "{{'%02d' % ((state_attr('sensor.solax_local_settings', 'Data')[3])%256 | int(default=0)) }}:{{'%02d' %((state_attr('sensor.solax_local_settings', 'Data')[3])/256) | int(default=0)}} "
          icon: mdi:clock-start

        - name: "Solax Local Battery Setting Stop Charge"
          unique_id: solax_local_battery_setting_stop_charge
          state: "{{'%02d' % ((state_attr('sensor.solax_local_settings', 'Data')[4])%256 | int(default=0)) }}:{{'%02d' % ((state_attr('sensor.solax_local_settings', 'Data')[4])/256) | int(default=0)}} "
          icon: mdi:clock-end

        - name: "Solax Local Battery Setting Start Discharge"
          unique_id: solax_local_battery_setting_start_discharge
          state: "{{'%02d' % ((state_attr('sensor.solax_local_settings', 'Data')[5])%256 | int(default=0)) }}:{{'%02d' % ((state_attr('sensor.solax_local_settings', 'Data')[5])/256) | int(default=0)}} "
          icon: mdi:clock-start

        - name: "Solax Local Battery Setting Stop Discharge"
          unique_id: solax_local_battery_setting_stop_discharge
          state: "{{'%02d' % ((state_attr('sensor.solax_local_settings', 'Data')[6])%256 | int(default=0)) }}:{{ '%02d' % ((state_attr('sensor.solax_local_settings', 'Data')[6])/256) | int(default=0)}} "
          icon: mdi:clock-end

        ### Battery settings charge/discharge (period 2) ###
        - name: "Solax Local Battery Setting Start Charge 2"
          unique_id: solax_local_battery_setting_start_charge2
          state: "{{'%02d' % ((state_attr('sensor.solax_local_settings', 'Data')[8])%256 | int(default=0)) }}:{{'%02d' %((state_attr('sensor.solax_local_settings', 'Data')[8])/256) | int(default=0)}} "
          icon: mdi:clock-start

        - name: "Solax Local Battery Setting Stop Charge 2"
          unique_id: solax_local_battery_setting_stop_charge2
          state: "{{'%02d' % ((state_attr('sensor.solax_local_settings', 'Data')[9])%256 | int(default=0)) }}:{{'%02d' % ((state_attr('sensor.solax_local_settings', 'Data')[9])/256) | int(default=0)}} "
          icon: mdi:clock-end
        ### Battery charge/discharge period2 enabled
        - name: "Solax Local Battery ChD2 Enabled"
          unique_id: solax_local_battery_chd2_enabled
          state: "{{ state_attr('sensor.solax_local_settings', 'Data')[7] == 1 | bool(default=false) }}"
          icon: mdi:battery-arrow-up

        ### Inverter default working mode
        - name: "Solax Default Operation Mode"
          unique_id: solax_default_operation_mode
          device_class: enum
          state: >
            {% set mapper =  {
                'Self Use' : 0,
                'Feed In Priority' : 1} %}
            {% set state =  states('input_select.solax_default_mode')  %}
            {{ mapper[state] if state in mapper else '0' }}
          icon: mdi:cursor-default-outline

        ### Inverter working mode
        - name: "Solax Local Inverter Mode"
          unique_id: solax_local_inverter_mode
          device_class: enum
          state: >
            {% set mapper =  {
                0 : 'Self Use',
                1 : 'Feed In Priority',
                2 : 'Back Up',
                3 : 'Manual'} %}
            {% set state =  state_attr('sensor.solax_local_settings', 'Data')[10] | int(default=0) %}
            {{ mapper[state] if state in mapper else 'Unknown' }}
          icon: mdi:sun-compass

        ### Inverter manual mode
        - name: "Solax Local Manual Mode Behaviour"
          unique_id: solax_local_manual_mode_behaviour
          device_class: enum
          state: >
            {% set mapper =  {
                0 : 'Do Nothing',
                1 : 'Force Charge',
                2 : 'Force Discharge'} %}
            {% set state =  state_attr('sensor.solax_local_settings', 'Data')[11] | int(default=0) %}
            {{ mapper[state] if state in mapper else 'Unknown' }}

        ### Battery heat enabled
        - name: "Solax Local Battery Heat Enabled"
          unique_id: solax_local_battery_heat_enabled
          state: "{{ state_attr('sensor.solax_local_settings', 'Data')[14] == 1 | bool(default=false) }}"
          icon: mdi:radiator

        ### Battery settings Heat (period 1) ###
        - name: "Solax Local Battery Heat Start"
          unique_id: solax_local_battery_heat_start
          state: "{{'%02d' % ((state_attr('sensor.solax_local_settings', 'Data')[15])%256 | int(default=0)) }}:{{'%02d' %((state_attr('sensor.solax_local_settings', 'Data')[15])/256) | int(default=0)}} "
          icon: mdi:clock-start

        - name: "Solax Local Battery Heat Stop"
          unique_id: solax_local_battery_heat_stop
          state: "{{'%02d' % ((state_attr('sensor.solax_local_settings', 'Data')[16])%256 | int(default=0)) }}:{{'%02d' % ((state_attr('sensor.solax_local_settings', 'Data')[16])/256) | int(default=0)}} "
          icon: mdi:clock-end
        ### Battery settings Heat (period 2) ###
        - name: "Solax Local Battery Heat Start 2"
          unique_id: solax_local_battery_heat_start_2
          state: "{{'%02d' % ((state_attr('sensor.solax_local_settings', 'Data')[17])%256 | int(default=0)) }}:{{'%02d' % ((state_attr('sensor.solax_local_settings', 'Data')[17])/256) | int(default=0)}} "
          icon: mdi:clock-start

        - name: "Solax Local Battery Heat Stop 2"
          unique_id: solax_local_battery_heat_stop_2
          state: "{{'%02d' % ((state_attr('sensor.solax_local_settings', 'Data')[18])%256 | int(default=0)) }}:{{ '%02d' % ((state_attr('sensor.solax_local_settings', 'Data')[18])/256) | int(default=0)}} "
          icon: mdi:clock-end

        ######################################################
        # Solax Sensor Values
        ######################################################
        ### Grid Voltage
        - name: "Solax Local Grid Voltage"
          unique_id: solax_local_grid_voltage
          state: "{{state_attr('sensor.solax_local', 'Data')[0] | float / 10}}"
          unit_of_measurement: "V"
          state_class: measurement
          device_class: "voltage"

        #### Combined Solar PV output ####
        - name: "Solax Local PV Output"
          unique_id: solax_local_pv_output
          state: "{{ (state_attr('sensor.solax_local', 'Data')[8] + state_attr('sensor.solax_local', 'Data')[9]) | int(default=0) }}"
          unit_of_measurement: "W"
          state_class: measurement
          device_class: "power"

        #### String 1 Solar PV output ####
        - name: "Solax Local PV Output String 1"
          unique_id: solax_local_pv_output_1
          state: "{{ (state_attr('sensor.solax_local', 'Data')[8]) | int(default=0) }}"
          unit_of_measurement: "W"
          state_class: measurement
          device_class: "power"

        #### String 2 Solar PV output ####
        - name: "Solax Local PV Output String 2"
          unique_id: solax_local_pv_output_2
          state: "{{ (state_attr('sensor.solax_local', 'Data')[9]) | int(default=0) }}"
          unit_of_measurement: "W"
          state_class: measurement
          device_class: "power"

        #### Dev Sensor to detect string failure
        - name: "Solax Local PV diff"
          unique_id: solax_local_pv_diff
          state: "{{ (((state_attr('sensor.solax_local', 'Data')[8] - state_attr('sensor.solax_local', 'Data')[9]))|abs)| int(default=0) }}"
          unit_of_measurement: "W"
          state_class: measurement
          device_class: "power"

        ### Inverter Power (negative for charging battery) ####
        - name: "Solax Local Inverter Power"
          unique_id: solax_local_inverter_power
          state: >
            {% if state_attr('sensor.solax_local', 'Data')[2] > 32767 %}{{ (state_attr('sensor.solax_local', 'Data')[2] - 65536) | int(default=0) }}
            {% else %}{{ state_attr('sensor.solax_local', 'Data')[2] | int(default=0) }}{% endif %}
          unit_of_measurement: "W"
          state_class: measurement
          device_class: "power"

        # Inverter using the grid
        - name: "Solax Local Inverter in Power"
          unique_id: solax_local_inverter_in_power
          state: >
            {% set val = states('sensor.solax_local_inverter_power')|int(default=0) %}
            {{ (0 - val) if is_number(val) and (val|int < 0) else 0 }}
          unit_of_measurement: "W"
          state_class: measurement
          device_class: "power"
          icon: mdi:battery

        # Inverter feeding the grid & load
        - name: "Solax Local Inverter Out Power"
          unique_id: solax_local_inverter_out_power
          state: >
            {% set val = states('sensor.solax_local_inverter_power')|int(default=0) %}
            {{ val if is_number(val) and (val|int > 0) else 0 }}
          unit_of_measurement: "W"
          state_class: measurement
          device_class: "power"
          icon: mdi:battery

        # Self Consumption Power
        # {% set val = states('sensor.solax_local_inverter_power')|int(default=0) + invloss - states('sensor.solax_local_battery_dump_power')|int(default=0) - states('sensor.solax_local_grid_export_power')|int(default=0)%}
        - name: "Solax Local Self Consumption Power"
          unique_id: solax_local_self_consumption_power
          state: >
            {% if states('sensor.solax_local_inverter_power')|int(default=0) < 1000 and states('sensor.solax_local_inverter_power')|int(default=0) >0%}
            {% set invloss = 75 %}
            {% else %}
            {% set invloss =0 %}
            {% endif%}
            {% set val = states('sensor.solax_local_inverter_power')|int(default=0) + invloss - states('sensor.solax_local_grid_export_power')|int(default=0)%}
            {{ val if is_number(val) and (val|int > 0) else 0 }}
          unit_of_measurement: "W"
          state_class: measurement
          device_class: "power"
          icon: mdi:battery


        ### Battery current, voltage and temperature ###
        - name: "Solax Local Battery Voltage"
          unique_id: solax_local_battery_voltage
          state: >
            {% set val = state_attr('sensor.solax_local', 'Data')[14]|float(default=0.0) %}
            {% if val > 0 %}
            {{ val/100 if is_number(val) and (val|float > 0) else 0 }}
            {% else%}
            {{ states('sensor.solax_local_battery_voltage')}}
            {% endif%}
          unit_of_measurement: "V"
          state_class: measurement
          device_class: "voltage"

        - name: "Solax Local Battery Cell Voltage"
          unique_id: solax_local_battery_cell_voltage
          #{% if state_attr('sensor.solax_local', 'Data')[0] not in ['unknown', 'unavailable','none'] %}
          state: >
            {% set val = state_attr('sensor.solax_local', 'Data')[14]|float(default=0.0) %}
            {% if val > 0 %}
            {{ val/100/90 if is_number(val) and (val|float > 0) else 0 }}
            {% else%}
            {{ states('sensor.solax_local_battery_cell_voltage')}}
            {% endif%}
          unit_of_measurement: "V"
          state_class: measurement
          device_class: "voltage"

        - name: "Solax Local Battery Current"
          unique_id: solax_local_battery_current
          state: >
            {% if state_attr('sensor.solax_local', 'Data')[15] > 32767 %}{{ (state_attr('sensor.solax_local', 'Data')[15] - 65536) / 100 }}
            {% else %}{{ state_attr('sensor.solax_local', 'Data')[15] / 100 }}{% endif %}
          unit_of_measurement: "A"
          state_class: measurement
          device_class: "current"

        - name: "Solax Local Battery Temperature"
          unique_id: solax_local_battery_temp
          state: "{{ state_attr('sensor.solax_local', 'Data')[17] | int(default=0) }}"
          unit_of_measurement: "°C"
          state_class: measurement
          device_class: "temperature"

        ### Battery charging/discharging power (positive for charging the battery) ###
        - name: "Solax Local Battery Power"
          unique_id: solax_local_battery_power
          state: >
            {% if state_attr('sensor.solax_local', 'Data')[16] > 32767 %}{{ state_attr('sensor.solax_local', 'Data')[16] - 65536 }}
            {% else %}{{ state_attr('sensor.solax_local', 'Data')[16] }}{% endif %}
          unit_of_measurement: "W"
          state_class: measurement
          device_class: "power"

        # Assuming 75W for running inverter and battery plus 95% conversion efficiency; if above 1kW, trust the inverter
        - name: "Solax Local Battery Power Adjusted"
          unique_id: solax_local_battery_power_adjusted
          state: >
            {% set ac = states('sensor.solax_local_inverter_power')|int %}
            {% set battery = states('sensor.solax_local_battery_power')|int %}
            {% set pv = (states('sensor.solax_local_pv_output')|float * 0.95)| round(0) %}
            {% set adjusted = (0 - ac + pv - 75) if (ac + pv != 0) else 0 %}
            {{ adjusted if (adjusted < battery and adjusted < 1000) else battery }}
          unit_of_measurement: "W"
          state_class: measurement
          device_class: "power"

        # Battery in power (charging)
        - name: "Solax Local Battery Use In"
          unique_id: solax_local_battery_use_in
          state: >
            {% set bat = states('sensor.solax_local_battery_power')|int(default=0) %}
            {{ bat if is_number(bat) and (bat|int > 0) else 0 }}
          unit_of_measurement: "W"
          state_class: measurement
          device_class: "power"
          icon: mdi:battery

        # Battery in power (charging from grid)
        - name: "Solax Local Battery Use In From Grid"
          unique_id: solax_local_battery_use_in_from_grid
          state: >
            {% set bat = states('sensor.solax_local_battery_power')|int(default=0) %}
            {% set gridPwr = states('sensor.solax_local_grid_power')|int(default=0) %} 
            {{ bat if is_number(bat) and (bat|int > 0 and gridPwr > 0) else 0 }}
          unit_of_measurement: "W"
          state_class: measurement
          device_class: "power"
          icon: mdi:battery

        # Battery in power (charging from solar, may need to consider how much more efficent as its pure DC to DC? I was using a loss based on excess inververt power but it doesn't tally with whats already been consumed. i.e. topping up the battery from solar eems far more efficent)
        - name: "Solax Local Battery In From Solar"
          unique_id: solax_local_battery_in_from_solar
          state: >
            {% set bat = states('sensor.solax_local_battery_use_in')|int(default=0) %}
            {% set invPwr = states('sensor.solax_local_inverter_power')|int(default=0) %} 
            {% set pvPwr = states('sensor.solax_local_pv_output')|int(default=0) %} 
            {% set gridPwr = states('sensor.solax_local_grid_power')|int(default=0) %} 
            {% set gridExpPwr = states('sensor.solax_local_grid_export_power')|int(default=0) %} 
            {{ (bat) if  (pvPwr > 0 and invPwr >0) else 0 }}
          unit_of_measurement: "W"
          state_class: measurement
          device_class: power
          icon: mdi:battery

        # Battery out power (discharging)
        - name: "Solax Local Battery Use Out"
          unique_id: solax_local_battery_use_out
          state: >
            {% set batAdj = states('sensor.solax_local_battery_power_adjusted')|int(default=0) %}
            {{ (0 - batAdj) if is_number(batAdj) and (batAdj|int < 0) and states('sensor.solax_local_inverter_mode') != 'Manual' and states('sensor.solax_local_manual_mode_behaviour') != 'Force Discharge' else 0 }}
          unit_of_measurement: "W"
          state_class: measurement
          device_class: power
          icon: mdi:battery

        # Grid feed-in (Manual Battery Export)
        - name: "Solax Local Battery Dump Power"
          unique_id: solax_local_battery_dump_power
          state: >
            {% set val = states('sensor.solax_local_grid_power')|int(default=0) %}
            {{ (0 - val) if is_number(val) and (val|int < 0) and states('sensor.solax_local_inverter_mode') == 'Manual' and states('sensor.solax_local_manual_mode_behaviour') == 'Force Discharge' else 0 }}
          unit_of_measurement: "W"
          state_class: measurement
          device_class: "power"

        ### Battery charge level (%)
        - name: "Solax Local Battery SoC"
          unique_id: solax_local_battery_soc
          state: "{{ state_attr('sensor.solax_local', 'Data')[18] | int(default=0) }}"
          unit_of_measurement: "%"
          state_class: measurement
          icon: mdi:battery-charging

        ### Estimated remaining energy 3.1 for 1 battery, 6.1 2 batts, 9.2 3 batts, 12.3 4 batts ###
        - name: "Solax Local Battery Remain Energy"
          unique_id: solax_local_battery_kwh
          state: "{{ states('sensor.solax_local_battery_soc') | int(default=0) * 9.2 / 100 }}"
          unit_of_measurement: "kWh"
          device_class: "energy"
          state_class: total

        ### Feed-in power (positive for feed-in, negative for consumption) ###
        - name: "Solax Local Feedin Power"
          unique_id: solax_local_feedin_power
          state: >
            {% if state_attr('sensor.solax_local', 'Data')[32] > 32767 %}{{ (state_attr('sensor.solax_local', 'Data')[32] - 65536) }}
            {% else %}{{ state_attr('sensor.solax_local', 'Data')[32] }}{% endif %}
          unit_of_measurement: "W"
          state_class: measurement
          device_class: "power"

        ### Grid power (positive for consumption negative for export) ###
        - name: "Solax Local Grid Power"
          unique_id: solax_local_grid_power
          state: >
            {% set val = states('sensor.solax_local_feedin_power')|int(default=0) %}
            {{ (0 - val) }}
          unit_of_measurement: "W"
          device_class: "power"
          state_class: measurement

        # Grid used (consumption)
        - name: "Solax Local Grid Used Power"
          unique_id: solax_local_grid_used_power
          state: >
            {% set val = states('sensor.solax_local_grid_power')|int(default=0) %}
            {{ val if is_number(val) and (val|int > 0) else 0 }}
          unit_of_measurement: "W"
          device_class: "power"
          state_class: measurement

        # Grid feed-in (export)
        - name: "Solax Local Grid Export Power"
          unique_id: solax_local_grid_export_power
          state: >
            {% set val = states('sensor.solax_local_grid_power')|int(default=0) %}
            {{ (0 - val) if is_number(val) and (val|int < 0) else 0 }}
          unit_of_measurement: "W"
          device_class: "power"
          state_class: measurement

        ### Expected household load (negative not expected as it only consumes energy) ###
        - name: "Solax Local Load Power"
          unique_id: solax_local_load_power
          state: "{{ states('sensor.solax_local_inverter_power')| float(default=0) - states('sensor.solax_local_feedin_power') | int(default=0) }}"
          unit_of_measurement: "W"
          device_class: "power"
          state_class: measurement

        - name: "Solax Local House Load Power"
          unique_id: solax_local_house_load_power
          # if your solax system can see load from zappi then set solax_can_see_zappi_load =1 elso set it to 0
          state: >
            {%set solax_can_see_zappi_load = 1%}
            {%if solax_can_see_zappi_load|bool == true%}
              {{ states('sensor.solax_local_inverter_power')| float(default=0) - states('sensor.solax_local_feedin_power') | int(default=0) - states('sensor.myenergi_zappi_XXXXXXXX_power_ct_internal_load') | float(default=0) }}
            {%else%}
              {{ states('sensor.solax_local_inverter_power')| float(default=0) - states('sensor.solax_local_feedin_power') | int(default=0) }}
            {%endif%}
          unit_of_measurement: "W"
          device_class: "power"
          state_class: measurement

        # Solar forecast for next day or current day (16:00 is cutover for next day)
        - name: energy_production_upcoming
          unique_id: energy_production_upcoming
          unit_of_measurement: "kWh"
          device_class: "energy"
          state: >
            {% if today_at('00:01') <= now() < today_at('16:00') %}
              {{ (states('sensor.energy_production_today')) }}
            {% else %}
              {{ (states('sensor.energy_production_tomorrow')) }}
            {% endif %}

######################################################
