solax_templates:
  template:
    ######################################################
    # Instructions for use
    ######################################################
    # Solax Local Sensor Readings and Settings
    #
    # User must set the battery size in solax_local_battery_capacity
    # User must set the inverter size in solax_local_inverter_capacity (typical max power seen during forced discharge)
    # User must set solax_can_see_zappi_load = 1 or 0 in - name: "Solax Local House Load Power"   
    ######################################################
    # Change log
    ######################################################
    # v4.    Fixed (bodge) in from solar and in from grid when battery is charged from both in forced charge
    # v3.6   Calculate remaining usable energy based off default min SoC
    #        Added two new sensors for battery size and inverter capacity and implimented their usage in calculations
    #.       Attempted to improve reliability of sensor data returned by rest sensor when timeouts occur and JSON is empty
    # v3.2   Removed zappi cloud sensor and replaced with zappi_power_ct_internal_load to avoid drop outs
    # v3.1   Added system on/off sensor
    #        Added sensor to compare string voltages
    # v3.0.0 Added calc for battery in from grid
    # v2.1.4 Improved resilience to sensors reporting defaults/template warnings in logs
    #        due to invalid/empty rest responses.
    # v2.1.3.1 Tidy yaml
    # v2.1.3 Bug fix to solax_local_battery_in_from_solar.
    #        Added device_class where they were missing.
    # v2.0 Battery Warming sensors added
    # V1.1
    # new experimental sensors have been added:
    # - name: "Solax Local Self Consumption Power"
    # - name: "Solax Local Battery In From Solar"
    # - name: "Solax Local Battery Dump Power"
    # - name: "Solax Local House Load Power"
    ######################################################
    - sensor:
        - name: solax_local
          state: >
            {% if state_attr('sensor.solax_rest_local', 'sn')|length == 10  %}
              {{ now().strftime("%H:%M:%S") }}
            {% else %}
              {{ (states('sensor.solax_local')) }}
            {% endif %}
          attributes:
            sn: >-
              {% if state_attr('sensor.solax_rest_local', 'sn')|length == 10 %}
                {{ (state_attr('sensor.solax_rest_local', 'sn')) }}
              {% else %}
                {{ (state_attr('sensor.solax_local', 'sn')) }}
              {% endif %}
            ver: >-
              {% if state_attr('sensor.solax_rest_local', 'sn')|length == 10 %}
                {{ (state_attr('sensor.solax_rest_local', 'ver')) }}
              {% else %}
                {{ (state_attr('sensor.solax_local', 'ver')) }}
              {% endif %}
            type: >-
              {% if state_attr('sensor.solax_rest_local', 'sn')|length == 10 %}
                {{ (state_attr('sensor.solax_rest_local', 'type')) }}
              {% else %}
                {{ (state_attr('sensor.solax_local', 'type')) }}
              {% endif %}
            Data: >-
              {% if state_attr('sensor.solax_rest_local', 'Data')|length > 30 or states('sensor.solax_rest_local') not in ['unknown', 'unavailable','None',''] %}
                {{ (state_attr('sensor.solax_rest_local', 'Data')) }}
              {% else %}
                {{ (state_attr('sensor.solax_local', 'Data')) }}
              {% endif %}
            Information: >-
              {% if state_attr('sensor.solax_rest_local', 'sn')|length == 10 %}
                {{ (state_attr('sensor.solax_rest_local', 'Information')) }}
              {% else %}
                {{ (state_attr('sensor.solax_local', 'Information')) }}
              {% endif %}

        - name: "Solax Local Type"
          unique_id: solax_local_type
          state: >
            {% set attr = state_attr('sensor.solax_rest_local', 'type') %}
            {% if attr == 3 %}X1 hybrid g3
            {% elif attr == 4 %}X1 boost air mini
            {% elif attr == 5 %}X3 hybrid g1
            {% elif attr == 6 %}X3 20k 30k
            {% elif attr == 7 %}X3 mic
            {% elif attr == 8 %}X1 boost pro
            {% elif attr == 9 %}X1 ac
            {% elif attr == 10 %}A1 hybrid
            {% elif attr == 11 %}A1 hybrid
            {% elif attr == 12 %}A1 hybrid
            {% elif attr == 13 %}J1 ess
            {% elif attr == 14 %}X3 hybrid g4
            {% elif attr == 15 %}X1 hybrid g4
            {% elif attr == 16 %}X3 micpro g2
            {% elif attr == 17 %}X1 hybridsplit g4
            {% elif attr == 18 %}X1 boostmini g4
            {% elif attr == 22 %}X1 boostmini g4
            {% elif attr == 19 %}A1 hybrid g2
            {% elif attr == 20 %}A1 hybrid g2
            {% elif attr == 21 %}A1 hybrid g2
            {% elif attr == 23 %}X1 hybrid g5
            {% elif attr == 24 %}X3 hybrid g5
            {% elif attr == 100 %}X3 big
            {% elif attr == 101 %}X3 big
            {% elif attr == 102 %}X1-Hybrid-LV
            {% else %}unknown{% endif %}

        # - name: "SolaX local Date & Time (48. 49. 50.)"
        #   unique_id: solax_local_48
        #   icon: mdi:calendar
        #   state: >
        #     {% set year = (state_attr('sensor.solax_local', 'Data')[48] /256) |round(0) %}
        #     {% set month = (state_attr('sensor.solax_local', 'Data')[48] %256) |round(0) %}
        #     {% set day = (state_attr('sensor.solax_local', 'Data')[49] /256) |round(0) %}
        #     {% set hour = (state_attr('sensor.solax_local', 'Data')[49] %256) |round(0) %}
        #     {% set min = (state_attr('sensor.solax_local', 'Data')[50] /256) |round(0) %}
        #     {% set sec = (state_attr('sensor.solax_local', 'Data')[50] %256) |round(0) %}
        #     {% set today = '20' ~ year ~ '-' ~ month ~ '-' ~ day ~ ' ' ~ hour ~ ':' ~ min ~ ':' ~ sec %}
        #     {{ as_timestamp(today)|timestamp_custom('%Y-%m-%d %H:%M:%S') }}

        ### Make the settings look like sensor data by embedding the info in the Data attribute
        - name: solax_local_settings
          state: >
            {{ now().strftime("%H:%M:%S") }}
          attributes:
            Data: >-
              {%if is_number(states('sensor.solax_rest_local_settings')|length) or states('sensor.solax_rest_local_settings')|length > 30 %}
              {{ (states('sensor.solax_rest_local_settings')) }}
              {%else%}
              {{ state_attr('sensor.solax_local_settings','Data') }}
              {%endif%}

        ######################################################
        # Solax Local Settings
        ######################################################
        
        ### System on/off 
        - name: "Solax Local System State"
          unique_id: solax_local_system_state
          state: "{{ state_attr('sensor.solax_local_settings', 'Data')[19] == 1 | bool(default=false)}}"
          icon: mdi:home-switch

        ### Battery discharge min (%) (Self Use Mode)
        - name: "Solax Local SelfUse Battery Min SoC"
          unique_id: solax_local_selfuse_battery_min_soc
          state: "{{ state_attr('sensor.solax_local_settings', 'Data')[0] | int(default=0) }}"
          unit_of_measurement: "%"
          state_class: measurement
          icon: mdi:battery-20

        ### Battery charge from grid switch (Self Use Mode)
        - name: "Solax Local Self Use Battery Charge From Grid"
          unique_id: solax_local_selfuse_battery_grid_enabled
          state: "{{ state_attr('sensor.solax_local_settings', 'Data')[1] | int(default=1) }}"
          state_class: measurement
          icon: mdi:battery-arrow-up

        ### Battery charge level to (%) from grid (Self Use Mode)
        - name: "Solax Local SelfUse Battery Chrg Frm Grd To"
          #     #unique_id: solax_local_self_use_battery_charge_from_grid_to
          unique_id: solax_local_selfuse_battery_chrg_frm_grd_to
          state: "{{ state_attr('sensor.solax_local_settings', 'Data')[2] | int(default=94) }}"
          unit_of_measurement: "%"
          state_class: measurement
          icon: mdi:battery-charging-90

        ### Battery discharge min (%) (Feed In  Mode)
        - name: "Solax Local Feed In Battery Min SoC"
          unique_id: solax_local_feed_in_battery_min_soc
          state: "{{ state_attr('sensor.solax_local_settings', 'Data')[12] | int(default=0) }}"
          unit_of_measurement: "%"
          state_class: measurement
          icon: mdi:battery-20

        ### Battery charge level to (%) from grid (feed In Mode)
        - name: "Solax Local Feed In Battery Charge From Grid To"
          unique_id: solax_local_feed_in_battery_charge_from_grid_to
          state: "{{ state_attr('sensor.solax_local_settings', 'Data')[13] | int(default=0) }}"
          unit_of_measurement: "%"
          state_class: measurement
          icon: mdi:battery-charging-90

        ### Battery settings charge/discharge (period 1) ###
        - name: "Solax Local Battery Setting Start Charge"
          unique_id: solax_local_battery_setting_start_charge
          state: "{{'%02d' % ((state_attr('sensor.solax_local_settings', 'Data')[3])%256 | int(default=0)) }}:{{'%02d' %((state_attr('sensor.solax_local_settings', 'Data')[3])/256) | int(default=0)}} "
          icon: mdi:clock-start

        - name: "Solax Local Battery Setting Stop Charge"
          unique_id: solax_local_battery_setting_stop_charge
          state: "{{'%02d' % ((state_attr('sensor.solax_local_settings', 'Data')[4])%256 | int(default=0)) }}:{{'%02d' % ((state_attr('sensor.solax_local_settings', 'Data')[4])/256) | int(default=0)}} "
          icon: mdi:clock-end

        - name: "Solax Local Battery Setting Start Discharge"
          unique_id: solax_local_battery_setting_start_discharge
          state: "{{'%02d' % ((state_attr('sensor.solax_local_settings', 'Data')[5])%256 | int(default=0)) }}:{{'%02d' % ((state_attr('sensor.solax_local_settings', 'Data')[5])/256) | int(default=0)}} "
          icon: mdi:clock-start

        - name: "Solax Local Battery Setting Stop Discharge"
          unique_id: solax_local_battery_setting_stop_discharge
          state: "{{'%02d' % ((state_attr('sensor.solax_local_settings', 'Data')[6])%256 | int(default=0)) }}:{{ '%02d' % ((state_attr('sensor.solax_local_settings', 'Data')[6])/256) | int(default=0)}} "
          icon: mdi:clock-end

        ### Battery settings charge/discharge (period 2) ###
        - name: "Solax Local Battery Setting Start Charge 2"
          unique_id: solax_local_battery_setting_start_charge2
          state: "{{'%02d' % ((state_attr('sensor.solax_local_settings', 'Data')[8])%256 | int(default=0)) }}:{{'%02d' %((state_attr('sensor.solax_local_settings', 'Data')[8])/256) | int(default=0)}} "
          icon: mdi:clock-start

        - name: "Solax Local Battery Setting Stop Charge 2"
          unique_id: solax_local_battery_setting_stop_charge2
          state: "{{'%02d' % ((state_attr('sensor.solax_local_settings', 'Data')[9])%256 | int(default=0)) }}:{{'%02d' % ((state_attr('sensor.solax_local_settings', 'Data')[9])/256) | int(default=0)}} "
          icon: mdi:clock-end
        ### Battery charge/discharge period2 enabled
        - name: "Solax Local Battery ChD2 Enabled"
          unique_id: solax_local_battery_chd2_enabled
          state: "{{ state_attr('sensor.solax_local_settings', 'Data')[7] == 1 | bool(default=false) }}"
          icon: mdi:battery-arrow-up

        ### Inverter default working mode
        - name: "Solax Default Operation Mode"
          unique_id: solax_default_operation_mode
          device_class: enum
          state: >
            {% set mapper =  {
                'Self Use' : 0,
                'Feed In Priority' : 1} %}
            {% set state =  states('input_select.solax_default_mode')  %}
            {{ mapper[state] if state in mapper else '0' }}
          icon: mdi:cursor-default-outline

        ### Inverter working mode
        - name: "Solax Local Inverter Mode"
          unique_id: solax_local_inverter_mode
          device_class: enum
          state: >
            {% set mapper =  {
                0 : 'Self Use',
                1 : 'Feed In Priority',
                2 : 'Back Up',
                3 : 'Manual'} %}
            {% set state =  state_attr('sensor.solax_local_settings', 'Data')[10] | int(default=0) %}
            {{ mapper[state] if state in mapper else 'Unknown' }}
          icon: mdi:sun-compass

        ### Inverter manual mode
        - name: "Solax Local Manual Mode Behaviour"
          unique_id: solax_local_manual_mode_behaviour
          device_class: enum
          state: >
            {% set mapper =  {
                0 : 'Do Nothing',
                1 : 'Force Charge',
                2 : 'Force Discharge'} %}
            {% set state =  state_attr('sensor.solax_local_settings', 'Data')[11] | int(default=0) %}
            {{ mapper[state] if state in mapper else 'Unknown' }}

        ### Battery heat enabled
        - name: "Solax Local Battery Heat Enabled"
          unique_id: solax_local_battery_heat_enabled
          state: "{{ state_attr('sensor.solax_local_settings', 'Data')[14] == 1 | bool(default=false) }}"
          icon: mdi:radiator

        ### Battery heat level
        - name: "Solax Local Battery Heat Level"
          unique_id: solax_local_battery_heat_level
          state: "{{ state_attr('sensor.solax_local_settings', 'Data')[20] | int(default=0) }}"
          icon: mdi:radiator

        ### Battery settings Heat (period 1) ###
        - name: "Solax Local Battery Heat Start"
          unique_id: solax_local_battery_heat_start
          state: "{{'%02d' % ((state_attr('sensor.solax_local_settings', 'Data')[15])%256 | int(default=0)) }}:{{'%02d' %((state_attr('sensor.solax_local_settings', 'Data')[15])/256) | int(default=0)}} "
          icon: mdi:clock-start

        - name: "Solax Local Battery Heat Stop"
          unique_id: solax_local_battery_heat_stop
          state: "{{'%02d' % ((state_attr('sensor.solax_local_settings', 'Data')[16])%256 | int(default=0)) }}:{{'%02d' % ((state_attr('sensor.solax_local_settings', 'Data')[16])/256) | int(default=0)}} "
          icon: mdi:clock-end
        ### Battery settings Heat (period 2) ###
        - name: "Solax Local Battery Heat Start 2"
          unique_id: solax_local_battery_heat_start_2
          state: "{{'%02d' % ((state_attr('sensor.solax_local_settings', 'Data')[17])%256 | int(default=0)) }}:{{'%02d' % ((state_attr('sensor.solax_local_settings', 'Data')[17])/256) | int(default=0)}} "
          icon: mdi:clock-start

        - name: "Solax Local Battery Heat Stop 2"
          unique_id: solax_local_battery_heat_stop_2
          state: "{{'%02d' % ((state_attr('sensor.solax_local_settings', 'Data')[18])%256 | int(default=0)) }}:{{ '%02d' % ((state_attr('sensor.solax_local_settings', 'Data')[18])/256) | int(default=0)}} "
          icon: mdi:clock-end

        ######################################################
        # Solax Sensor Values
        ######################################################
        ### Grid Voltage
        - name: "Solax Local Grid Voltage"
          unique_id: solax_local_grid_voltage
          state: "{{state_attr('sensor.solax_local', 'Data')[0] | float / 10}}"
          unit_of_measurement: "V"
          state_class: measurement
          device_class: "voltage"

        #### Combined Solar PV output ####
        - name: "Solax Local PV Output"
          unique_id: solax_local_pv_output
          state: "{{ (state_attr('sensor.solax_local', 'Data')[8] + state_attr('sensor.solax_local', 'Data')[9]) | int(default=0) }}"
          unit_of_measurement: "W"
          state_class: measurement
          device_class: "power"

        #### String 1 Solar PV output ####
        - name: "Solax Local PV Output String 1"
          unique_id: solax_local_pv_output_1
          state: "{{ (state_attr('sensor.solax_local', 'Data')[8]) | int(default=0) }}"
          unit_of_measurement: "W"
          state_class: measurement
          device_class: "power"

        #### String 2 Solar PV output ####
        - name: "Solax Local PV Output String 2"
          unique_id: solax_local_pv_output_2
          state: "{{ (state_attr('sensor.solax_local', 'Data')[9]) | int(default=0) }}"
          unit_of_measurement: "W"
          state_class: measurement
          device_class: "power"

        #### Dev Sensor to detect string failure
        - name: "Solax Local PV diff"
          unique_id: solax_local_pv_diff
          state: "{{ (((state_attr('sensor.solax_local', 'Data')[8] - state_attr('sensor.solax_local', 'Data')[9]))|abs)| int(default=0) }}"
          unit_of_measurement: "W"
          state_class: measurement
          device_class: "power"

        ### Inverter Power (negative for charging battery) ####
        - name: "Solax Local Inverter Power"
          unique_id: solax_local_inverter_power
          state: >
            {% if state_attr('sensor.solax_local', 'Data')[2] > 32767 %}{{ (state_attr('sensor.solax_local', 'Data')[2] - 65536) | int(default=0) }}
            {% else %}{{ state_attr('sensor.solax_local', 'Data')[2] | int(default=0) }}{% endif %}
          unit_of_measurement: "W"
          state_class: measurement
          device_class: "power"

        # Inverter using the grid
        - name: "Solax Local Inverter in Power"
          unique_id: solax_local_inverter_in_power
          state: >
            {% set val = states('sensor.solax_local_inverter_power')|int(default=0) %}
            {{ (0 - val) if is_number(val) and (val|int < 0) else 0 }}
          unit_of_measurement: "W"
          state_class: measurement
          device_class: "power"
          icon: mdi:battery

        # Inverter feeding the grid & load
        - name: "Solax Local Inverter Out Power"
          unique_id: solax_local_inverter_out_power
          state: >
            {% set val = states('sensor.solax_local_inverter_power')|int(default=0) %}
            {{ val if is_number(val) and (val|int > 0) else 0 }}
          unit_of_measurement: "W"
          state_class: measurement
          device_class: "power"
          icon: mdi:battery

        # Self Consumption Power
        # {% set val = states('sensor.solax_local_inverter_power')|int(default=0) + invloss - states('sensor.solax_local_battery_dump_power')|int(default=0) - states('sensor.solax_local_grid_export_power')|int(default=0)%}
        - name: "Solax Local Self Consumption Power"
          unique_id: solax_local_self_consumption_power
          state: >
            {% if states('sensor.solax_local_inverter_power')|int(default=0) < 1000 and states('sensor.solax_local_inverter_power')|int(default=0) >0%}
              {% set invloss = 75 %}
            {% else %}
              {% set invloss =0 %}
            {% endif%}
              {% set val = states('sensor.solax_local_inverter_power')|int(default=0) + invloss - states('sensor.solax_local_grid_export_power')|int(default=0)%}
            {{ val if is_number(val) and (val|int > 0) else 0 }}
          unit_of_measurement: "W"
          state_class: measurement
          device_class: "power"
          icon: mdi:battery


        ### Battery current, voltage and temperature ###
        - name: "Solax Local Battery Voltage"
          unique_id: solax_local_battery_voltage
          state: >
            {% set val = state_attr('sensor.solax_local', 'Data')[14]|float(default=0.0) %}
            {% if val > 0 %}
              {{ val/100 if is_number(val) and (val|float > 0) else 0 }}
            {% else%}
              {{ states('sensor.solax_local_battery_voltage')}}
            {% endif%}
          unit_of_measurement: "V"
          state_class: measurement
          device_class: "voltage"

        - name: "Solax Local Battery Cell Voltage"
          unique_id: solax_local_battery_cell_voltage
          #{% if state_attr('sensor.solax_local', 'Data')[0] not in ['unknown', 'unavailable','none'] %}
          state: >
            {% set val = state_attr('sensor.solax_local', 'Data')[14]|float(default=0.0) %}
            {% if val > 0 %}
              {{ val/100/(states('input_number.solax_battery_capacity')|int/3*32) if is_number(val) and (val|float > 0) else 0 }}
            {% else%}
              {{ states('sensor.solax_local_battery_cell_voltage')}}
            {% endif%}
          unit_of_measurement: "V"
          state_class: measurement
          device_class: "voltage"

        - name: "Solax Local Battery Current"
          unique_id: solax_local_battery_current
          state: >
            {% if state_attr('sensor.solax_local', 'Data')[15] > 32767 %}{{ (state_attr('sensor.solax_local', 'Data')[15] - 65536) / 100 }}
            {% else %}{{ state_attr('sensor.solax_local', 'Data')[15] / 100 }}{% endif %}
          unit_of_measurement: "A"
          state_class: measurement
          device_class: "current"

        - name: "Solax Local Battery Temperature"
          unique_id: solax_local_battery_temp
          state: "{{ state_attr('sensor.solax_local', 'Data')[17] | int(default=0) }}"
          unit_of_measurement: "°C"
          state_class: measurement
          device_class: "temperature"

        ### Battery charging/discharging power (positive for charging the battery) ###
        - name: "Solax Local Battery Power"
          unique_id: solax_local_battery_power
          state: >
            {% if state_attr('sensor.solax_local', 'Data')[16] > 32767 %}{{ state_attr('sensor.solax_local', 'Data')[16] - 65536 }}
            {% else %}{{ state_attr('sensor.solax_local', 'Data')[16] }}{% endif %}
          unit_of_measurement: "W"
          state_class: measurement
          device_class: "power"

        # Assuming 75W for running inverter and battery plus 95% conversion efficiency; if above 1kW, trust the inverter
        - name: "Solax Local Battery Power Adjusted"
          unique_id: solax_local_battery_power_adjusted
          state: >
            {% set ac = states('sensor.solax_local_inverter_power')|int %}
            {% set battery = states('sensor.solax_local_battery_power')|int %}
            {% set pv = (states('sensor.solax_local_pv_output')|float * 0.95)| round(0) %}
            {% set adjusted = (0 - ac + pv - 75) if (ac + pv != 0) else 0 %}
            {{ adjusted if (adjusted < battery and adjusted < 1000) else battery }}
          unit_of_measurement: "W"
          state_class: measurement
          device_class: "power"

        # Battery in power (charging)
        - name: "Solax Local Battery Use In"
          unique_id: solax_local_battery_use_in
          state: >
            {% set bat = states('sensor.solax_local_battery_power')|int(default=0) %}
            {{ bat if is_number(bat) and (bat|int > 0) else 0 }}
          unit_of_measurement: "W"
          state_class: measurement
          device_class: "power"
          icon: mdi:battery

        # Battery in power (charging from grid)
        - name: "Solax Local Battery Use In From Grid"
          unique_id: solax_local_battery_use_in_from_grid
          state: >
            {% set gridPwr = states('sensor.solax_local_grid_used_power')|int(default=0) %}
            {% set pvPwr = min(states('sensor.solax_local_pv_output')|float*0.95,states('input_number.solax_inverter_capacity')|float*1000)|int (default=0) %}
            {% set bat = states('sensor.solax_local_battery_power')|int - pvPwr|int  %}
            {{ bat if is_number(bat) and (bat|int > 0 and gridPwr > 0) else 0 }}
          unit_of_measurement: "W"
          state_class: measurement
          device_class: "power"
          icon: mdi:battery

        # Battery in power (charging from solar, may need to consider how much more efficent as its pure DC to DC? I was using a loss based on excess inververt power but it doesn't tally with whats already been consumed. i.e. topping up the battery from solar eems far more efficent)
        - name: "Solax Local Battery In From Solar"
          unique_id: solax_local_battery_in_from_solar
          state: >
            {% set grid = states('sensor.solax_local_battery_use_in_from_grid')|int (default = 0) %}
            {% set bat = states('sensor.solax_local_battery_use_in')|int(default=0) - grid|int%}
            {% set invPwr = states('sensor.solax_local_inverter_power')|int(default=0) %} 
            {% set pvPwr = min(states('sensor.solax_local_pv_output')|float*0.95,states('input_number.solax_inverter_capacity')|float*1000)|int (default=0) %}
            {{ (bat) if  (pvPwr > 0 and invPwr >0) else 0 }}
          unit_of_measurement: "W"
          state_class: measurement
          device_class: power
          icon: mdi:battery

        # Battery out power (discharging)
        - name: "Solax Local Battery Use Out"
          unique_id: solax_local_battery_use_out
          state: >
            {% set batAdj = states('sensor.solax_local_battery_power_adjusted')|int(default=0) %}
            {% set pvPwr = min(states('sensor.solax_local_pv_output')|float*0.95,states('input_number.solax_inverter_capacity')|float*1000)|int (default=0) %}
            {% set load = states('sensor.solax_local_inverter_power')| float(default=0.0) - states('sensor.solax_local_feedin_power')|float %}
            {%if states('sensor.solax_local_inverter_mode') != 'Manual' and states('sensor.solax_local_manual_mode_behaviour') != 'Force Discharge'%}
              {{(0 - batAdj) if is_number(batAdj) and (batAdj|int < 0) else 0 }}
            {%elif states('sensor.solax_local_inverter_mode') == 'Manual' and states('sensor.solax_local_manual_mode_behaviour') == 'Force Discharge'%}
              {{(load - pvPwr) if load > pvPwr else 0 }}
            {%endif%}
          unit_of_measurement: "W"
          state_class: measurement
          device_class: power
          icon: mdi:battery

        # Grid feed-in (Manual Battery Export)
#        - name: "Solax Local Battery Dump Power"
#          unique_id: solax_local_battery_dump_power
#          state: >
#            {% set val = states('sensor.solax_local_grid_power')|int(default=0) %}
#            {{ (0 - val) if is_number(val) and (val|int < 0) and states('sensor.solax_local_inverter_mode') == 'Manual' and states('sensor.solax_local_manual_mode_behaviour') == 'Force Discharge' else 0 }}
#          unit_of_measurement: "W"
#          state_class: measurement
#          device_class: "power"

        # Battery Export power (discharging)
        - name: "Solax Local Battery Dump Power"
          unique_id: solax_local_battery_dump_power
          state: >
            {% set batAdj = max(states('sensor.solax_local_battery_power_adjusted')|int,states('input_number.solax_inverter_capacity')|float*-1000)|int (default=0) %}
            {% set load = states('sensor.solax_local_inverter_power')| float(default=0.0) - states('sensor.solax_local_feedin_power')|float %}
            {{ (0 - batAdj) if is_number(batAdj) and (batAdj|int < 0) and states('sensor.solax_local_inverter_mode') == 'Manual' and states('sensor.solax_local_manual_mode_behaviour') == 'Force Discharge' else 0 }}
          unit_of_measurement: "W"
          state_class: measurement
          device_class: "power"

        ### Battery charge level (%)
        - name: "Solax Local Battery SoC"
          unique_id: solax_local_battery_soc
          state: "{{ state_attr('sensor.solax_local', 'Data')[18] | int(default=0) }}"
          unit_of_measurement: "%"
          state_class: measurement
          icon: >
            {% set b_soc = state_attr('sensor.solax_local', 'Data')[68] / 10 %}
            {% if b_soc > 95 %}mdi:battery
            {% elif b_soc > 89 %}mdi:battery-90
            {% elif b_soc > 79 %}mdi:battery-80
            {% elif b_soc > 69 %}mdi:battery-70
            {% elif b_soc > 59 %}mdi:battery-60
            {% elif b_soc > 49 %}mdi:battery-50
            {% elif b_soc > 39 %}mdi:battery-40
            {% elif b_soc > 29 %}mdi:battery-30
            {% elif b_soc > 19 %}mdi:battery-20
            {% elif b_soc > 9 %}mdi:battery-10
            {% else %}mdi:battery-0{% endif %}

        ### Estimated remaining energy ###
        - name: "Solax Local Battery Remain Energy"
          unique_id: solax_local_battery_kwh
#          state: "{{ states('sensor.solax_local_battery_soc') | int(default=0) * states('input_number.solax_battery_capacity')|float / 100 }}"
          state: "{{ (states('sensor.solax_local_battery_soc')|int - states('input_number.solax_default_discharge_limit_soc')|int) /100 * states('input_number.solax_battery_capacity')|float }}"
          unit_of_measurement: "kWh"
          device_class: "energy"
          state_class: total

        ### Feed-in power (positive for feed-in, negative for consumption) ###
        - name: "Solax Local Feedin Power"
          unique_id: solax_local_feedin_power
          state: >
            {% if state_attr('sensor.solax_local', 'Data')[32] > 32767 %}{{ (state_attr('sensor.solax_local', 'Data')[32] - 65536) }}
            {% else %}{{ state_attr('sensor.solax_local', 'Data')[32] }}{% endif %}
          unit_of_measurement: "W"
          state_class: measurement
          device_class: "power"

        ### Grid power (positive for consumption negative for export) ###
        - name: "Solax Local Grid Power"
          unique_id: solax_local_grid_power
          state: >
            {% set val = states('sensor.solax_local_feedin_power')|int(default=0) %}
            {{ (0 - val) }}
          unit_of_measurement: "W"
          device_class: "power"
          state_class: measurement

        # Grid used (consumption)
        - name: "Solax Local Grid Used Power"
          unique_id: solax_local_grid_used_power
          state: >
            {% set val = states('sensor.solax_local_grid_power')|int(default=0) %}
            {{ val if is_number(val) and (val|int > 0) else 0 }}
          unit_of_measurement: "W"
          device_class: "power"
          state_class: measurement

        # Grid feed-in (export)
        - name: "Solax Local Grid Export Power"
          unique_id: solax_local_grid_export_power
          state: >
            {% set val = states('sensor.solax_local_grid_power')|int(default=0) %}
            {{ (0 - val) if is_number(val) and (val|int < 0) else 0 }}
          unit_of_measurement: "W"
          device_class: "power"
          state_class: measurement

        ### Expected household load (negative not expected as it only consumes energy) ###
        - name: "Solax Local Load Power"
          unique_id: solax_local_load_power
          state: "{{ states('sensor.solax_local_inverter_power')| float(default=0) - states('sensor.solax_local_feedin_power') | int(default=0) }}"
          unit_of_measurement: "W"
          device_class: "power"
          state_class: measurement

        - name: "Solax Local House Load Power"
          unique_id: solax_local_house_load_power
          # if your solax system can see load from zappi then set solax_can_see_zappi_load =1 elso set it to 0
          state: >
            {% set solax_can_see_zappi_load = states('input_boolean.solax_can_see_zappi_loads') %}
            {% set zappi_load_fiddle = states('sensor.zappi_power_ct_internal_load')|float - (states('sensor.myenergi_zappi_XXXXXXXX_grid_ct2')|float + states('sensor.solax_local_feedin_power')|float) if states('sensor.zappi_power_ct_internal_load')|int != 0 else 0 %}
            {%if solax_can_see_zappi_load == 'on'%}
              {{ states('sensor.solax_local_inverter_power')| float(default=0) - states('sensor.solax_local_feedin_power') | int(default=0) - zappi_load_fiddle | float(default=0) }}
            {%else%}
              {{ states('sensor.solax_local_inverter_power')| float(default=0) - states('sensor.solax_local_feedin_power') | int(default=0) }}
            {%endif%}
          unit_of_measurement: "W"
          device_class: "power"
          state_class: measurement

######################################################


        - name: "AC_12. Solax - grid status"
          unique_id: solax_local_12
          state: >
            {% set attr = state_attr('sensor.solax_local', 'Data')[12] %}
            {% if attr == 2 %}on
            {% elif attr == 7 %}off
            {% else %}
              "{{ attr }}"
            {% endif %}
          icon: >
            {% if attr == 2 %}
              mdi:transmission-tower
            {% elif attr == 7 %}
              mdi:transmission-tower-off
            {% else %}
              mdi:power-off
            {% endif %}

        - name: "Solax - RunMode"
          unique_id: solax_local_run_mode
          icon: mdi:list-status
          state: >
            {% set attr = state_attr('sensor.solax_local', 'Data')[12] %}
            {% if attr == 0 %}Waiting
            {% elif attr == 1 %}Checking
            {% elif attr == 2 %}Normal
            {% elif attr == 3 %}Fault
            {% elif attr == 4 %}Permanent Fault
            {% elif attr == 5 %}Upgrading
            {% elif attr == 6 %}Eps Check Mode
            {% elif attr == 7 %}Eps Mode
            {% elif attr == 8 %}Self-test   ?
            {% elif attr == 9 %}Idle        ?
            {% elif attr == 10 %}Standby    ?
            {% elif attr == 11 %}Pv Wake Up Bat ?
            {% elif attr == 12 %}Gen Check  ?
            {% elif attr == 13 %}Gen Run    ?
            {% else %}
              "{{ attr }}"
            {% endif %}

    - trigger:
        - trigger: time_pattern
          hours: /1
      sensor:
        - name: Solax Local Production snap shot
          unique_id: solax_local_production_snap_shot
          unit_of_measurement: "kWh"
          device_class: "energy"
          state_class: total
          state: >
            {{states('sensor.export_daily')|float}}
      
    - trigger:
        - trigger: state
          entity_id: sensor.solax_local_production_snap_shot
      sensor:
        - name: Solax Local Production Rate
          unique_id: solax_local_production_rate
          unit_of_measurement: "kWh"
          device_class: "energy"
          state_class: total
          state: >
            {{(trigger.to_state.state|float - trigger.from_state.state|float)*60/60}}
          attributes: 
            current_val: >
              {{trigger.to_state.state}}
            previous_val: >
              {{trigger.from_state.state}}
            last_changed: >
              {{now()}}
