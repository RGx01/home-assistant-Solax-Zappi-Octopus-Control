###############################################
# Replace octopus account number z_ZZZZZZZZ
# replace zappi serial number zappi_XXXXXXXX
#
# Change log
# v3.7   Pre-emptive discharge options
# v3.6   Dynamic Discharge Window Close time based on how long it would take to discharge - Abandonded for now
# v3.5   Discharge Window Close time
# v3.2   Replace zappi cloud sensor with zappi_power_ct_internal_load to avoid drop outs
# v3.1   Better Notification Management
#        Added system on off functionality
#        Added new sensor to check PV string power difference
# v3.0.0 Event based trigger for solax discharge to handle discharging before an EV Charge
#        Zappi last disconnect sensor - added a from condition
# v2.1.4 Updated ev_start_time logic.
# v2.1.3 moved the free elecreic tarriff template to octopus saving sessions package
# v2.1.1 fixed template bug with tariff select
# v2.1 Added template triggers for tariffs
# v2.0 Added mobile notifications
###############################################
solax_zappi_octopus_templates:
  template:
    ######################################################
    # Wobble
    ######################################################
    - trigger:
        - trigger: time
          at: "01:00:00"
      sensor:
        - name: "Wobble"
          unique_id: wobble
          state: >
            {{range(1, 16)|random}}

    ######################################################
    # EV Start Time + Wobble
    ######################################################
    - sensor:
        - name: Don't Charge EV before time (wobble)
          unique_id: don_t_charge_ev_before_time_wobble
          device_class: "timestamp"
          state: >
            {% set wobble = states('sensor.wobble')|int(default=0)%}
            {%if today_at(states('input_datetime.don_t_charge_ev_before_time'))|as_timestamp > today_at('23:15')|as_timestamp %}
              {{(today_at(states('input_datetime.don_t_charge_ev_before_time'))|as_datetime (default=now()|as_datetime))|as_local}}
            {%else%}
              {{((today_at(states('input_datetime.don_t_charge_ev_before_time'))|as_timestamp + (wobble|int*60))|as_datetime (default=now()|as_datetime))|as_loacal}}
            {%endif%}
    ######################################################
    # Earliest EV Start Time
    ######################################################
    - sensor:
        - name: Earliest EV Charge Start Time
          unique_id: earliest_ev_charge_start_time
          device_class: "timestamp"
          state: >
            {%set target_time = states('sensor.octopus_intelligent_target_time')|as_timestamp (default=today_at("05:30")|as_timestamp)%}
            {%set target_percentage = states('number.octopus_energy_z_ZZZZZZZZ_intelligent_charge_target')%}
            {%set ev_size = states('input_number.ev_battery_size')|int(default=10) %}
            {%set delta_time = ((ev_size|int/6.8)*(target_percentage|int/100))*60*60%}
            {{(target_time-delta_time)|as_datetime (default=(now()|as_timestamp-delta_time)|as_datetime)}}
    ######################################################
    # Solar threshold calcs
    # elevation - is degrees the sun is above the horizon
    ######################################################
    - sensor:
        - name: Solar Threshold
          unique_id: solar_export_threshold
          device_class: "timestamp"
          icon: mdi:weather-sunset-down
          state: >
            {% set utc_offset = now().utcoffset().total_seconds() / 3600 %}
            {% set year = now().year -%}
            {% set month = now().month -%}
            {% set day = now().day -%}
            {% set longitude = state_attr('zone.home','longitude')|float -%}
            {% set latitude = state_attr('zone.home','latitude')|float -%}
            {% set elevation = states('input_number.sun_degrees_above_horizon')|float -%}
            {% set JD = (367 * year) - ((7 * (year + ((month + 9) // 12))) // 4) + ((275 * month) // 9) + day + 1721014 -%}
            {% set JC = (JD - 2451545) / 36525 %}
            {% set Geom_Mean_Long_Sun_deg = (280.46646+JC*(36000.76983+JC*0.0003032)) %360 -%}
            {% set Geom_Mean_Anom_Sun_deg = 357.52911+JC*(35999.05029-0.0001537*JC) -%}
            {% set Eccent_Earth_Orbit= 0.016708634-JC*(0.000042037+0.0000001267*JC) -%}
            {% set Sun_Eq_of_Ctr = sin(Geom_Mean_Anom_Sun_deg*pi/180)*(1.914602-JC*(0.004817+0.000014*JC))+sin(2*Geom_Mean_Anom_Sun_deg*pi/180)*(0.019993-0.000101*JC)+sin(3*Geom_Mean_Anom_Sun_deg*pi/180)*0.000289 -%}
            {% set Sun_True_Long_deg = Geom_Mean_Long_Sun_deg + Sun_Eq_of_Ctr -%}
            {% set Sun_True_Anom_deg = Geom_Mean_Anom_Sun_deg + Sun_Eq_of_Ctr -%}
            {% set Sun_Rad_Vector_AUs = (1.000001018*(1-Eccent_Earth_Orbit*Eccent_Earth_Orbit))/(1+Eccent_Earth_Orbit*cos(Sun_True_Anom_deg*pi/180)) -%}
            {% set Sun_App_Long_deg = Sun_True_Long_deg-0.00569-0.00478*sin((125.04-1934.136*JC)*pi/180) -%}
            {% set Mean_Obliq_Ecliptic_deg = 23+(26+((21.448-JC*(46.815+JC*(0.00059-JC*0.001813))))/60)/60 -%}
            {% set Obliq_Corr_deg = Mean_Obliq_Ecliptic_deg+0.00256*cos((125.04-1934.136*JC)*pi/180) -%}
            {% set Sun_Rt_Ascen_deg = (atan2(cos((Obliq_Corr_deg)*pi/180)*sin((Sun_App_Long_deg)*pi/180),cos((Sun_App_Long_deg)*pi/180)))*180/pi -%}
            {% set Sun_Declin_deg = (asin(sin((Obliq_Corr_deg)*pi/180)*sin((Sun_App_Long_deg)*pi/180)))*180/pi -%}
            {% set Var_Y = tan((Obliq_Corr_deg/2)*pi/180)*tan((Obliq_Corr_deg/2)*pi/180) -%}
            {% set Eq_of_Time_minutes = 4*180/pi*(Var_Y*sin(2*(Geom_Mean_Long_Sun_deg)*pi/180)-2*Eccent_Earth_Orbit*sin((Geom_Mean_Anom_Sun_deg)*pi/180)+4*Eccent_Earth_Orbit*Var_Y*sin((Geom_Mean_Anom_Sun_deg)*pi/180)*cos(2*(Geom_Mean_Long_Sun_deg)*pi/180)-0.5*Var_Y*Var_Y*sin(4*(Geom_Mean_Long_Sun_deg)*pi/180)-1.25*Eccent_Earth_Orbit*Eccent_Earth_Orbit*sin(2*(Geom_Mean_Anom_Sun_deg)*pi/180)) -%}
            {% set HA_Sunrise_deg = 180/pi*(acos((sin((elevation)*pi/180) - sin((latitude)*pi/180) * sin((Sun_Declin_deg)*pi/180)) / (cos((latitude)*pi/180) * cos((Sun_Declin_deg)*pi/180)))) -%}
            {% set Solar_Noon_LST = (720-4*longitude-Eq_of_Time_minutes+utc_offset*60)/1440 -%}
            {% set Sunrise_Time_LST = (Solar_Noon_LST*1440-HA_Sunrise_deg*4)/1440 -%}
            {% set Sunset_Time_LST = (Solar_Noon_LST*1440+HA_Sunrise_deg*4)/1440 -%}
            {% set Sunlight_Duration_minutes = 8*HA_Sunrise_deg -%}
            {% set True_Solar_Time_min = (0.5*1440+Eq_of_Time_minutes+4*longitude-60*utc_offset)%1440 -%}
            {% if True_Solar_Time_min/4 <0 -%}
              {% set Hour_Angle_deg = True_Solar_Time_min/4+180 -%}
            {% else -%}
              {% set Hour_Angle_deg = True_Solar_Time_min/4-180 -%}
            {% endif -%}
            {% set Sunset_time_UTC = Sunset_Time_LST*24 -%}
            {% set sunset_hour = Sunset_time_UTC | int -%}
            {% set sunset_minute = ((Sunset_time_UTC * 60) % 60) | int -%}
            {% set sunset_second = (((Sunset_time_UTC * 60 * 60) % 60) % 60) | int -%}
            {% set local_sunset_time = now().replace(hour=sunset_hour, minute=sunset_minute, second=sunset_second, microsecond=0)|as_datetime|as_local -%}
            {% set local_sunset_time2 = sunset_hour|string +':'+ sunset_minute|string  -%}
            {{local_sunset_time.isoformat() }}

    ######################################################
    # EV start time
    # Calculates the actual time to start EV based on various input_bool options
    ######################################################
    - sensor:
        - name: Octopus Will Provide Next Schedule At
          unique_id: ev_start_time
          device_class: "timestamp"
          # {% set starttime = [states('sensor.don_t_charge_ev_before_time_wobble'),states('sensor.solar_export_threshold')] | max %}
          state: >
            {% if states('input_boolean.zappi_eco_mode_override') == 'off' and states('input_boolean.solar_export_priority') == 'on' %}
              {% set starttime = states('sensor.solar_export_threshold') %}
            {% elif states('input_boolean.zappi_eco_mode_override') == 'off' and states('input_boolean.solar_export_priority') == 'off' %}
              {% set starttime = states('sensor.don_t_charge_ev_before_time_wobble') %}
            {%else %}
              {% set starttime = now() %}
            {% endif -%}
            {{starttime|as_datetime|as_local}}



    ####################################################
    # Octopus depricated the time.Intelligent Target Time
    # but it's used in an automation so this is calculated
    # from the select.Intelligent Target Time
    #####################################################
    - sensor:
        - name: Octopus Intelligent Target Time
          #unique_id: f9b1faae-64bf-454e-a907-c64a35dd626c
          unique_id: octopus_intelligent_target_time
          device_class: "timestamp"
          state: >
            {% if states('select.octopus_energy_z_ZZZZZZZZ_intelligent_target_time') != 'unknown'%}
              {% set t = today_at(states('select.octopus_energy_z_ZZZZZZZZ_intelligent_target_time').split(':')[0] + ":" + states('select.octopus_energy_z_ZZZZZZZZ_intelligent_target_time').split(':')[1])|as_datetime|as_local %}
            {%else%}
              {% set t = ((now()|as_timestamp|int-(now()|as_timestamp|int%86400)+18000)|as_datetime|as_local) %}
            {%endif%}
            {%if now()|as_timestamp > t|as_timestamp%}
              {% set x = t|as_timestamp + 86400 %}
              {{x|as_datetime|as_local}}
            {%else%}
              {{t|as_local}}
            {%endif%}
    ######################################################
    # Octopus dispatch kWh
    ######################################################
    - sensor:
        - name: "Octopus Total Planned Dispatch"
          unique_id: octopus_total_planned_dispatch
          icon: mdi:ev-station
          unit_of_measurement: "kWh"
          device_class: "energy"
          state_class: total
          state: >
            {%- set ns2 = namespace( total_dispatch = 0 ) -%}
            {%- if (state_attr('binary_sensor.octopus_energy_z_ZZZZZZZZ_intelligent_dispatching','planned_dispatches') | length > 0) -%}
              {%- for dispatch in state_attr('binary_sensor.octopus_energy_z_ZZZZZZZZ_intelligent_dispatching', 'planned_dispatches') -%}
                {%- set ns2.total_dispatch = ns2.total_dispatch|float + dispatch.charge_in_kwh|float%}
              {%- endfor -%}
            {%- endif  -%}
            {{ns2.total_dispatch|float (default=0.0)}}
          attributes:
            total_dispatches: >
              {{state_attr('binary_sensor.octopus_energy_z_ZZZZZZZZ_intelligent_dispatching','planned_dispatches')|list|count}}

    ######################################################
    # Octopus completed dispatch kWh
    ######################################################
    - sensor:
        - name: "Octopus Completed Dispatch"
          unique_id: octopus_completed_dispatch
          icon: mdi:ev-station
          unit_of_measurement: "kWh"
          device_class: "energy"
          state_class: total
          state: >
            {% set ns = namespace( total_dispatch = 0 ) %}
            {% set disconnected =(states('sensor.zappi_last_disconnected')|as_timestamp-states('sensor.zappi_last_disconnected')|as_timestamp%1800)|as_datetime +timedelta(minutes=30)%}
            {% set connected = (states('sensor.zappi_last_connected')|as_timestamp-states('sensor.zappi_last_connected')|as_timestamp%1800)|as_datetime %}
            {%- if (state_attr('binary_sensor.octopus_energy_z_ZZZZZZZZ_intelligent_dispatching','completed_dispatches') | length > 0) -%}
              {%- for dispatch in state_attr('binary_sensor.octopus_energy_z_ZZZZZZZZ_intelligent_dispatching', 'completed_dispatches') -%}
                {%- if dispatch.start|as_timestamp >= disconnected|as_timestamp -%}
                  {%- set ns.total_dispatch = ns.total_dispatch|float + dispatch.charge_in_kwh|float (default=0.0)%}
                {%- endif-%}
              {%- endfor -%}
            {%- endif  %}
            {{ns.total_dispatch|float (default=0.0)}}

    ######################################################
    # Zappi plug status avoiding unknown when cloud response is not available
    ######################################################
    - trigger:
        - trigger: state
          entity_id: sensor.myenergi_zappi_XXXXXXXX_plug_status
          not_to:
            - unavailable
            - unknown
      sensor:
        - name: Zappi Plug Status
          unique_id: cfa5b1f6-14c7-44e8-955a-a57321401378
          state: "{{states('sensor.myenergi_zappi_XXXXXXXX_plug_status')}}"
          icon: mdi:ev-plug-type2
          attributes:
            changes: >
              {% set current = this.attributes.get('changes', {}) %}
              {% set new =
                { trigger.entity_id:
                  {
                    'datetime': trigger.to_state.last_changed.isoformat(),
                    'from': trigger.from_state.state,
                    'to': trigger.to_state.state
                  }
                }
              %}
              {{ dict(current, **new) }}

    ######################################################
    # Zappi last disconnect
    ######################################################

    - trigger:
        - trigger: state
          entity_id: sensor.myenergi_zappi_XXXXXXXX_plug_status
          to:
            - EV Disconnected
          from:
            - EV Connected
      sensor:
        - name: Zappi Last Disconnected
          unique_id: 159a0089-e859-40d4-8153-e363c9642571
          state: >
            {{now()|as_datetime|as_local}}
          attributes:
            Octopus_total_charge: >
              {% set ns = namespace( total_dispatch = 0 ) %}
              {% if states('sensor.zappi_last_disconnected') in ['unknown', 'unavailable','none'] %}
                {% set disconnected = now()|as_datetime|as_local %}
              {% else %}
                {% set disconnected = states('sensor.zappi_last_disconnected') %}
              {%- endif-%}
                {%- if (state_attr('binary_sensor.octopus_energy_z_ZZZZZZZZ_intelligent_dispatching','completed_dispatches') | length > 0) -%}
                  {%- for dispatch in state_attr('binary_sensor.octopus_energy_z_ZZZZZZZZ_intelligent_dispatching', 'completed_dispatches') -%}
                    {%- if dispatch.start|as_timestamp > disconnected|as_timestamp and dispatch.start|as_timestamp < states('sensor.zappi_last_connected')|as_timestamp-%}
                      {%- set ns.total_dispatch = ns.total_dispatch|float (default=0.0) + dispatch.charge_in_kwh|float (default=0.0)%}
                    {%- endif-%}
                  {%- endfor -%}
                  {{ns.total_dispatch|float (default=0.0)}}  
                {%- endif  -%}
            

    ######################################################
    # Zappi last Connected
    ######################################################

    - trigger:
        - trigger: state
          entity_id: sensor.myenergi_zappi_XXXXXXXX_plug_status
          to:
            - EV Connected
          from:
            - EV Disconnected
      sensor:
        - name: Zappi Last Connected
          unique_id: edee5227-fd4a-498c-a4ac-fcf182ec3308
          state: >
            {{now()}}

    ######################################################
    # Generate an event if solax_rest_local_settings becomes unavailable
    ######################################################
    - trigger:
        - trigger: state
          entity_id: sensor.solax_rest_local_settings
          to: unavailable
        - trigger: state
          entity_id: sensor.solax_rest_local_settings
          to: unknown
      action:
        - event: Solax Zappi Octopus Control
          event_data:
            message: >-
              solax_rest_local_settings became unavailable @
              {{now().strftime('%H:%M')}}. 
              {{states('sensor.solax_rest_local_settings')}}
            title: Sensor Failed
            class: high

    ######################################################
    # Generate an event when theres a new dispatch
    ######################################################
    - trigger:
        - trigger: state
          entity_id: sensor.octopus_total_planned_dispatch
          from: "0"
          not_to:
            - unavailable
      action:
        - event: Solax Zappi Octopus Control
          event_data:
            message: >-
              Octopus Planned Dispatch @
              {{now().strftime('%H:%M')}}. 
              {{states('sensor.octopus_total_planned_dispatch')}}kWh.
            title: Octopus Dispatch
            class: normal

    - trigger:
        - trigger: homeassistant
          event: start
          id: "HA_START"
        - trigger: time_pattern
          minutes: /1
      sensor:
        - name: Solax Zappi Octopus Device List
          unique_id: solax_zappi_octopus_device_list
          state: "{{ now().timestamp() | timestamp_custom() }}"
          attributes:
            mobile_devices: >
              {% set ns= namespace(members=[]) %}
              {% if  integration_entities('mobile_app') | select('match','device_tracker') | map('replace', 'device_tracker.', 'mobile_app_') | list |length >0%}
                {% for item in  integration_entities('mobile_app') | select('match','device_tracker') | map('replace', 'device_tracker.', 'mobile_app_') | list %}
                  {% set ns.members = ns.members + [{"device": item}] %}
                {%- endfor -%}
              {%- endif  -%}
              {% set ns.members =  [{"device": " "}]+ns.members  %}
              {{ns.members}}
    
    - trigger: 
        - trigger: state
          entity_id: 
            - sensor.solax_zappi_octopus_device_list
          attribute: mobile_devices
        - trigger: homeassistant
          event: start
          id: "HA_START"
        - trigger: time_pattern
          minutes: /1
      action:
        - service: input_select.set_options
          target:
            entity_id: input_select.solax_automation_notification_devices
          data:
            options: >
              {{(state_attr('sensor.solax_zappi_octopus_device_list', 'mobile_devices')) | map(attribute='device') | list }}

    - trigger: 
        - trigger: state
          entity_id: input_select.solax_automation_notification_devices
        - trigger: state
          entity_id: input_button.solax_zappi_octopus_reset_device_list
      sensor:
        - name: Solax Zappi Octopus Devices to Notify
          unique_id: solax_zappi_octopus_devices_to_notify
          state: "{{ now().timestamp() | timestamp_custom() }}"
          attributes:
            mobile_devices: >
              {% if trigger.entity_id == 'input_select.solax_automation_notification_devices' %}
                {% set current = this.attributes.get('mobile_devices', []) | map(attribute='device') | list %}
                {% set current1 = this.attributes.get('mobile_devices', []) %}
                {% if states('input_select.solax_automation_notification_devices') not in current and states('input_select.solax_automation_notification_devices') != ' ' %}
                    {% set new = [{"device": states('input_select.solax_automation_notification_devices')}] %}
                    {{ new + current1 }}
                {% else %}
                    {% set old = {"device": states('input_select.solax_automation_notification_devices')} %}
                    {% set current1 = state_attr('sensor.solax_zappi_octopus_devices_to_notify', 'mobile_devices')| reject("equalto", old) |list  %}
                    {{ current1 }}
                {% endif %}
              {% else %}
                {{[{"device": " "}]}}
              {% endif %}

        # {% if states('input_select.solax_automation_notification_devices') != ' ' %}}
        #   {% set old = {"device": states('input_select.solax_automation_notification_devices')} %}
        #   {% set current1 = state_attr('sensor.solax_zappi_octopus_devices_to_notify', 'device')| reject("equalto", old) |list  %}
        # {% endif %}

    ######################################################
    ### Notification list
    ######################################################
    - trigger:
        - trigger: state
          entity_id: input_select.solax_zappi_octopus_notification_list
        - trigger: state
          entity_id: input_button.solax_zappi_octopus_reset_notification_exclusions
      sensor:
        - name: Solax Zappi Octopus Notification to Exclude
          unique_id: solax_zappi_octopus_notification_to_exclude
          state: "{{ now().timestamp() | timestamp_custom() }}"
          attributes:
            notification_list: >
              {% if trigger.entity_id == 'input_select.solax_zappi_octopus_notification_list' %}
                {% set current = this.attributes.get('notification_list', []) | map(attribute='notification') | list %}
                {% set current1 = this.attributes.get('notification_list', []) %}
                {% if states('input_select.solax_zappi_octopus_notification_list') not in current and states('input_select.solax_zappi_octopus_notification_list') != ' ' %}
                    {% set new = [{"notification": states('input_select.solax_zappi_octopus_notification_list')}] %}
                    {{ new + current1 }}
                {% else %}
                    {% set old = {"notification": states('input_select.solax_zappi_octopus_notification_list')} %}
                    {% set current1 = state_attr('sensor.solax_zappi_octopus_notification_to_exclude', 'notification_list')| reject("equalto", old) |list  %}
                    {{ current1 }}
                {% endif %}
              {% else %}
                {{[{"notification": " "}]}}
              {% endif %}
          icon: mdi:alert

    ######################################################
    # Generate tariff events and selects utility meter settings when:
    #   dispatching changes
    #   free electric sessions moved to saving sessions package
    #   between 05:30 and 23:30
    ######################################################
    - trigger:
        - trigger: time
          at: "05:30:00"
      condition:
        - condition: template
          value_template: >
            {{ now()|as_timestamp > states('sensor.octopus_intelligent_target_time')|as_timestamp and (states('sensor.sensor.zappi_plug_status' != "Charging") or states('sensor.sensor.zappi_plug_status' != "Waiting for EV"))}}
      action:
        - event: octopus_tariff
          event_data:
            tariff: "peak"
            time: >
              {{now()|as_datetime}}
        - service: select.select_option
          data:
            entity_id: select.daily_grid_import
            option: "peak"
        - service: select.select_option
          data:
            entity_id: select.monthly_grid_import
            option: "peak"

    - trigger:
        - trigger: time
          at: "23:30:00"
      action:
        - event: octopus_tariff
          event_data:
            tariff: "offpeak"
            time: >
              {{now()|as_datetime}}
        - service: select.select_option
          data:
            entity_id: select.daily_grid_import
            option: "offpeak"
        - service: select.select_option
          data:
            entity_id: select.monthly_grid_import
            option: "offpeak"
    ######################################################

    - trigger:
        - trigger: state
          entity_id: binary_sensor.octopus_energy_z_ZZZZZZZZ_intelligent_dispatching
          from: "off"
          to: "on"
      action:
        - event: octopus_tariff
          event_data:
            tariff: "offpeak"
            time: >
              {{now()|as_datetime}}
        - service: select.select_option
          data:
            entity_id: select.daily_grid_import
            option: "offpeak"
        - service: select.select_option
          data:
            entity_id: select.monthly_grid_import
            option: "offpeak"

    - trigger:
        - trigger: state
          entity_id: binary_sensor.octopus_energy_z_ZZZZZZZZ_intelligent_dispatching
          from: "on"
          to: "off"
      action:
        - event: octopus_tariff
          event_data:
            tariff: "peak"
            time: >
              {{now()|as_datetime}}
        - service: select.select_option
          data:
            entity_id: select.daily_grid_import
            option: "peak"
        - service: select.select_option
          data:
            entity_id: select.monthly_grid_import
            option: "peak"
    ######################################################

    ######################################################
    # Binary Sensor triggered by events to allow Solax discharge
    # to occur prior to getting a dispatch
    # 5001 check if input_boolean.daily_battery_export_before_ev_charge
    # is on when it's time to start charging. If it is on, 5001 selects a path to start
    # discharging and an event is fired that sets this binary_senor to on.
    # When 5002 catches the min SoC, it also confirms if this binary_sensor is on,
    # if it is then it sets it to off.
    # Setting this binary sensor from on to off is a trigger in 5001 to start charging.
    ######################################################

    - trigger:
        - trigger: event
          event_type: solax_discharge
          event_data:
            battery_discharge: "discharge before EV charge"
        - trigger: event
          event_type: solax_discharge
          event_data:
            battery_discharge: "do nothing"
      binary_sensor:
        - name: Solax Discharge Before EV Charge
          unique_id: 2e2346fe-8a52-4465-b3b4-4445fe9632a5
          state: >
            {{true if trigger.event.data.battery_discharge == "discharge before EV charge" else false}}
    
    ######################################################
    # Binary Sensor triggered by events to allow Solax discharge
    # to occur prior to 23:30
    # 5001 check if input_boolean.daily_battery_export_before_2330
    # If it is on, 5001 selects a path to start
    # discharging and an event is fired that sets this binary_senor to on.
    # When 5002 catches the min SoC, it also confirms if this binary_sensor is on,
    # if it is then it sets it to off.
    # Setting this binary sensor from on to off is a trigger in 5001 to check the settings for min soc.
    ######################################################

    - trigger:
        - trigger: event
          event_type: solax_discharge
          event_data:
            battery_discharge: "discharge before 2330"
        - trigger: event
          event_type: solax_discharge
          event_data:
            battery_discharge: "do nothing"
      binary_sensor:
        - name: Solax Discharge Before 2330
          unique_id: solax_discharge_before_2330
          state: >
            {{true if trigger.event.data.battery_discharge == "discharge before 2330" else false}}

    ######################################################
    # for when zappi cloud sensor dips out
    ######################################################
    - sensor:
      - name: Zappi Power CT Internal Load
        unique_id: zappi_power_ct_internal_load
        state: >
          {%if states('sensor.myenergi_zappi_XXXXXXXX_power_ct_internal_load') in ['unknown', 'unavailable','none'] %}
            {{states('sensor.zappi_power_ct_internal_load')}}
          {%else%}
            {{states('sensor.myenergi_zappi_XXXXXXXX_power_ct_internal_load')}}
          {%endif%}
        unit_of_measurement: "W"
        state_class: measurement
        device_class: "power"

    ######################################################
    # Currently a 20 min window to protect the system from trying to enter a force discharge
    # just before or during the chargeing window
    # Sometimes the inverter can take a while to get into force discharge mode and it may take several iterations
    # in the automations. 20 mins seems a fair window to avoid scenarios described above
    ######################################################
    - sensor:
      - name: Discharge Window Closed
        unique_id: solax_discharge_window_closed
        state: >
          {% set seconds_to_discharge = 20*60 %}
          {% if now() > today_at(states('input_datetime.solax_battery_stop_charge_time')) %}
            {{ ((today_at(states('input_datetime.solax_battery_start_charge_time'))|as_timestamp-seconds_to_discharge+86400)|as_datetime|as_local)}}
          {% else %}
            {{ ((today_at(states('input_datetime.solax_battery_start_charge_time'))|as_timestamp-seconds_to_discharge)|as_datetime|as_local)}}
          {% endif%}
        icon: mdi:clock-end
        device_class: "timestamp"
  
    ######################################################
    # Time it will take to discharge solax battery
    ######################################################
    - sensor:
      - name: Solax Seconds to Discharge
        unique_id: solax_seconds_to_discharge
        state: >
          {% set capacity_left = (states('sensor.solax_local_battery_soc')|int (default=100)- states('input_number.solax_default_discharge_limit_soc')|int (default=15)) /100 * states('input_number.solax_battery_capacity')|float (default=9.2)%}
          {% set seconds_to_discharge = (capacity_left )|float/states('input_number.solax_inverter_capacity')|float (default=5.5)*60*60 %}
          {% if states('sensor.solax_local_battery_soc')|int (default=100)- states('input_number.solax_default_discharge_limit_soc')|int (default=20) > 14 %}
            {{(seconds_to_discharge-(seconds_to_discharge%100)-300)|int (default=0)}}
          {% else %}
            {{0|int (default=0)}}
          {% endif%}
        attributes:
          prior: >
            {% set capacity_left = (states('sensor.solax_local_battery_soc')|int (default=100)- states('input_number.solax_discharge_limit_soc_before_ev')|int (default=15)) /100 * states('input_number.solax_battery_capacity')|float (default=9.2)%}
            {% set seconds_to_discharge = (capacity_left )|float/states('input_number.solax_inverter_capacity')|float (default=5.5)*60*60 %}
            {% if states('sensor.solax_local_battery_soc')|int (default=100)- states('input_number.solax_discharge_limit_soc_before_ev')|int (default=20) > 14 %}
              {{(seconds_to_discharge-(seconds_to_discharge%100)-300)|int (default=0)}}
            {% else %}
              {{0|int (default=0)}}
            {% endif%}
          daily: >
            {% set capacity_left = (states('sensor.solax_local_battery_soc')|int (default=100)- states('input_number.solax_manual_forced_discharge_limit_soc')|int (default=15)) /100 * states('input_number.solax_battery_capacity')|float (default=9.2)%}
            {% set seconds_to_discharge = (capacity_left )|float/states('input_number.solax_inverter_capacity')|float (default=5.5)*60*60 %}
            {% if states('sensor.solax_local_battery_soc')|int (default=100)- states('input_number.solax_manual_forced_discharge_limit_soc')|int (default=20) > 14 %}
              {{(seconds_to_discharge-(seconds_to_discharge%100)-300)|int (default=0)}}
            {% else %}
              {{0|int (default=0)}}
            {% endif%}
        icon: mdi:timer-marker

    ######################################################
    # Pre emptive discharge time
    ######################################################
    - trigger:
        - trigger: state
          entity_id: sensor.pre_export_battery_before_charging_ev_time_calc
          not_to:
            - unavailable
      sensor:
        - name: Pre Export Battery Before Charging EV Time
          unique_id: pre_export_battery_before_charging_ev_time
          device_class: "timestamp"
          state: >
            {{ trigger.to_state.state }}
          attributes:
            last_triggered: >-
              {{ (trigger.to_state.last_changed|as_local) }}

    - sensor:
        - name: Pre Export Battery Before Charging EV Time Calc
          unique_id: pre_export_battery_before_charging_ev_time_calc
          device_class: "timestamp"
          state: >
            {%set starttime =(today_at("23:30")|as_timestamp +86400)|as_datetime|as_local%}
            {% if states('input_boolean.zappi_eco_mode_override') == 'off' and states('input_boolean.solar_export_priority') == 'on' %}
              {% if states('input_boolean.export_battery_prior') == 'on' and states('input_boolean.pre_emptive_export_battery') == 'on' and states('sensor.solax_local_inverter_mode') != 'Manual'%}
                {% set starttime = (states('sensor.solar_export_threshold')|as_timestamp - state_attr('sensor.solax_seconds_to_discharge','prior')|int)|as_datetime|as_local %}
              {% else %}
                {% set starttime = None %} 
              {% endif %}
            {% elif states('input_boolean.zappi_eco_mode_override') == 'off' and states('input_boolean.solar_export_priority') == 'off' %}
              {% if states('input_boolean.export_battery_prior') == 'on' and states('input_boolean.pre_emptive_export_battery') == 'on' %}
                {% set starttime = (states('sensor.don_t_charge_ev_before_time_wobble')|as_timestamp - state_attr('sensor.solax_seconds_to_discharge','prior')|int)|as_datetime|as_local %}
              {% else %}
                {% set starttime = None %}
              {% endif %}
            {%else %}
              {% set starttime = None %}
            {% endif -%}

            {% if starttime != None %}
              {%if (starttime|as_timestamp-now()|as_timestamp < 180 and states('input_boolean.zappi_eco_mode_override') =='off') or states('sensor.solax_local_inverter_mode') == 'Manual'%}
                {{"unavailable"}}
              {%else%}
                {{starttime|as_datetime|as_local}} 
              {%endif%}
            {%else%}
              {{None}}
            {%endif%}

    ######################################################
    # Octopus Night Tariff Start Time
    # if pre-emptive on then discharge battery before 23:30 is reached
    ######################################################
    - trigger:
        - trigger: state
          entity_id: sensor.pre_nightly_battery_export_time_calc
          not_to:
            - unavailable
      sensor:
        - name: Pre Nightly Battery Export Time
          unique_id: pre_nightly_battery_export_time
          device_class: "timestamp"
          state: >
            {{ trigger.to_state.state }}
          attributes:
            last_triggered: >-
              {{ (trigger.to_state.last_changed|as_local) }}

    - sensor:
        - name: Pre Nightly Battery Export Time Calc
          unique_id: pre_nightly_battery_export_time_calc
          device_class: "timestamp"
          state: >
            {%set starttime =(today_at("23:30")|as_timestamp +86400)|as_datetime|as_local%}
            {% if states('input_boolean.pre_emptive_export_battery') == 'on' and states('input_boolean.export_battery') == 'on' and states('sensor.solax_local_inverter_mode') != 'Manual'%}
              {% set starttime = (today_at("23:30")|as_timestamp - state_attr('sensor.solax_seconds_to_discharge','daily')|int)|as_datetime|as_local %}
            {%elif states('input_boolean.pre_emptive_export_battery') == 'off' and states('input_boolean.export_battery') == 'on'%}
              {% set starttime = None %} 
            {%elif states('input_boolean.export_battery') == 'off'%}
              {% set starttime = None %} 
            {%endif%}

            {% if starttime != None %}
              {%if starttime|as_timestamp-now()|as_timestamp < 180 or states('sensor.solax_local_inverter_mode') == 'Manual' %}
                {{"unavailable"}}
              {%else%}
                {{starttime|as_datetime|as_local}}
              {%endif%} 
            {%else%}
              {{None}}
            {%endif%}
                        

    ######################################################
    # binary sensor to trigger discharge if EV is connected and discharge before charging ev is on
    ######################################################
    # - binary_sensor:
    #   - name: Solax Start Discharge
    #     unique_id: solax_start_discharge
    #     state: >
    #       {% if now() > (states('sensor.ev_start_time')|as_timestamp-states('sensor.solax_time_to_discharge')|int)|as_datetime|as_local and states('sensor.zappi_plug_status') == 'EV Connected' and states('input_boolean.export_battery_prior') == 'on'%}
    #         {{true}}
    #       {% elif now() > states('sensor.ev_start_time')|as_datetime%}
    #         {{false}}
    #       {% else %}
    #         {{false}}
    #       {% endif %}
    #     icon: mdi:clock-star-four-points-outline

