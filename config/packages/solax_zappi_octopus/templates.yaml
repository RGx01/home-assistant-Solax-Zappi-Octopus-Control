###############################################
# Replace octopus account number z_ZZZZZZZZ with your own
#
# Change log
# v5.4.1 Fixed Dump Power to include house load
#        Added Manual discharge missing binary_sensor used in 5002
# v5.4.0 Added Daily Discharge
#        Added supporting event triggers to support battery exports
# v5.3.0 Renamed Solax Local Battery Remaining Energy
#        Fixed bug with solax_local_battery_in_from_solar sensor 
# v5.1.0 Moved some sensors from solax_realtime and solax_cotrol to here as they didn't belong where they were
# V5.0.1 Minor update to prevent a potential under charge of EV if plugged in later than the export time
#        Added a user configurable Export Margin for when pre emptive discharges under estimate
# V5.0.  Refactor
# v4.0.  Predicted production using Solcast
#        Added a Battery SoH sensor to help discharge pridictions
#        Added a predicted Shcedule start time based on EV battery size
# v3.7   Pre-emptive discharge options
# v3.6   Dynamic Discharge Window Close time based on how long it would take to discharge - Abandonded for now
# v3.5   Discharge Window Close time
# v3.2   Replace zappi cloud sensor with zappi_power_ct_internal_load to avoid drop outs
# v3.1   Better Notification Management
#        Added system on off functionality
#        Added new sensor to check PV string power difference
# v3.0.0 Event based trigger for solax discharge to handle discharging before an EV Charge
#        Zappi last disconnect sensor - added a from condition
# v2.1.4 Updated ev_start_time logic.
# v2.1.3 moved the free elecreic tarriff template to octopus saving sessions package
# v2.1.1 fixed template bug with tariff select
# v2.1 Added template triggers for tariffs
# v2.0 Added mobile notifications
###############################################
solax_zappi_octopus_templates:
  template:
    - sensor:
        - name: "Solax Local House Load Power"
          unique_id: solax_local_house_load_power
          # if your solax system can see load from zappi then set solax_can_see_zappi_load =1 elso set it to 0
          state: >
            {% set solax_can_see_zappi_load = states('input_boolean.solax_can_see_zappi_loads') %}
            {% set zappi_raw = states('sensor.zappi_power_ct_internal_load') %}
            {% set grid_raw = states('sensor.zappi_power_ct_grid_load') %}
            {% set feedin_raw = states('sensor.solax_local_feedin_power') %}
            {% set inv_raw = states('sensor.solax_local_inverter_power') %}

            {# ---- Safely convert to numbers ---- #}
            {% set zappi = zappi_raw if zappi_raw not in ['unavailable','unknown','None', none, ''] else 0 %}
            {% set grid = grid_raw if grid_raw not in ['unavailable','unknown','None', none, ''] else 0 %}
            {% set feedin = feedin_raw if feedin_raw not in ['unavailable','unknown','None', none, ''] else 0 %}
            {% set inv = inv_raw if inv_raw not in ['unavailable','unknown','None', none, ''] else 0 %}

            {% set zappi_load_fiddle = 0 %}
            {% if zappi | int != 0 %}
                {% set zappi_load_fiddle = (zappi | float) - ((grid | float) + (feedin | float)) %}
            {% endif %}

            {% if solax_can_see_zappi_load == 'on' %}
                {{ (inv | float) - (feedin | float) - (zappi_load_fiddle | float) }}
            {% else %}
                {{ (inv | float) - (feedin | float) }}
            {% endif %}
          unit_of_measurement: "W"
          device_class: "power"
          state_class: measurement
    ######################################################
    # Hours of charge required
    ######################################################    
    - sensor:
      - name:  Calculated EV Charge Start Time
        unique_id: calculated_ev_charge_start_time
        device_class: "timestamp"
        icon: mdi:clock-alert
        state: >
          {% set td = timedelta(days=10) %}
          {% set target_time = states('sensor.octopus_intelligent_target_time') %}
          {% set battery_size = states('input_number.ev_battery_size')|float(0) %}
          {% set charge_pct = states('number.octopus_energy_z_ZZZZZZZZ_intelligent_charge_target')|int(100) %}
          {% set seconds = (charge_pct/100 * battery_size / 6.8 * 3600) | int %}
          {% set start = target_time | as_timestamp | int - seconds if target_time not in ['unknown','unavailable',''] else none %}
          {% set eleventhirty = (target_time | as_datetime if target_time not in ['unknown','unavailable',''] else now()).date() | as_timestamp - 1800 %}
          {% if start is not none %}
            {% set dt = (start if start < eleventhirty else eleventhirty) | as_datetime |as_local%}
          {% else %}
            {% set dt = none %}
          {% endif %}
          {{ dt.isoformat() if dt else (now() + td).isoformat() }}

    ######################################################
    # Wobble
    ######################################################
    - trigger:
        - trigger: time
          at: "01:00:00"
      sensor:
        - name: "Wobble"
          unique_id: wobble
          state: >
            {{range(1, 16)|random}}

    ######################################################
    # EV Start Time + Wobble
    ######################################################
    - sensor:
        - name: Don't Charge EV before time (wobble)
          unique_id: don_t_charge_ev_before_time_wobble
          device_class: "timestamp"
          state: >
            {% set td = timedelta(days=10) %}
            {% set wobble = states('sensor.wobble')|int(0) %}
            {% set wobble = 0 %}
            {% set input_time = states('input_datetime.don_t_charge_ev_before_time') %}
            {% set base = now() %}
            {% if input_time not in ['unknown','unavailable',''] %}
              {% set base = today_at(input_time) %}
            {% endif %}
            {% set ts = base | as_timestamp + wobble*60 %}
            {% set dt = ts | as_datetime %}
            {{ dt.isoformat() if dt else (now() + td).isoformat() }}
    ######################################################
    # Earliest EV Start Time
    ######################################################
    - sensor:
        - name: Earliest EV Charge Start Time
          unique_id: earliest_ev_charge_start_time
          device_class: "timestamp"
          state: >
            {%set target_time = states('sensor.octopus_intelligent_target_time')|as_timestamp (default=today_at("05:30")|as_timestamp)%}
            {%set target_percentage = states('number.octopus_energy_z_ZZZZZZZZ_intelligent_charge_target')%}
            {%set ev_size = states('input_number.ev_battery_size')|int(default=10) %}
            {%set delta_time = ((ev_size|int/6.8)*(target_percentage|int/100))*60*60%}
            {{(target_time-delta_time)|as_datetime (default=(now()|as_timestamp-delta_time)|as_datetime)}}
    ######################################################
    # Solar threshold calcs
    # elevation - is degrees the sun is above the horizon
    ######################################################
    - sensor:
        - name: Solar Export Threshold
          unique_id: solar_export_threshold
          device_class: "timestamp"
          icon: mdi:weather-sunset-down
          state: >
            {% set utc_offset = now().utcoffset().total_seconds() / 3600 %}
            {% set year = now().year -%}
            {% set month = now().month -%}
            {% set day = now().day -%}
            {% set longitude = state_attr('zone.home','longitude')|float -%}
            {% set latitude = state_attr('zone.home','latitude')|float -%}
            {% set elevation = states('input_number.sun_degrees_above_horizon')|float -%}
            {% set JD = (367 * year) - ((7 * (year + ((month + 9) // 12))) // 4) + ((275 * month) // 9) + day + 1721014 -%}
            {% set JC = (JD - 2451545) / 36525 %}
            {% set Geom_Mean_Long_Sun_deg = (280.46646+JC*(36000.76983+JC*0.0003032)) %360 -%}
            {% set Geom_Mean_Anom_Sun_deg = 357.52911+JC*(35999.05029-0.0001537*JC) -%}
            {% set Eccent_Earth_Orbit= 0.016708634-JC*(0.000042037+0.0000001267*JC) -%}
            {% set Sun_Eq_of_Ctr = sin(Geom_Mean_Anom_Sun_deg*pi/180)*(1.914602-JC*(0.004817+0.000014*JC))+sin(2*Geom_Mean_Anom_Sun_deg*pi/180)*(0.019993-0.000101*JC)+sin(3*Geom_Mean_Anom_Sun_deg*pi/180)*0.000289 -%}
            {% set Sun_True_Long_deg = Geom_Mean_Long_Sun_deg + Sun_Eq_of_Ctr -%}
            {% set Sun_True_Anom_deg = Geom_Mean_Anom_Sun_deg + Sun_Eq_of_Ctr -%}
            {% set Sun_Rad_Vector_AUs = (1.000001018*(1-Eccent_Earth_Orbit*Eccent_Earth_Orbit))/(1+Eccent_Earth_Orbit*cos(Sun_True_Anom_deg*pi/180)) -%}
            {% set Sun_App_Long_deg = Sun_True_Long_deg-0.00569-0.00478*sin((125.04-1934.136*JC)*pi/180) -%}
            {% set Mean_Obliq_Ecliptic_deg = 23+(26+((21.448-JC*(46.815+JC*(0.00059-JC*0.001813))))/60)/60 -%}
            {% set Obliq_Corr_deg = Mean_Obliq_Ecliptic_deg+0.00256*cos((125.04-1934.136*JC)*pi/180) -%}
            {% set Sun_Rt_Ascen_deg = (atan2(cos((Obliq_Corr_deg)*pi/180)*sin((Sun_App_Long_deg)*pi/180),cos((Sun_App_Long_deg)*pi/180)))*180/pi -%}
            {% set Sun_Declin_deg = (asin(sin((Obliq_Corr_deg)*pi/180)*sin((Sun_App_Long_deg)*pi/180)))*180/pi -%}
            {% set Var_Y = tan((Obliq_Corr_deg/2)*pi/180)*tan((Obliq_Corr_deg/2)*pi/180) -%}
            {% set Eq_of_Time_minutes = 4*180/pi*(Var_Y*sin(2*(Geom_Mean_Long_Sun_deg)*pi/180)-2*Eccent_Earth_Orbit*sin((Geom_Mean_Anom_Sun_deg)*pi/180)+4*Eccent_Earth_Orbit*Var_Y*sin((Geom_Mean_Anom_Sun_deg)*pi/180)*cos(2*(Geom_Mean_Long_Sun_deg)*pi/180)-0.5*Var_Y*Var_Y*sin(4*(Geom_Mean_Long_Sun_deg)*pi/180)-1.25*Eccent_Earth_Orbit*Eccent_Earth_Orbit*sin(2*(Geom_Mean_Anom_Sun_deg)*pi/180)) -%}
            {% set HA_Sunrise_deg = 180/pi*(acos((sin((elevation)*pi/180) - sin((latitude)*pi/180) * sin((Sun_Declin_deg)*pi/180)) / (cos((latitude)*pi/180) * cos((Sun_Declin_deg)*pi/180)))) -%}
            {% set Solar_Noon_LST = (720-4*longitude-Eq_of_Time_minutes+utc_offset*60)/1440 -%}
            {% set Sunrise_Time_LST = (Solar_Noon_LST*1440-HA_Sunrise_deg*4)/1440 -%}
            {% set Sunset_Time_LST = (Solar_Noon_LST*1440+HA_Sunrise_deg*4)/1440 -%}
            {% set Sunlight_Duration_minutes = 8*HA_Sunrise_deg -%}
            {% set True_Solar_Time_min = (0.5*1440+Eq_of_Time_minutes+4*longitude-60*utc_offset)%1440 -%}
            {% if True_Solar_Time_min/4 <0 -%}
              {% set Hour_Angle_deg = True_Solar_Time_min/4+180 -%}
            {% else -%}
              {% set Hour_Angle_deg = True_Solar_Time_min/4-180 -%}
            {% endif -%}
            {% set Sunset_time_UTC = Sunset_Time_LST*24 -%}
            {% set sunset_hour = Sunset_time_UTC | int -%}
            {% set sunset_minute = ((Sunset_time_UTC * 60) % 60) | int -%}
            {% set sunset_second = (((Sunset_time_UTC * 60 * 60) % 60) % 60) | int -%}
            {% set local_sunset_time = now().replace(hour=sunset_hour, minute=sunset_minute, second=sunset_second, microsecond=0)|as_datetime|as_local -%}
            {% set local_sunset_time2 = sunset_hour|string +':'+ sunset_minute|string  -%}
            {{ local_sunset_time.isoformat() if local_sunset_time else (now() + timedelta(days=10)) | as_local | isoformat }}
            
    - sensor:
        - name: "EV Start Time"
          unique_id: ev_start_time
          device_class: timestamp
          state: >
            {% set solar   = states('sensor.solar_export_threshold') %}
            {% set wobble  = states('sensor.don_t_charge_ev_before_time_wobble') %}
            {% set clever  = states('sensor.calculated_ev_charge_start_time') %}
            {% set anyt    = is_state('input_boolean.octopus_schedule_anytime', 'on') %}
            {% set solar_p = is_state('input_boolean.solar_export_priority', 'on') %}
            {% set clever_p= is_state('input_boolean.use_clever_time', 'on') %}

            {% if not anyt and solar_p and not clever_p and solar not in ['unknown','unavailable','none'] %}
              {{ solar | as_datetime | as_local }}
            {% elif not anyt and not solar_p and not clever_p and wobble not in ['unknown','unavailable','none'] %}
              {{ wobble | as_datetime | as_local }}
            {% elif not anyt and not solar_p and clever_p and clever not in ['unknown','unavailable','none'] %}
              {{ clever | as_datetime | as_local }}
            {% else %}
              {{ (now() + timedelta(days=10)) | as_local }}
            {% endif %}
          availability: >
            {{ solar not in ['unknown','unavailable','none']
              or wobble not in ['unknown','unavailable','none']
              or clever not in ['unknown','unavailable','none'] }}

    ####################################################
    # Octopus depricated the time.Intelligent Target Time
    # but it's used in an automation so this is calculated
    # from the select.Intelligent Target Time
    #####################################################
    - sensor:
        - name: Octopus Intelligent Target Time
          #unique_id: f9b1faae-64bf-454e-a907-c64a35dd626c
          unique_id: octopus_intelligent_target_time
          device_class: "timestamp"
          state: >
            {% if states('select.octopus_energy_z_ZZZZZZZZ_intelligent_target_time') != 'unknown'%}
              {% set t = today_at(states('select.octopus_energy_z_ZZZZZZZZ_intelligent_target_time').split(':')[0] + ":" + states('select.octopus_energy_z_ZZZZZZZZ_intelligent_target_time').split(':')[1])|as_datetime|as_local %}
            {%else%}
              {% set t = ((now()|as_timestamp|int-(now()|as_timestamp|int%86400)+18000)|as_datetime|as_local) %}
            {%endif%}
            {%if now()|as_timestamp > t|as_timestamp+180%}
              {% set x = t|as_timestamp + 86400 %}
              {{x|as_datetime|as_local}}
            {%else%}
              {{t|as_local}}
            {%endif%}
    ######################################################
    # Octopus dispatch kWh
    ######################################################
    - sensor:
        - name: "Octopus Total Planned Dispatch"
          unique_id: octopus_total_planned_dispatch
          icon: mdi:ev-station
          unit_of_measurement: "kWh"
          device_class: "energy"
          state_class: total
          state: >
            {%- set ns2 = namespace( total_dispatch = 0 ) -%}
            {%- if (state_attr('binary_sensor.octopus_energy_z_ZZZZZZZZ_intelligent_dispatching','planned_dispatches') | length > 0 and state_attr('binary_sensor.octopus_energy_z_ZZZZZZZZ_intelligent_dispatching','planned_dispatches') != None) -%}               
              {%- for dispatch in state_attr('binary_sensor.octopus_energy_z_ZZZZZZZZ_intelligent_dispatching', 'planned_dispatches') -%}
                  {%- set ns2.total_dispatch = ns2.total_dispatch|float + ((dispatch.end|as_timestamp - dispatch.start|as_timestamp)|int/60/60*7.0) %}
              {%- endfor -%}
            {%- endif  -%}
            {{ns2.total_dispatch|float (default=0.0)}}
          attributes:
            total_dispatches: >
              {%- if (state_attr('binary_sensor.octopus_energy_z_ZZZZZZZZ_intelligent_dispatching','planned_dispatches') | length > 0 and state_attr('binary_sensor.octopus_energy_z_ZZZZZZZZ_intelligent_dispatching','planned_dispatches') != None) -%}
                {{state_attr('binary_sensor.octopus_energy_z_ZZZZZZZZ_intelligent_dispatching','planned_dispatches')|list|count}}
              {%- else -%}
                {{0}}
              {%- endif  %}
            dispatches: >
              {% set ns3= namespace(members=[]) %}
              {%- if (state_attr('binary_sensor.octopus_energy_z_ZZZZZZZZ_intelligent_dispatching','planned_dispatches') | length > 0 and state_attr('binary_sensor.octopus_energy_z_ZZZZZZZZ_intelligent_dispatching','planned_dispatches') != None) -%}
                {% for dispatch in state_attr('binary_sensor.octopus_energy_z_ZZZZZZZZ_intelligent_dispatching', 'planned_dispatches') -%}
                  {% set ns3.members = ns3.members + [{ "dispatch":(dispatch.start|as_datetime|as_local).strftime('%H:%M') + " to " + (dispatch.end | as_datetime | as_local).strftime('%H:%M') }] %}
                {%- endfor -%}
                {{ns3.members}}
              {%- else -%}
                {{None}}
              {%- endif  %}

    ######################################################
    # Octopus dispatch kWh
    ######################################################
    # - sensor:
    #     - name: "Octopus Total Planned Dispatch"
    #       unique_id: octopus_total_planned_dispatch
    #       icon: mdi:ev-station
    #       unit_of_measurement: "kWh"
    #       device_class: "energy"
    #       state_class: total
    #       state: >
    #         {%- set ns2 = namespace( total_dispatch = 0 ) -%}
    #         {%- if (state_attr('binary_sensor.octopus_energy_z_ZZZZZZZZ_intelligent_dispatching','planned_dispatches') | length > 0 and state_attr('binary_sensor.octopus_energy_z_ZZZZZZZZ_intelligent_dispatching','planned_dispatches') != None) -%}
    #           {%- for dispatch in state_attr('binary_sensor.octopus_energy_z_ZZZZZZZZ_intelligent_dispatching', 'planned_dispatches') -%}
    #             {%- set ns2.total_dispatch = ns2.total_dispatch|float + dispatch.charge_in_kwh|float%}
    #           {%- endfor -%}
    #         {%- endif  -%}
    #         {{ns2.total_dispatch|float (default=0.0)}}
    #       attributes:
    #         total_dispatches: >
    #           {%- if (state_attr('binary_sensor.octopus_energy_z_ZZZZZZZZ_intelligent_dispatching','planned_dispatches') | length > 0 and state_attr('binary_sensor.octopus_energy_z_ZZZZZZZZ_intelligent_dispatching','planned_dispatches') != None) -%}
    #             {{state_attr('binary_sensor.octopus_energy_z_ZZZZZZZZ_intelligent_dispatching','planned_dispatches')|list|count}}
    #           {%- else -%}
    #             {{0}}
    #           {%- endif  %}
    #         dispatches: >
    #           {% set ns3= namespace(members=[]) %}
    #           {%- if (state_attr('binary_sensor.octopus_energy_z_ZZZZZZZZ_intelligent_dispatching','planned_dispatches') | length > 0 and state_attr('binary_sensor.octopus_energy_z_ZZZZZZZZ_intelligent_dispatching','planned_dispatches') != None) -%}
    #             {% for dispatch in state_attr('binary_sensor.octopus_energy_z_ZZZZZZZZ_intelligent_dispatching', 'planned_dispatches') -%}
    #               {% set ns3.members = ns3.members + [{ "dispatch":(dispatch.start|as_datetime|as_local).strftime('%H:%M') + " to " + (dispatch.end | as_datetime | as_local).strftime('%H:%M') }] %}
    #             {%- endfor -%}
    #             {{ns3.members}}
    #           {%- else -%}
    #             {{None}}
    #           {%- endif  %}

    ######################################################
    # Octopus completed dispatch kWh
    ######################################################
    - sensor:
        - name: "Octopus Completed Dispatch"
          unique_id: octopus_completed_dispatch
          icon: mdi:ev-station
          unit_of_measurement: "kWh"
          device_class: "energy"
          state_class: total
          state: >
            {% set ns = namespace(total_dispatch=0) %}

            {# Safely get timestamps, default to 0 if unavailable #}
            {% set zappi_disconnected_ts = states('sensor.zappi_last_disconnected') | as_timestamp(default=0) %}
            {% set zappi_connected_ts = states('sensor.zappi_last_connected') | as_timestamp(default=0) %}

            {# Calculate adjusted times safely #}
            {% set disconnected = (zappi_disconnected_ts - (zappi_disconnected_ts % 1800)) + (30 * 60) %}
            {% set connected = zappi_connected_ts - (zappi_connected_ts % 1800) %}

            {# Sum the charge from completed dispatches if any #}
            {% set completed_dispatches = state_attr('binary_sensor.octopus_energy_z_ZZZZZZZZ_intelligent_dispatching', 'completed_dispatches') %}
            {% if completed_dispatches is not none and completed_dispatches | length > 0 %}
              {% for dispatch in completed_dispatches %}
                {% set dispatch_start = dispatch.start | as_timestamp(default=0) %}
                {% if dispatch_start >= disconnected %}
                  {% set ns.total_dispatch = ns.total_dispatch + (dispatch.charge_in_kwh | float(0.0)) %}
                {% endif %}
              {% endfor %}
            {% endif %}

            {{ ns.total_dispatch | float(0.0) }}

              
    ######################################################
    # Zappi last disconnect
    ######################################################

    - trigger:
        - trigger: state
          entity_id: sensor.zappi_plug_status
          to:
            - EV Disconnected
          from:
            - EV Connected
      sensor:
        - name: Zappi Last Disconnected
          unique_id: zappi_last_disconnected
          state: >
            {{now()|as_datetime|as_local}}
          attributes:
            Octopus_total_charge: >
              {% set ns = namespace( total_dispatch = 0 ) %}
              {% if states('sensor.zappi_last_disconnected') in ['unknown', 'unavailable','none'] %}
                {% set disconnected = now()|as_datetime|as_local %}
              {% else %}
                {% set disconnected = states('sensor.zappi_last_disconnected') %}
              {%- endif-%}
              {%- if (state_attr('binary_sensor.octopus_energy_z_ZZZZZZZZ_intelligent_dispatching','completed_dispatches') | length > 0) -%}
                {%- for dispatch in state_attr('binary_sensor.octopus_energy_z_ZZZZZZZZ_intelligent_dispatching', 'completed_dispatches') -%}
                  {%- if dispatch.start|as_timestamp > disconnected|as_timestamp and dispatch.start|as_timestamp < states('sensor.zappi_last_connected')|as_timestamp-%}
                    {%- set ns.total_dispatch = ns.total_dispatch|float (default=0.0) + dispatch.charge_in_kwh|float (default=0.0)%}
                  {%- endif-%}
                {%- endfor -%}
                {{ns.total_dispatch|float (default=0.0)}}  
              {%- endif  -%}
          

    ######################################################
    # Zappi last Connected
    ######################################################

    - trigger:
        - trigger: state
          entity_id: sensor.zappi_plug_status
          to:
            - EV Connected
          from:
            - EV Disconnected
      sensor:
        - name: Zappi Last Connected
          unique_id: zappi_last_connected
          state: >
            {{now()}}

    ######################################################
    # Generate an event if solax_rest_local_settings becomes unavailable
    ######################################################
    - trigger:
        - trigger: state
          entity_id: sensor.solax_rest_local_settings
          to: unavailable
        - trigger: state
          entity_id: sensor.solax_rest_local_settings
          to: unknown
      action:
        - event: Solax Zappi Octopus Control
          event_data:
            message: >-
              solax_rest_local_settings became unavailable @
              {{now().strftime('%H:%M')}}. 
              {{states('sensor.solax_rest_local_settings')}}
            title: Sensor Failed
            class: high

    ######################################################
    # Generate an event when theres a new dispatch
    ######################################################
    - trigger:
        - trigger: state
          entity_id: sensor.octopus_total_planned_dispatch
          from: "0"
          not_to:
            - unavailable
      action:
        - event: Solax Zappi Octopus Control
          event_data:
            message: >-
              Octopus Planned Dispatch @
              {{now().strftime('%H:%M')}}. 
              {{states('sensor.octopus_total_planned_dispatch')}}kWh.
            title: Octopus Dispatch
            class: normal

    - trigger:
        - trigger: homeassistant
          event: start
          id: "HA_START"
        - trigger: time_pattern
          minutes: /1
      sensor:
        - name: Solax Zappi Octopus Device List
          unique_id: solax_zappi_octopus_device_list
          state: "{{ now().timestamp() | timestamp_custom() }}"
          attributes:
            mobile_devices: >
              {% set ns= namespace(members=[]) %}
              {% if  integration_entities('mobile_app') | select('match','device_tracker') | map('replace', 'device_tracker.', 'mobile_app_') | list |length >0%}
                {% for item in  integration_entities('mobile_app') | select('match','device_tracker') | map('replace', 'device_tracker.', 'mobile_app_') | list %}
                  {% set ns.members = ns.members + [{"device": item}] %}
                {%- endfor -%}
              {%- endif  -%}
              {% set ns.members =  [{"device": " "}]+ns.members  %}
              {{ns.members}}
    
    - trigger: 
        - trigger: state
          entity_id: 
            - sensor.solax_zappi_octopus_device_list
          attribute: mobile_devices
        - trigger: homeassistant
          event: start
          id: "HA_START"
        - trigger: time_pattern
          minutes: /1
      action:
        - service: input_select.set_options
          target:
            entity_id: input_select.solax_automation_notification_devices
          data:
            options: >
              {% set opts = (state_attr('sensor.solax_zappi_octopus_device_list', 'mobile_devices')) | map(attribute='device') | list %}
              {{ opts if opts else ['Default'] }}

    - trigger: 
        - trigger: state
          entity_id: input_select.solax_automation_notification_devices
        - trigger: state
          entity_id: input_button.solax_zappi_octopus_reset_device_list
      sensor:
        - name: Solax Zappi Octopus Devices to Notify
          unique_id: solax_zappi_octopus_devices_to_notify
          state: "{{ now().timestamp() | timestamp_custom() }}"
          attributes:
            mobile_devices: >
              {% if trigger.entity_id == 'input_select.solax_automation_notification_devices' %}
                {% set current = this.attributes.get('mobile_devices', []) | map(attribute='device') | list %}
                {% set current1 = this.attributes.get('mobile_devices', []) %}
                {% if states('input_select.solax_automation_notification_devices') not in current and states('input_select.solax_automation_notification_devices') != ' ' %}
                    {% set new = [{"device": states('input_select.solax_automation_notification_devices')}] %}
                    {{ new + current1 }}
                {% else %}
                    {% set old = {"device": states('input_select.solax_automation_notification_devices')} %}
                    {% set current1 = state_attr('sensor.solax_zappi_octopus_devices_to_notify', 'mobile_devices')| reject("equalto", old) |list  %}
                    {{ current1 }}
                {% endif %}
              {% else %}
                {{[{"device": " "}]}}
              {% endif %}

    ######################################################
    ### Notification list
    ######################################################
    - trigger:
        - trigger: state
          entity_id: input_select.solax_zappi_octopus_notification_list
        - trigger: state
          entity_id: input_button.solax_zappi_octopus_reset_notification_exclusions
      sensor:
        - name: Solax Zappi Octopus Notification to Exclude
          unique_id: solax_zappi_octopus_notification_to_exclude
          state: "{{ now().timestamp() | timestamp_custom() }}"
          attributes:
            notification_list: >
              {% if trigger.entity_id == 'input_select.solax_zappi_octopus_notification_list' %}
                {% set current = this.attributes.get('notification_list', []) | map(attribute='notification') | list %}
                {% set current1 = this.attributes.get('notification_list', []) %}
                {% if states('input_select.solax_zappi_octopus_notification_list') not in current and states('input_select.solax_zappi_octopus_notification_list') != ' ' %}
                    {% set new = [{"notification": states('input_select.solax_zappi_octopus_notification_list')}] %}
                    {{ new + current1 }}
                {% else %}
                    {% set old = {"notification": states('input_select.solax_zappi_octopus_notification_list')} %}
                    {% set current1 = state_attr('sensor.solax_zappi_octopus_notification_to_exclude', 'notification_list')| reject("equalto", old) |list  %}
                    {{ current1 }}
                {% endif %}
              {% else %}
                {{[{"notification": " "}]}}
              {% endif %}
          icon: mdi:alert

    ######################################################
    # Generate tariff events and selects utility meter settings when:
    #   dispatching changes
    #   free electric sessions moved to saving sessions package
    #   between 05:30 and 23:30
    ######################################################
    - trigger:
        - trigger: time
          at: "05:30:00"
      condition:
        - condition: template
          value_template: >
            {{ now()|as_timestamp > states('sensor.octopus_intelligent_target_time')|as_timestamp and (states('sensor.zappi_plug_status' != "Charging") or states('sensor.zappi_plug_status' != "Waiting for EV"))}}
      action:
        - event: octopus_tariff
          event_data:
            tariff: "peak"
            time: >
              {{now()|as_datetime}}
        - service: select.select_option
          data:
            entity_id: select.daily_grid_import
            option: "peak"
        - service: select.select_option
          data:
            entity_id: select.monthly_grid_import
            option: "peak"

    - trigger:
        - trigger: time
          at: "23:30:00"
      action:
        - event: octopus_tariff
          event_data:
            tariff: "offpeak"
            time: >
              {{now()|as_datetime}}
        - service: select.select_option
          data:
            entity_id: select.daily_grid_import
            option: "offpeak"
        - service: select.select_option
          data:
            entity_id: select.monthly_grid_import
            option: "offpeak"
    ######################################################

    - trigger:
        - trigger: state
          entity_id: binary_sensor.octopus_energy_z_ZZZZZZZZ_intelligent_dispatching
          from: "off"
          to: "on"
      action:
        - event: octopus_tariff
          event_data:
            tariff: >
              {{ 'free' if states.binary_sensor.free_electricity_today is not none
                        and state_attr('binary_sensor.free_electricity_today','session_start') is not none
                        and state_attr('binary_sensor.free_electricity_today','session_end') is not none
                        and now()|as_timestamp >= (state_attr('binary_sensor.free_electricity_today','session_start')|as_timestamp - 120)
                        and now()|as_timestamp <= (state_attr('binary_sensor.free_electricity_today','session_end')|as_timestamp)
                else 'offpeak' }}
            time: >
              {{now()|as_datetime}}
        - service: select.select_option
          data:
            entity_id: select.daily_grid_import
            option: >
              {{ 'free' if states.binary_sensor.free_electricity_today is not none
                        and state_attr('binary_sensor.free_electricity_today','session_start') is not none
                        and state_attr('binary_sensor.free_electricity_today','session_end') is not none
                        and now()|as_timestamp >= (state_attr('binary_sensor.free_electricity_today','session_start')|as_timestamp - 120)
                        and now()|as_timestamp <= (state_attr('binary_sensor.free_electricity_today','session_end')|as_timestamp)
                else 'offpeak' }}
        - service: select.select_option
          data:
            entity_id: select.monthly_grid_import
            option: >
              {{ 'free' if states.binary_sensor.free_electricity_today is not none
                        and state_attr('binary_sensor.free_electricity_today','session_start') is not none
                        and state_attr('binary_sensor.free_electricity_today','session_end') is not none
                        and now()|as_timestamp >= (state_attr('binary_sensor.free_electricity_today','session_start')|as_timestamp - 120)
                        and now()|as_timestamp <= (state_attr('binary_sensor.free_electricity_today','session_end')|as_timestamp)
                else 'offpeak' }}


    - trigger:
        - trigger: state
          entity_id: binary_sensor.octopus_energy_z_ZZZZZZZZ_intelligent_dispatching
          from: "on"
          to: "off"
      action:
        - event: octopus_tariff
          event_data:
            tariff: >
              {{ 'free' if states.binary_sensor.free_electricity_today is not none
                        and state_attr('binary_sensor.free_electricity_today','session_start') is not none
                        and state_attr('binary_sensor.free_electricity_today','session_end') is not none
                        and now()|as_timestamp >= (state_attr('binary_sensor.free_electricity_today','session_start')|as_timestamp - 120)
                        and now()|as_timestamp <= (state_attr('binary_sensor.free_electricity_today','session_end')|as_timestamp)
                else 'peak' }}
            time: >
              {{now()|as_datetime}}
        - service: select.select_option
          data:
            entity_id: select.daily_grid_import
            option: >
              {{ 'free' if states.binary_sensor.free_electricity_today is not none
                        and state_attr('binary_sensor.free_electricity_today','session_start') is not none
                        and state_attr('binary_sensor.free_electricity_today','session_end') is not none
                        and now()|as_timestamp >= (state_attr('binary_sensor.free_electricity_today','session_start')|as_timestamp - 120)
                        and now()|as_timestamp <= (state_attr('binary_sensor.free_electricity_today','session_end')|as_timestamp)
                else 'peak' }}
        - service: select.select_option
          data:
            entity_id: select.monthly_grid_import
            option: >
              {{ 'free' if states.binary_sensor.free_electricity_today is not none
                        and state_attr('binary_sensor.free_electricity_today','session_start') is not none
                        and state_attr('binary_sensor.free_electricity_today','session_end') is not none
                        and now()|as_timestamp >= (state_attr('binary_sensor.free_electricity_today','session_start')|as_timestamp - 120)
                        and now()|as_timestamp <= (state_attr('binary_sensor.free_electricity_today','session_end')|as_timestamp)
                else 'peak' }}
    ######################################################

    ######################################################
    # Binary Sensor triggered by events to allow Solax discharge
    # to occur prior to getting a dispatch
    # 5001 check if input_boolean.daily_battery_export_before_ev_charge
    # is on when it's time to start charging. If it is on, 5001 selects a path to start
    # discharging and an event is fired that sets this binary_senor to on.
    # When 5002 catches the min SoC, it also confirms if this binary_sensor is on,
    # if it is then it sets it to off.
    # Setting this binary sensor from on to off is a trigger in 5001 to start charging.
    ######################################################

    - trigger:
        - trigger: event
          event_type: solax_discharge
          event_data:
            battery_discharge: "discharge before EV charge"
        - trigger: event
          event_type: solax_discharge
          event_data:
            battery_discharge: "do nothing"
      binary_sensor:
        - name: Solax Discharge Before EV Charge
          unique_id: solax_discharge_before_ev_charge
          state: >
            {{true if trigger.event.data.battery_discharge == "discharge before EV charge" else false}}

    ######################################################
    # Binary Sensor triggered by events to allow Solax discharge
    # to occur daily
    # 5001 triggers
    # 5002 catches the min SoC, it also confirms if this binary_sensor is on,
    # if it is then it sets it to off.
    ######################################################
    - trigger:
        - trigger: event
          event_type: solax_discharge
          event_data:
            battery_discharge: "discharge daily"
        - trigger: event
          event_type: solax_discharge
          event_data:
            battery_discharge: "do nothing"
      binary_sensor:
        - name: Solax Discharge Daily
          unique_id: solax_discharge_daily
          state: >
            {{true if trigger.event.data.battery_discharge == "discharge daily" else false}}

    ######################################################
    # Binary Sensor triggered by events to allow Solax discharge
    # to occur prior to 23:30
    # 5001 check if input_boolean.daily_battery_export_before_2330
    # If it is on, 5001 selects a path to start
    # discharging and an event is fired that sets this binary_senor to on.
    # When 5002 catches the min SoC, it also confirms if this binary_sensor is on,
    # if it is then it sets it to off.
    # Setting this binary sensor from on to off is a trigger in 5001 to check the settings for min soc.
    ######################################################

    - trigger:
        - trigger: event
          event_type: solax_discharge
          event_data:
            battery_discharge: "discharge before 2330"
        - trigger: event
          event_type: solax_discharge
          event_data:
            battery_discharge: "do nothing"
      binary_sensor:
        - name: Solax Discharge Before 2330
          unique_id: solax_discharge_before_2330
          state: >
            {{true if trigger.event.data.battery_discharge == "discharge before 2330" else false}}

    - trigger:
        - trigger: event
          event_type: solax_discharge
          event_data:
            battery_discharge: "discharge nightly"
        - trigger: event
          event_type: solax_discharge
          event_data:
            battery_discharge: "do nothing"
      binary_sensor:
        - name: Solax Discharge Nightly
          unique_id: solax_discharge_nightly
          state: >
            {{true if trigger.event.data.battery_discharge == "discharge nightly" else false}}

    ######################################################
    # Binary Sensor triggered by events to allow Solax discharge
    # to occur when free electric happens
    # 5001 triggers
    # 5002 catches the min SoC, it also confirms if this binary_sensor is on,
    # if it is then it sets it to off.
    ######################################################
    - trigger:
        - trigger: event
          event_type: solax_discharge
          event_data:
            battery_discharge: "Free Electric Prep"
        - trigger: event
          event_type: solax_discharge
          event_data:
            battery_discharge: "do nothing"
      binary_sensor:
        - name: Solax Discharge Free Electric Prep
          unique_id: solax_discharge_free_electric_prep
          state: >
            {{true if trigger.event.data.battery_discharge == "Free Electric Prep" else false}}
          
    ######################################################
    # Binary Sensor triggered by events to allow Solax discharge
    # to occur when manual discharge happens
    # 5001 triggers
    # 5002 catches the min SoC, it also confirms if this binary_sensor is on,
    # if it is then it sets it to off.
    ######################################################
    - trigger:
        - trigger: event
          event_type: solax_discharge
          event_data:
            battery_discharge: "Manual Discharge"
        - trigger: event
          event_type: solax_discharge
          event_data:
            battery_discharge: "do nothing"
      binary_sensor:
        - name: Solax Discharge Manual
          unique_id: solax_discharge_manual
          state: >
            {{true if trigger.event.data.battery_discharge == "Manual Discharge" else false}}

    ######################################################
    # Currently a 20 min window to protect the system from trying to enter a force discharge
    # just before or during the chargeing window
    # Sometimes the inverter can take a while to get into force discharge mode and it may take several iterations
    # in the automations. 20 mins seems a fair window to avoid scenarios described above
    ######################################################
    - sensor:
      - name: Discharge Window Closed
        unique_id: solax_discharge_window_closed
        state: >
          {% set seconds_to_discharge = 20*60 %}
          {% if now() > today_at(states('input_datetime.solax_battery_stop_charge_time')) %}
            {{ ((today_at(states('input_datetime.solax_battery_start_charge_time'))|as_timestamp-seconds_to_discharge+86400)|as_datetime|as_local)}}
          {% else %}
            {{ ((today_at(states('input_datetime.solax_battery_start_charge_time'))|as_timestamp-seconds_to_discharge)|as_datetime|as_local)}}
          {% endif%}
        icon: mdi:clock-end
        device_class: "timestamp"
  
    ######################################################
    # Time it will take to discharge solax battery
    ######################################################
    - sensor:
      - name: Solax Seconds to Discharge
        unique_id: solax_seconds_to_discharge
        state: >
          {% set capacity_left = states('sensor.solax_discharge_capacity')|float (default = 0.0)%}
          {% set seconds_to_discharge = ((capacity_left) )|float/states('input_number.solax_inverter_capacity')|float (default=5.5)*60*60 %}
          {{seconds_to_discharge|int (default=0)}}

        attributes:
          prior: >
            {% set capacity_left = state_attr('sensor.solax_discharge_capacity','prior')|float (default = 0.0)%}
            {% set seconds_to_discharge = ((capacity_left) )|float/states('input_number.solax_inverter_capacity')|float (default=5.5)*60*60 %}
            {{seconds_to_discharge|int (default=0)}}
          daily: >
            {% set capacity_left = state_attr('sensor.solax_discharge_capacity','daily')|float (default = 0.0)%}
            {% set seconds_to_discharge = (capacity_left )|float/states('input_number.solax_inverter_capacity')|float (default=5.5)*60*60 %}
            {{[(seconds_to_discharge-(60*states('input_number.battery_export_margin_delta')|int (default=0)))|int (default=0),0|int]|max}}
          nightly: >
            {% set capacity_left = state_attr('sensor.solax_discharge_capacity','nightly')|float (default = 0.0)%}
            {% set seconds_to_discharge = (capacity_left )|float/states('input_number.solax_inverter_capacity')|float (default=5.5)*60*60 %}
            {{[(seconds_to_discharge-(60*states('input_number.battery_export_margin_delta')|int (default=0)))|int (default=0),0|int]|max}}
        icon: mdi:timer-marker

    ######################################################
    # discharge capacity solax battery
    ######################################################
    - sensor:
      - name: Solax Discharge Capacity
        unique_id: solax_discharge_capacity
        unit_of_measurement: "kWh"
        device_class: "energy"
        state: >
          {% set battery_soh = (states('sensor.solax_local_battery_soh')|float (default=100)/100)|float%} 
          {% set capacity_left = [(states('sensor.solax_local_battery_soc')|int (default=100)- states('input_number.solax_default_discharge_limit_soc')|int (default=15)) /100 * states('input_number.solax_battery_capacity')|float (default=9.2) * battery_soh,0|float]|max%}
          {{capacity_left|float (default=0.0)}}
        attributes:
          prior: >
            {% set battery_soh = (states('sensor.solax_local_battery_soh')|float (default=100)/100)|float%} 
            {% set capacity_left = [(states('sensor.solax_local_battery_soc')|int (default=100)- states('input_number.solax_discharge_limit_soc_before_ev')|int (default=15)) /100 * states('input_number.solax_battery_capacity')|float (default=9.2) * battery_soh,0|float]|max%}
            {{capacity_left|float (default=0.0)}}

          daily: >
            {% set battery_soh = (states('sensor.solax_local_battery_soh')|float (default=100)/100)|float%} 
            {% set capacity_left = [(states('sensor.solax_local_battery_soc')|int (default=100)- states('input_number.solax_daily_discharge_limit_soc')|int (default=15)) /100 * states('input_number.solax_battery_capacity')|float (default=9.2) * battery_soh,0|float]|max%}
            {{capacity_left|float (default=0.0)}}

          nightly: >
            {% set battery_soh = (states('sensor.solax_local_battery_soh')|float (default=100)/100)|float%} 
            {% set capacity_left = [(states('sensor.solax_local_battery_soc')|int (default=100)- states('input_number.solax_nightly_discharge_limit_soc')|int (default=15)) /100 * states('input_number.solax_battery_capacity')|float (default=9.2) * battery_soh,0|float]|max%}
            {{capacity_left|float (default=0.0)}}

        icon: mdi:battery

    ######################################################
    # Pre emptive EV discharge time
    ######################################################
    - trigger:
        - trigger: state
          entity_id: sensor.pre_export_battery_before_charging_ev_time_calc
      action:
        - if: "{{ trigger.to_state.state not in ['unknown','unavailable','None','none'] }}"
          then:
            - service: input_datetime.set_datetime
              target:
                entity_id: input_datetime.pre_export_battery_before_charging_ev_time
              data:
                datetime: >
                  {{ as_local(trigger.to_state.state | as_datetime) }}

      sensor:
        - name: Export Battery Before Charging EV Time
          unique_id: pre_export_battery_before_charging_ev_time
          device_class: "timestamp"
          state: >
            {% set calc = trigger.to_state.state %}
            {% if calc not in ['unknown','unavailable','None','none'] %}
              {{ as_local(calc | as_datetime) }}
            {% else %}
              {{ as_local(states('input_datetime.pre_export_battery_before_charging_ev_time') | as_datetime) }}
            {% endif %}
          attributes:
            last_triggered: >-
              {{ trigger.to_state.last_changed }}

    - sensor:
        - name: Pre Export Battery Before Charging EV Time Calc
          unique_id: pre_export_battery_before_charging_ev_time_calc
          device_class: "timestamp"
          state: >
            {# ---- Constants ---- #}
            {% set inverter_eta = 0.97 %}
            {% set now_dt = now() %}
            {% set now_ts = now_dt | as_timestamp %}

            {# ---- Sunset ---- #}
            {% set sunset_dt = states('sensor.sun_next_setting') | as_datetime | default(now_dt) | as_local %}
            {% set sunset_ts = sunset_dt | as_timestamp | default(now_ts) %}

            {# ---- PV production forecast ---- #}
            {% set production_remaining = (states('sensor.solcast_pv_forecast_forecast_remaining_today') | float(0)) * inverter_eta %}
            {% set production_last_change = states.sensor.solcast_pv_forecast_forecast_remaining_today.last_changed | default(now_dt) %}
            {% set production_last_change_ts = production_last_change | as_timestamp | default(now_ts) %}
            {% set production_seconds_until_sunset = sunset_ts - production_last_change_ts %}
            {% set production_per_hour = production_remaining / (production_seconds_until_sunset / 3600) if production_seconds_until_sunset > 0 else 0 %}

            {# ---- Battery status ---- #}
            {% set seconds_to_discharge_prior = state_attr('sensor.solax_seconds_to_discharge','prior') | default(0) | int %}
            {% set capacity_left = state_attr('sensor.solax_discharge_capacity','prior') | default(0) | float %}
            {% set inverter_kw = states('input_number.solax_inverter_capacity') | float(1) %}

            {# ---- Threshold sensor selection ---- #}
            {% set thresholds = {
                'solar_export_priority_on': 'sensor.solar_export_threshold',
                'solar_export_priority_off': 'sensor.don_t_charge_ev_before_time_wobble',
                'clever_time': 'sensor.calculated_ev_charge_start_time'
            } %}

            {% if is_state('input_boolean.solar_export_priority','on') %}
                {% set threshold_sensor = thresholds['solar_export_priority_on'] %}
            {% elif is_state('input_boolean.use_clever_time','on') %}
                {% set threshold_sensor = thresholds['clever_time'] %}
            {% else %}
                {% set threshold_sensor = thresholds['solar_export_priority_off'] %}
            {% endif %}

            {% set threshold_raw = states(threshold_sensor) | default('') %}
            {% if threshold_raw not in ['', 'unknown', 'None', none] %}
                {% set threshold_dt = threshold_raw | as_datetime | as_local %}
                {% set threshold_ts = threshold_dt | as_timestamp %}
            {% else %}
                {% set threshold_dt = none %}
                {% set threshold_ts = none %}
            {% endif %}

            {# ---- Default starttime ---- #}
            {% set starttime_dt = none %}

            {# ---- Main logic ---- #}
            {% if is_state('input_boolean.octopus_schedule_anytime','off') 
                  and is_state('input_boolean.export_battery_prior','on') 
                  and threshold_ts is not none %}

                {% if is_state('input_boolean.pre_emptive_export_battery','on') %}
                    {% if seconds_to_discharge_prior == 0 %}
                        {% set starttime_dt = states('sensor.ev_start_time') | as_datetime | default(none) | as_local %}
                    {% else %}
                        {# --- Compute overlap between PV production and battery discharge --- #}
                        {% set raw_overlap = (sunset_ts - threshold_ts) if sunset_ts > threshold_ts else 0 %}
                        {% set max_overlap = [seconds_to_discharge_prior, raw_overlap] | min %}
                        {% set additional_production = (production_per_hour / 3600) * max_overlap %}
                        {% set total_to_discharge = capacity_left + additional_production %}
                        {% set seconds_to_discharge = (total_to_discharge / inverter_kw) * 3600 %}
                        {% set computed_start_ts = threshold_ts - seconds_to_discharge %}
                        {% set starttime_dt = (computed_start_ts + (60*states('input_number.battery_export_margin_delta')|int (default=0))) | as_datetime | as_local %}
                    {% endif %}
                {% else %}
                    {% set starttime_dt = states('sensor.ev_start_time') | as_datetime | default(none) | as_local %}
                {% endif %}
            {% endif %}

            {# ---- Output ---- #}
            {% if starttime_dt is not none and starttime_dt > now_dt %}
                {% if ((starttime_dt | as_timestamp) - now_ts) < 180 
                      and is_state('input_boolean.octopus_schedule_anytime','off') 
                      or states('sensor.solax_local_inverter_mode') == 'Manual' %}
                    {{ states('sensor.pre_export_battery_before_charging_ev_time') | as_datetime | default(none) | as_local }}
                {% else %}
                    {{ starttime_dt }}
                {% endif %}
            {% else %}
                {{ none }}
            {% endif %}
            
    ######################################################
    # DAILY discharge time
    ######################################################
    - trigger:
        - trigger: state
          entity_id: sensor.pre_daily_battery_export_time_calc
      action:
        - if: "{{ trigger.to_state.state not in ['unknown','unavailable','None','none'] }}"
          then:
            - service: input_datetime.set_datetime
              target:
                entity_id: input_datetime.pre_daily_battery_export_time
              data:
                datetime: >
                  {{ as_local(trigger.to_state.state | as_datetime) }}

      sensor:
        - name: Daily Battery Export Time (EV Disconnected)
          unique_id: daily_battery_export_time_ev_disconnected
          device_class: "timestamp"
          state: >
            {% set calc = trigger.to_state.state %}
            {% if calc not in ['unknown','unavailable','None','none'] %}
              {{ as_local(calc | as_datetime) }}
            {% else %}
              {{ as_local((states('input_datetime.pre_daily_battery_export_time') )| as_datetime) }}
            {% endif %}
          attributes:
            last_triggered: >-
              {{ trigger.to_state.last_changed }}

    - sensor:
        - name: Pre Daily Battery Export Time Calc
          unique_id: pre_daily_battery_export_time_calc
          device_class: "timestamp"
          state: >
            {# ---- Constants ---- #}
            {% set inverter_eta = 0.97 %}
            {% set now_dt = now() %}
            {% set now_ts = now_dt | as_timestamp %}

            {# ---- Sunset ---- #}
            {% set sunset_dt = states('sensor.sun_next_setting') | as_datetime | default(now_dt) | as_local %}
            {% set sunset_ts = sunset_dt | as_timestamp | default(now_ts) %}

            {# ---- PV production forecast ---- #}
            {% set production_remaining = (states('sensor.solcast_pv_forecast_forecast_remaining_today') | float(0)) * inverter_eta %}
            {% set production_last_change = states.sensor.solcast_pv_forecast_forecast_remaining_today.last_changed | default(now_dt) %}
            {% set production_last_change_ts = production_last_change | as_timestamp | default(now_ts) %}
            {% set production_seconds_until_sunset = sunset_ts - production_last_change_ts %}
            {% set production_per_hour = production_remaining / (production_seconds_until_sunset / 3600) if production_seconds_until_sunset > 0 else 0 %}

            {# ---- Battery status ---- #}
            {% set seconds_to_discharge_prior = state_attr('sensor.solax_seconds_to_discharge','daily') | default(0) | int %}
            {% set capacity_left = state_attr('sensor.solax_discharge_capacity','daily') | default(0) | float %}
            {% set inverter_kw = states('input_number.solax_inverter_capacity') | float(1) %}

            {% set threshold_raw = today_at(states('input_datetime.daily_battery_export_time')) | default('') %}
            {% if threshold_raw not in ['', 'unknown', 'None', none] %}
                {% set threshold_dt = threshold_raw | as_datetime | as_local %}
                {% set threshold_ts = threshold_dt | as_timestamp %}
            {% else %}
                {% set threshold_dt = none %}
                {% set threshold_ts = none %}
            {% endif %}

            {# ---- Default starttime ---- #}
            {% set starttime_dt = none %}

            {# ---- Main logic ---- #}
            {% if is_state('input_boolean.octopus_schedule_anytime','off') 
                  and is_state('input_boolean.export_battery_daily','on') 
                  and threshold_ts is not none %}

                {% if is_state('input_boolean.export_battery_daily','on') %}
                    {% if seconds_to_discharge_prior == 0 %}
                        {% set starttime_dt = today_at(states('input_datetime.daily_battery_export_time'))  | as_datetime | default(none) | as_local %}
                    {% else %}
                        {# --- Compute overlap between PV production and battery discharge --- #}
                        {% set raw_overlap = (sunset_ts - threshold_ts) if sunset_ts > threshold_ts else 0 %}
                        {% set max_overlap = [seconds_to_discharge_prior, raw_overlap] | min %}
                        {% set additional_production = (production_per_hour / 3600) * max_overlap %}
                        {% set total_to_discharge = capacity_left + additional_production %}
                        {% set seconds_to_discharge = (total_to_discharge / inverter_kw) * 3600 %}
                        {% set computed_start_ts = threshold_ts - seconds_to_discharge %}
                        {% set starttime_dt = (computed_start_ts + (60*states('input_number.battery_export_margin_delta')|int (default=0))) | as_datetime | as_local %}
                    {% endif %}
                {% else %}
                    {% set starttime_dt = today_at(states('input_datetime.daily_battery_export_time')) | as_datetime | default(none) | as_local %}
                {% endif %}
            {% endif %}

            {# ---- Output ---- #}
            {% if starttime_dt is not none and starttime_dt > now_dt %}
                {% if ((starttime_dt | as_timestamp) - now_ts) < 180 
                      and is_state('input_boolean.octopus_schedule_anytime','off') 
                      or states('sensor.solax_local_inverter_mode') == 'Manual' %}
                    {{ states('sensor.daily_battery_export_time_ev_disconnected') | as_datetime | default(none) | as_local }}
                {% else %}
                    {{ starttime_dt }}
                {% endif %}
            {% else %}
                {{ none }}
            {% endif %}  
            
    ######################################################
    # Octopus Night Tariff Start Time
    # if pre-emptive on then discharge battery before 23:30 is reached
    ######################################################
    - trigger:
        - trigger: state
          entity_id: sensor.pre_nightly_battery_export_time_calc
          not_to:
            - unavailable
      sensor:
        - name: Nightly Battery Export Time (EV Disconnected)
          unique_id: pre_nightly_battery_export_time
          device_class: "timestamp"
          state: >
            {{ trigger.to_state.state }}
          attributes:
            last_triggered: >-
              {{ trigger.to_state.last_changed }}

    - sensor:
        - name: Pre Nightly Battery Export Time Calc
          unique_id: pre_nightly_battery_export_time_calc
          device_class: "timestamp"
          state: >
            {%set starttime =(today_at("23:30")|as_timestamp +86400)|as_datetime|as_local%}
            {% if states('input_boolean.pre_emptive_export_battery') == 'on' and states('input_boolean.export_battery') == 'on' %}
              {% set starttime = (today_at("23:30")|as_timestamp - state_attr('sensor.solax_seconds_to_discharge','nightly')|int)|as_datetime|as_local %}
            {%elif states('input_boolean.pre_emptive_export_battery') == 'off' and states('input_boolean.export_battery') == 'on'%}
              {% set starttime = (today_at("23:30")|as_timestamp)|as_datetime|as_local %}
            {%elif states('input_boolean.export_battery') == 'off'%}
              {% set starttime = None %} 
            {%endif%}

            {% if starttime != None %}
              {%if starttime|as_timestamp-now()|as_timestamp < 180 or states('sensor.solax_local_inverter_mode') == 'Manual' %}
                {{states('sensor.pre_nightly_battery_export_time')|as_datetime|as_local}}
              {%else%}
                {{starttime|as_datetime|as_local}}
              {%endif%} 
            {%else%}
              {{None}}
            {%endif%}

    ######################################################
    # Min SoC
    ######################################################  
    - trigger:
        - trigger: time
          at: input_datetime.solax_battery_start_charge_time
      sensor:
        - name: Solax Local Min SoC
          unique_id: solax_local_min_soc
          unit_of_measurement: "%"
          state_class: measurement
          icon: mdi:battery-0
          state: >
            {{states('sensor.solax_local_battery_soc')}}
    ######################################################
    # Max SoC
    ######################################################  
    - trigger:
        - trigger: time
          at: input_datetime.solax_battery_stop_charge_time
      sensor:
        - name: Solax Local Max SoC
          unique_id: solax_local_max_soc
          unit_of_measurement: "%"
          state_class: measurement
          icon: mdi:battery
          state: >
            {{states('sensor.solax_local_battery_soc')}}
    ######################################################
    # Battery SoH
    ######################################################
    - trigger:
        - platform: time
          at: input_datetime.solax_battery_stop_charge_time
      sensor:
        - name: Solax Local Battery SoH
          unique_id: solax_local_battery_soh
          unit_of_measurement: "%"
          state_class: measurement
          icon: mdi:battery
          state: >
            {# Read min/max SoC snapshots #}
            {% set min_soc = states('sensor.solax_local_min_soc') | int(0) %}
            {% set max_soc = states('sensor.solax_local_max_soc') | int(0) %}
            {% set delta_soc = max_soc - min_soc %}

            {# Read battery capacity and grid-stored energy #}
            {% set capacity = states('input_number.solax_battery_capacity') | float(0) %}
            {% set grid_stored = states('sensor.daily_grid_stored') | float(0) %}
            {% set stored = states('input_number.solax_battery_soh_stored') | float(0) %}

            {# Calculate SoH if charge window is meaningful, else use persisted value #}
            {% if delta_soc > 85 and capacity > 0 and grid_stored > 0 %}
              {{ [ ((grid_stored / ((delta_soc / 100) * capacity)) * 100) | round(1), 100 ] | min }}
            {% else %}
              {{ stored }}
            {% endif %}
      action:
        - variables:
            new_soh: >
              {% set min_soc = states('sensor.solax_local_min_soc') | int(0) %}
              {% set max_soc = states('sensor.solax_local_max_soc') | int(0) %}
              {% set delta_soc = max_soc - min_soc %}
              {% set capacity = states('input_number.solax_battery_capacity') | float(0) %}
              {% set grid_stored = states('sensor.daily_grid_stored') | float(0) %}
              {% set stored = states('input_number.solax_battery_soh_stored') | float(0) %}
              {% if delta_soc > 85 and capacity > 0 and grid_stored > 0 %}
                {{ [ ((grid_stored / ((delta_soc / 100) * capacity)) * 100) | round(1), 100 ] | min }}
              {% else %}
                {{ stored }}
              {% endif %}
        - service: input_number.set_value
          target:
            entity_id: input_number.solax_battery_soh_stored
          data:
            value: "{{ new_soh }}"

    ######################################################
    # Binary sensor for when house battery is supposed to be charging
    ######################################################
    - binary_sensor:
      - name: Solax Local Battery Charging Period Unsafe
        unique_id: solax_local_battery_charging_period_unsafe
        state: >
          {% set start1 = (states('input_datetime.solax_battery_start_charge_time') or '00:00').split(':') %}
          {% set stop1  = (states('input_datetime.solax_battery_stop_charge_time') or '00:00').split(':') %}
          {% set start2 = (states('input_datetime.solax_start_charge_2') or '00:00').split(':') %}
          {% set stop2  = (states('input_datetime.solax_stop_charge_2') or '00:00').split(':') %}
          {% set start1m = start1[0]|int * 60 + start1[1]|int %}
          {% set stop1m  = stop1[0]|int * 60 + stop1[1]|int %}
          {% set start2m = start2[0]|int * 60 + start2[1]|int %}
          {% set stop2m  = stop2[0]|int * 60 + stop2[1]|int %}
          {% set nowm    = now().hour * 60 + now().minute %}

          {% set period2 = is_state('input_boolean.solaxchargeperiod2', 'on') %}
          {% set mode = states('sensor.solax_local_inverter_mode') or '' %}
          {% set chrgfromgrid = states('sensor.solax_local_self_use_battery_charge_from_grid') | int(0) %}

          {% set in_period1 = (start1m <= stop1m and start1m <= nowm <= stop1m)
              or (start1m > stop1m and (nowm >= start1m or nowm <= stop1m)) %}
          {% set in_period2 = (start2m <= stop2m and start2m <= nowm <= stop2m)
              or (start2m > stop2m and (nowm >= start2m or nowm <= stop2m)) %}

          {{ (in_period1 and (mode == 'Feed In Priority' or chrgfromgrid == 1))
            or (period2 and in_period2 and (mode == 'Feed In Priority' or chrgfromgrid == 1)) }}

    - trigger:
        - trigger: state
          entity_id: binary_sensor.solax_local_battery_charging_period_unsafe
          not_to:
            - unavailable
            - unknown
      binary_sensor:
        - name: Solax Local Battery Charging Period
          unique_id: solax_local_battery_charging_period
          state: >
            {{ trigger.to_state.state if trigger is defined else states('binary_sensor.solax_local_battery_charging_period') }}
          attributes:
            last_triggered: >-
              {{ trigger.to_state.last_changed if trigger is defined else states.binary_sensor.solax_local_battery_charging_period.last_changed }}
          availability: >
            true

    ######################################################
    # Binary sensor for battery exports 
    ######################################################
    - binary_sensor:
      - name: Solax Battery Export Before EV Charge Allowed
        unique_id: solax_battery_export_before_ev_charge_allowed
        icon: mdi:transmission-tower-import
        state: >
          {% set anytime = is_state('input_boolean.octopus_schedule_anytime', 'on') %}
          {% set export_off = is_state('input_boolean.export_battery_prior', 'off') %}
          {% set solar_priority = is_state('input_boolean.solar_export_priority', 'on') %}
          {% set ev_disconnected = is_state('sensor.zappi_plug_status', 'EV Disconnected') %}
          {% set now_ts = now() | as_timestamp %}
          {% set ev_start = states('sensor.ev_start_time') | as_timestamp %}
          
          {# minimum lead time before EV charging starts (seconds) #}
          {% set min_lead_time = 15 * 60 %}
          
          {# if anytime or export_off or solar_priority or ev_disconnected #}
          {% if anytime or export_off or ev_disconnected %}}
            false
          {% elif now_ts >= ev_start - min_lead_time %}
            false
          {% else %}
            true
          {% endif %}
        device_class: "window"

    ######################################################
    # Extended Solax realtime data that    
    # new experimental sensors have been added:
    # - name: "Solax Local Self Consumption Power"
    # - name: "Solax Local Battery In From Solar"
    # - name: "Solax Local Battery Dump Power"
    # - name: "Solax Local House Load Power"
    ######################################################
    - sensor:
        - name: "Solax Local Battery Cell Voltage"
          unique_id: solax_local_battery_cell_voltage
          state: >
            {# if state_attr('sensor.solax_local', 'Data')[0] not in ['unknown', 'unavailable','none'] #}
            {% set val = state_attr('sensor.solax_local', 'Data')[14]|float(default=0.0) %}
            {% if val > 0 %}
              {{ val/100/(states('input_number.solax_battery_capacity')|int/3*32) if is_number(val) and (val|float > 0) else 0 }}
            {% else%}
              {{ states('sensor.solax_local_battery_cell_voltage')}}
            {% endif%}
          unit_of_measurement: "V"
          state_class: measurement
          device_class: "voltage"

    # Estimated remaining energy       
        - name: "Solax Local Battery Remaining Energy"
          unique_id: solax_local_battery_kwh
          state: "{{ (states('sensor.solax_local_battery_soc')|int - states('input_number.solax_default_discharge_limit_soc')|int) /100 * states('input_number.solax_battery_capacity')|float }}"
          unit_of_measurement: "kWh"
          device_class: "energy"
          state_class: total

    # Battery in power (charging from grid)
        - name: "Solax Local Battery Use In From Grid"
          unique_id: solax_local_battery_use_in_from_grid
          state: >
            {% set gridPwr = states('sensor.solax_local_grid_used_power')|int(default=0) %}
            {% set pvPwr = min(states('sensor.solax_local_pv_output')|float*0.95,states('input_number.solax_inverter_capacity')|float*1000)|int (default=0) %}
            {% set bat = states('sensor.solax_local_battery_power')|int - pvPwr|int  %}
            {{ bat if is_number(bat) and (bat|int > 0 and gridPwr > 0) else 0 }}
          unit_of_measurement: "W"
          state_class: measurement
          device_class: "power"
          icon: mdi:battery

        # Battery in power (charging from solar, may need to consider how much more efficent as its pure DC to DC? I was using a loss based on excess inververt power but it doesn't tally with whats already been consumed. i.e. topping up the battery from solar eems far more efficent)
        - name: "Solax Local Battery In From Solar"
          unique_id: solax_local_battery_in_from_solar
          state: >
            {% set grid = states('sensor.solax_local_battery_use_in_from_grid')|int (default = 0) %}
            {% set bat = states('sensor.solax_local_battery_use_in')|int(default=0) - grid|int%}
            {% set pvPwr = min(states('sensor.solax_local_pv_output')|float*0.95,states('input_number.solax_inverter_capacity')|float*1000)|int (default=0) %}
            {{ (grid-bat) if  (pvPwr >0) else 0 }}
            {# (bat-grid) #}
          unit_of_measurement: "W"
          state_class: measurement
          device_class: power
          icon: mdi:battery
      
        # Battery Export power (discharging)
        - name: "Solax Local Battery Dump Power"
          unique_id: solax_local_battery_dump_power
          state: >
            {# ---- Safe sensor values ---- #}
            {% set batAdj_raw = states('sensor.solax_local_battery_power_adjusted') %}
            {% set inverter_cap_raw = states('input_number.solax_inverter_capacity') %}
            {% set batAdj = 0 %}
            {% if batAdj_raw not in ['unavailable', 'unknown', 'None', none, ''] and inverter_cap_raw not in ['unavailable', 'unknown', 'None', none, ''] %}
                {% set batAdj = [batAdj_raw | int, inverter_cap_raw | float * -1000] | max | int %}
            {% endif %}

            {% set inv_power_raw = states('sensor.solax_local_inverter_power') %}
            {% set feedin_raw = states('sensor.solax_local_feedin_power') %}
            {% set load = 0 %}
            {% if inv_power_raw not in ['unavailable', 'unknown', 'None', none, ''] and feedin_raw not in ['unavailable', 'unknown', 'None', none, ''] %}
                {% set load = (inv_power_raw | float) - (feedin_raw | float) %}
            {% endif %}

            {# ---- Main logic ---- #}
            {% if states('sensor.solax_local_inverter_mode') == 'Manual' and 
                  states('sensor.solax_local_manual_mode_behaviour') == 'Force Discharge' %}
                {{ (0 - batAdj-load) if batAdj < 0 else 0 }}
            {% else %}
                0
            {% endif %}
          unit_of_measurement: "W"
          state_class: measurement
          device_class: "power"

        # Battery out power (discharging)
        - name: "Solax Local Battery Use Out"
          unique_id: solax_local_battery_use_out
          state: >
            {# ---- Safe sensor values ---- #}
            {% set batAdj_raw = states('sensor.solax_local_battery_power_adjusted') %}
            {% set batAdj = batAdj_raw if batAdj_raw not in ['unavailable', 'unknown', 'None', none, ''] else 0 %}
            {% set batAdj = batAdj | int %}

            {% set pvPwr_raw = states('sensor.solax_local_pv_output') %}
            {% set inverter_cap_raw = states('input_number.solax_inverter_capacity') %}
            {% set pvPwr = 0 %}
            {% if pvPwr_raw not in ['unavailable', 'unknown', 'None', none, ''] and inverter_cap_raw not in ['unavailable', 'unknown', 'None', none, ''] %}
                {% set pvPwr = [pvPwr_raw | float * 0.95, inverter_cap_raw | float * 1000] | min | int %}
            {% endif %}

            {% set inv_power_raw = states('sensor.solax_local_inverter_power') %}
            {% set feedin_raw = states('sensor.solax_local_feedin_power') %}
            {% set load = 0 %}
            {% if inv_power_raw not in ['unavailable', 'unknown', 'None', none, ''] and feedin_raw not in ['unavailable', 'unknown', 'None', none, ''] %}
                {% set load = (inv_power_raw | float) - (feedin_raw | float) %}
            {% endif %}

            {# ---- Main logic ---- #}
            {% if states('sensor.solax_local_inverter_mode') != 'Manual' 
                  and states('sensor.solax_local_manual_mode_behaviour') != 'Force Discharge' %}
                {{ (0 - batAdj) if batAdj < 0 else 0 }}
            {% elif states('sensor.solax_local_inverter_mode') == 'Manual' 
                    and states('sensor.solax_local_manual_mode_behaviour') == 'Force Discharge' %}
                {{ (load - pvPwr) if load > pvPwr else 0 }}
            {% else %}
                0
            {% endif %}
          unit_of_measurement: "W"
          state_class: measurement
          device_class: power
          icon: mdi:battery

        ### Inverter default working mode
        - name: "Solax Default Operation Mode"
          unique_id: solax_default_operation_mode
          device_class: enum
          state: >
            {% set mapper =  {
                'Self Use' : 0,
                'Feed In Priority' : 1} %}
            {% set state =  states('input_select.solax_default_mode')  %}
            {{ mapper[state] if state in mapper else '0' }}
          icon: mdi:cursor-default-outline
