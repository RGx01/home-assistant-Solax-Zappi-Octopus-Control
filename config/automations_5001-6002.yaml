- id: '5001'
  alias: 5001 - Solax Zappi Octopus Control
  description: "# 5001 - Solax Zappi Octopus Control\nSee documentation in repo.\n\n#
    Initial installation instructions\n1. This is 5001. You also need 5002 5003 5004
    and 5005 to make this work successfully. \n2. Find and replace, zappi_XXXXXXXX
    with zappi number, z_ZZZZZZZZ with Octopus account\n3. Paste into your automations.yaml\n\n#
    Change Log \nv3.6 min soc calculation updated\nv3.5 variable for loops\nv3.4 Added
    condition to check if saving session is in progress\nv3.3 Changed the logic slightly
    for setting SoC limits. Sometimes depending on which mode is being set (self use
    or feed in) the inverter seems to randomly reject the second service call. so
    I now set the first soc limit to match the default return to mode.\nv3.2 Added
    an input boolean switch to enable possibility to check what kind of discharge
    is occurring when a manual discharge is occurring.\nv3.0.4 Added a condition to
    prevent inverter reverting back to default if vehicle was charging prior to a
    saving session starting.\nv3.0.3 Added When Condition to ensure inverter mode
    is reset to default mode when it's time to start charging the solax battery.\nv3.0.2
    further fixes to 3.0.1\nv3.0.1 Fixed issue that if user plugs in during a saving
    session a charge could be initiated\nv3.0.0 Allow discharge battery before charging
    EV\nv2.1.4.1 Spotted a potential bug if user starts charge at 23:30 where it could
    clash with tail battery export\nv2.1.4 Renamed automation\nv2.1.3.1 fixed missing
    scenario where min_SoC would not be set properly at 23:30 or if FAST charging
    was selected.\nv2.1.3 More readable notifications\nv2.1.1 Update dispatch trigger
    for octopus dispatch from on to off rather than just to off. false triggers when
    sensor is unavailable \nv2.1 updated setting of modes and SoC's wrt rest sensor
    sensor.solax_rest_local_settings\nv2.0 Remove legacy dev work"
  triggers:
  - entity_id:
    - sensor.zappi_plug_status
    from:
    to: Fault
    id: Zappi Fault
    trigger: state
  - entity_id:
    - sensor.zappi_plug_status
    from: Charging
    to: EV Disconnected
    id: Charging to Disconnected
    trigger: state
  - entity_id:
    - sensor.zappi_plug_status
    from: EV Connected
    to: EV Disconnected
    id: Connected to Disconnected
    trigger: state
  - entity_id:
    - sensor.zappi_plug_status
    from: Charging
    to: EV Connected
    id: Finished Charging
    trigger: state
    for:
      hours: 0
      minutes: 10
      seconds: 0
  - entity_id:
    - sensor.zappi_plug_status
    from: Waiting for EV
    to: EV Connected
    id: Finished Charging
    trigger: state
    for:
      hours: 0
      minutes: 10
      seconds: 0
  - entity_id:
    - sensor.zappi_plug_status
    from: EV Disconnected
    to: EV Connected
    id: Disconnected To Connected
    trigger: state
  - entity_id:
    - sensor.zappi_plug_status
    from: Fault
    to: Charging
    id: Charging0
    trigger: state
  - entity_id:
    - sensor.zappi_plug_status
    from: Waiting for EV
    to: Charging
    id: Charging1
    trigger: state
  - entity_id:
    - sensor.zappi_plug_status
    to: Charging
    id: Charging2
    from: EV Connected
    trigger: state
  - at: sensor.ev_start_time
    id: Time to Start Charging
    trigger: time
  - at: '23:30:00'
    id: Discharge_battery_at_2330
    enabled: true
    trigger: time
  - entity_id:
    - binary_sensor.octopus_energy_z_ZZZZZZZZ_intelligent_dispatching
    to: 'off'
    id: Peak Rate
    trigger: state
    from: 'on'
  - entity_id:
    - select.myenergi_zappi_XXXXXXXX_charge_mode
    to: Fast
    id: Fast_unknown
    trigger: state
  - entity_id:
    - select.myenergi_zappi_XXXXXXXX_charge_mode
    for:
      hours: 0
      minutes: '{{(state_attr(''input_datetime.solax_stop_charge_2'', ''timestamp'')/60-state_attr(''input_datetime.solax_start_charge_2'',
        ''timestamp'')/60)|int (default = 60)}}'
      seconds: 0
    to: Fast
    id: Fast
    trigger: state
  - entity_id:
    - input_button.solax_force_discharge
    id: ForceDischarge
    trigger: state
  - entity_id:
    - input_button.solax_stop_discharge
    id: StopForceDischarge
    trigger: state
  - trigger: state
    entity_id:
    - input_boolean.zappi_eco_mode_override
    to: 'on'
    id: Allow Octopus to Determine Schedule
  - trigger: state
    entity_id:
    - input_boolean.solar_export_priority
    to: 'on'
    id: Only allow EV charging after sunset
  - trigger: state
    entity_id:
    - input_boolean.ev_solax_battery_drain
    - input_boolean.use_grid_during_octopus_dispatch
    id: Battery usage options
  - entity_id:
    - sensor.solax_local_battery_soc
    below: input_number.solax_default_discharge_limit_soc
    for:
      hours: 0
      minutes: 1
      seconds: 1
    id: Battery at min SoC
    trigger: numeric_state
    value_template: '{{ state.state | float(0)  - 1 }}'
  - trigger: state
    entity_id:
    - binary_sensor.solax_discharge_before_ev_charge
    from: 'on'
    to: 'off'
    id: Solax Discharge Prior to EV
  - trigger: time
    at:
      entity_id: sensor.octopus_intelligent_target_time
      offset: '-1'
    id: Dispatch Finished
  - trigger: state
    entity_id:
    - input_boolean.zappi_eco_always
    for:
      hours: 0
      minutes: 0
      seconds: 30
    id: Zappi eco mode
  - trigger: state
    entity_id:
    - sensor.solax_local_manual_mode_behaviour
    to: Do Nothing
    for:
      hours: 0
      minutes: 3
      seconds: 0
    id: Check Discharge Mode
    from: Force Discharge
    enabled: true
  - trigger: time
    at:
      entity_id: input_datetime.solax_battery_start_charge_time
      offset: '-300'
    id: Charge Solax
  - trigger: time
    at: sensor.solax_local_battery_setting_stop_charge_2
    id: Charge Period 2 End
  conditions: []
  actions:
  - choose:
    - conditions:
      - condition: trigger
        id:
        - Allow Octopus to Determine Schedule
      sequence:
      - action: input_boolean.turn_off
        metadata: {}
        data: {}
        target:
          entity_id: input_boolean.solar_export_priority
    - conditions:
      - condition: trigger
        id:
        - Only allow EV charging after sunset
      sequence:
      - action: input_boolean.turn_off
        metadata: {}
        data: {}
        target:
          entity_id:
          - input_boolean.zappi_eco_mode_override
    enabled: true
  - condition: not
    conditions:
    - condition: or
      conditions:
      - condition: and
        conditions:
        - condition: trigger
          id:
          - Discharge_battery_at_2330
        - condition: or
          conditions:
          - condition: state
            entity_id: sensor.zappi_plug_status
            state: Charging
          - condition: state
            entity_id: sensor.zappi_plug_status
            state: Waiting for EV
          - condition: state
            entity_id: sensor.solax_local_manual_mode_behaviour
            state: Force Discharge
      - condition: and
        conditions:
        - condition: trigger
          id:
          - Time to Start Charging
        - condition: state
          entity_id: sensor.zappi_plug_status
          state: EV Disconnected
      - condition: trigger
        id:
        - Only allow EV charging after sunset
      - condition: and
        conditions:
        - condition: trigger
          id:
          - Allow Octopus to Determine Schedule
        - condition: state
          entity_id: sensor.zappi_plug_status
          state: Charging
      - condition: and
        conditions:
        - condition: trigger
          id:
          - Battery usage options
        - condition: state
          entity_id: sensor.zappi_plug_status
          state: Charging
      - condition: state
        entity_id: input_boolean.saving_session_active
        state: 'on'
  - condition: template
    value_template: '{{now()|as_timestamp-states(''sensor.uptime'')|as_timestamp>80}}

      '
  - variables:
      default_mode: '{{states(''sensor.solax_default_operation_mode'')|int}}

        '
      min_soc: "{%if trigger.id == 'Discharge_battery_at_2330' or trigger.id == 'Fast_unknown'%}\n
        \ {% if states('sensor.zappi_plug_status') == 'Charging' and states('input_boolean.use_grid_during_octopus_dispatch')
        == 'on' and states('input_boolean.ev_solax_battery_drain') == 'on'-%}  {{100}}
        {%-endif %}\n  {%-if states('sensor.zappi_plug_status') == 'Charging' and
        states('input_boolean.use_grid_during_octopus_dispatch') == 'off' and states('input_boolean.ev_solax_battery_drain')
        == 'on'-%}  {{100}} {%-endif %} \n  {%-if states('sensor.zappi_plug_status')
        == 'Charging' and states('input_boolean.use_grid_during_octopus_dispatch')
        == 'on' and states('input_boolean.ev_solax_battery_drain') == 'off'-%}  {{100}}
        {%-endif %} \n  {%-if states('sensor.zappi_plug_status') == 'Charging' and
        states('input_boolean.use_grid_during_octopus_dispatch') == 'off' and states('input_boolean.ev_solax_battery_drain')
        == 'off'-%}  {{states('input_number.solax_default_discharge_limit_soc')|int}}
        {%-endif %} \n  {%-if states('sensor.zappi_plug_status') != 'Charging' and
        states('input_boolean.use_grid_during_octopus_dispatch') == 'on' and states('input_boolean.ev_solax_battery_drain')
        == 'on'-%}  {{100}} {%-endif %} \n  {%-if states('sensor.zappi_plug_status')
        != 'Charging' and states('input_boolean.use_grid_during_octopus_dispatch')
        == 'off' and states('input_boolean.ev_solax_battery_drain') == 'on'-%}  {{states('input_number.solax_default_discharge_limit_soc')|int}}
        {%-endif %} \n  {%-if states('sensor.zappi_plug_status') != 'Charging' and
        states('input_boolean.use_grid_during_octopus_dispatch') == 'on' and states('input_boolean.ev_solax_battery_drain')
        == 'off'-%}  {{100}} {%-endif %} \n  {%-if states('sensor.zappi_plug_status')
        != 'Charging' and states('input_boolean.use_grid_during_octopus_dispatch')
        == 'off' and states('input_boolean.ev_solax_battery_drain') == 'off'-%}  {{states('input_number.solax_default_discharge_limit_soc')|int}}
        {%-endif %} \n{%else%}\n  {%if now() > today_at(\"05:30\") and now() < today_at(\"23:30\")
        and trigger.id == 'Charging to Disconnected' %}      \n    {{states('input_number.solax_default_discharge_limit_soc')|int}}\n
        \ {%else%}\n    {% if (states('binary_sensor.octopus_energy_z_ZZZZZZZZ_intelligent_dispatching')
        == 'on') and states('sensor.zappi_plug_status') == 'Charging' and states('input_boolean.use_grid_during_octopus_dispatch')
        == 'on' and states('input_boolean.ev_solax_battery_drain') == 'on'-%}  {{100}}
        {%-endif %}\n    {%-if (states('binary_sensor.octopus_energy_z_ZZZZZZZZ_intelligent_dispatching')
        == 'on') and states('sensor.zappi_plug_status') == 'Charging' and states('input_boolean.use_grid_during_octopus_dispatch')
        == 'off' and states('input_boolean.ev_solax_battery_drain') == 'on'-%}  {{100}}
        {%-endif %} \n    {%-if (states('binary_sensor.octopus_energy_z_ZZZZZZZZ_intelligent_dispatching')
        == 'on') and states('sensor.zappi_plug_status') == 'Charging' and states('input_boolean.use_grid_during_octopus_dispatch')
        == 'on' and states('input_boolean.ev_solax_battery_drain') == 'off'-%}  {{100}}
        {%-endif %} \n    {%-if (states('binary_sensor.octopus_energy_z_ZZZZZZZZ_intelligent_dispatching')
        == 'on') and states('sensor.zappi_plug_status') == 'Charging' and states('input_boolean.use_grid_during_octopus_dispatch')
        == 'off' and states('input_boolean.ev_solax_battery_drain') == 'off'-%}  {{states('input_number.solax_default_discharge_limit_soc')|int}}
        {%-endif %} \n    {%-if (states('binary_sensor.octopus_energy_z_ZZZZZZZZ_intelligent_dispatching')
        == 'on') and states('sensor.zappi_plug_status') != 'Charging' and states('input_boolean.use_grid_during_octopus_dispatch')
        == 'on' and states('input_boolean.ev_solax_battery_drain') == 'on'-%}  {{100}}
        {%-endif %} \n    {%-if (states('binary_sensor.octopus_energy_z_ZZZZZZZZ_intelligent_dispatching')
        == 'on') and states('sensor.zappi_plug_status') != 'Charging' and states('input_boolean.use_grid_during_octopus_dispatch')
        == 'off' and states('input_boolean.ev_solax_battery_drain') == 'on'-%}  {{states('input_number.solax_default_discharge_limit_soc')|int}}
        {%-endif %} \n    {%-if (states('binary_sensor.octopus_energy_z_ZZZZZZZZ_intelligent_dispatching')
        == 'on') and states('sensor.zappi_plug_status') != 'Charging' and states('input_boolean.use_grid_during_octopus_dispatch')
        == 'on' and states('input_boolean.ev_solax_battery_drain') == 'off'-%}  {{100}}
        {%-endif %} \n    {%-if (states('binary_sensor.octopus_energy_z_ZZZZZZZZ_intelligent_dispatching')
        == 'on') and states('sensor.zappi_plug_status') != 'Charging' and states('input_boolean.use_grid_during_octopus_dispatch')
        == 'off' and states('input_boolean.ev_solax_battery_drain') == 'off'-%}  {{states('input_number.solax_default_discharge_limit_soc')|int}}
        {%-endif %} \n    {%-if (states('binary_sensor.octopus_energy_z_ZZZZZZZZ_intelligent_dispatching')
        == 'off') and states('sensor.zappi_plug_status') != 'Charging' and states('input_boolean.use_grid_during_octopus_dispatch')
        == 'on' and states('input_boolean.ev_solax_battery_drain') == 'on'-%}  {{states('input_number.solax_default_discharge_limit_soc')|int}}
        {%-endif %} \n    {%-if (states('binary_sensor.octopus_energy_z_ZZZZZZZZ_intelligent_dispatching')
        == 'off') and states('sensor.zappi_plug_status') != 'Charging' and states('input_boolean.use_grid_during_octopus_dispatch')
        == 'off' and states('input_boolean.ev_solax_battery_drain') == 'on'-%}  {{states('input_number.solax_default_discharge_limit_soc')|int}}
        {%-endif %} \n    {%-if (states('binary_sensor.octopus_energy_z_ZZZZZZZZ_intelligent_dispatching')
        == 'off') and states('sensor.zappi_plug_status') != 'Charging' and states('input_boolean.use_grid_during_octopus_dispatch')
        == 'on' and states('input_boolean.ev_solax_battery_drain') == 'off'-%}  {{states('input_number.solax_default_discharge_limit_soc')|int}}
        {%-endif %} \n    {%-if (states('binary_sensor.octopus_energy_z_ZZZZZZZZ_intelligent_dispatching')
        == 'off') and states('sensor.zappi_plug_status') != 'Charging' and states('input_boolean.use_grid_during_octopus_dispatch')
        == 'off' and states('input_boolean.ev_solax_battery_drain') == 'off'-%}  {{states('input_number.solax_default_discharge_limit_soc')|int}}
        {%-endif %} \n    {%-if (states('binary_sensor.octopus_energy_z_ZZZZZZZZ_intelligent_dispatching')
        == 'off') and states('sensor.zappi_plug_status') == 'Charging' and states('input_boolean.use_grid_during_octopus_dispatch')
        == 'on' and states('input_boolean.ev_solax_battery_drain') == 'on'-%}  {{100}}
        {%-endif %} \n    {%-if (states('binary_sensor.octopus_energy_z_ZZZZZZZZ_intelligent_dispatching')
        == 'off') and states('sensor.zappi_plug_status') == 'Charging' and states('input_boolean.use_grid_during_octopus_dispatch')
        == 'off' and states('input_boolean.ev_solax_battery_drain') == 'on' -%} {{100}}
        {%-endif %} \n    {%-if (states('binary_sensor.octopus_energy_z_ZZZZZZZZ_intelligent_dispatching')
        == 'off') and states('sensor.zappi_plug_status') == 'Charging' and states('input_boolean.use_grid_during_octopus_dispatch')
        == 'on' and states('input_boolean.ev_solax_battery_drain') == 'off'-%}  {{states('input_number.solax_default_discharge_limit_soc')|int}}
        {%-endif %}\n  {%-endif-%}\n{%-endif %}\n"
      mode_delay: 20
      manual_mode_delay: 65
      settings_delay: 20
      refresh_settings_delay: 5
      loops: 5
  - action: input_boolean.turn_on
    metadata: {}
    data: {}
    target:
      entity_id: input_boolean.solax_automation_running
    enabled: true
  - action: homeassistant.update_entity
    data:
      entity_id:
      - sensor.solax_rest_local_settings
  - delay:
      hours: 0
      minutes: 0
      seconds: '{{refresh_settings_delay}}'
      milliseconds: 0
  - repeat:
      sequence:
      - condition: not
        conditions:
        - condition: template
          value_template: '{{(state_attr(''sensor.solax_local_settings'', ''Data'')[0]
            == min_soc and state_attr(''sensor.solax_local_settings'', ''Data'')[12]
            == min_soc)}}'
        enabled: true
      - choose:
        - conditions:
          - condition: state
            entity_id: sensor.solax_default_operation_mode
            state: '1'
          sequence:
          - action: rest_command.solax_local_set_feedin_battery_min_soc
            data:
              level: '{{min_soc}}'
          - delay:
              hours: 0
              minutes: 0
              seconds: '{{settings_delay}}'
              milliseconds: 0
          - action: rest_command.solax_local_set_selfuse_battery_min_soc
            data:
              level: '{{min_soc}}'
          - delay:
              hours: 0
              minutes: 0
              seconds: '{{settings_delay}}'
              milliseconds: 0
          - action: homeassistant.update_entity
            data:
              entity_id:
              - sensor.solax_rest_local_settings
          - delay:
              hours: 0
              minutes: 0
              seconds: '{{refresh_settings_delay}}'
              milliseconds: 0
        - conditions:
          - condition: state
            entity_id: sensor.solax_default_operation_mode
            state: '0'
          sequence:
          - action: rest_command.solax_local_set_selfuse_battery_min_soc
            data:
              level: '{{min_soc}}'
          - delay:
              hours: 0
              minutes: 0
              seconds: '{{settings_delay}}'
              milliseconds: 0
          - action: rest_command.solax_local_set_feedin_battery_min_soc
            data:
              level: '{{min_soc}}'
          - delay:
              hours: 0
              minutes: 0
              seconds: '{{settings_delay}}'
              milliseconds: 0
          - action: homeassistant.update_entity
            data:
              entity_id:
              - sensor.solax_rest_local_settings
          - delay:
              hours: 0
              minutes: 0
              seconds: '{{refresh_settings_delay}}'
              milliseconds: 0
      - if:
        - condition: template
          value_template: '{{repeat.index == loops}}'
        then:
        - event: Solax Zappi Octopus Control
          event_data:
            message: Failure Occured @ {{now().strftime('%H:%M')}}. SoC levels may
              need attention.
            title: Failure to set SoC levels - Action required!
            class: high
          enabled: true
      until:
      - condition: template
        value_template: '{{ (state_attr(''sensor.solax_local_settings'', ''Data'')[0]
          == min_soc and state_attr(''sensor.solax_local_settings'', ''Data'')[12]
          == min_soc) or repeat.index == loops }}'
    enabled: true
  - choose:
    - conditions:
      - condition: state
        entity_id: sensor.zappi_plug_status
        state: Charging
      - condition: state
        entity_id: select.myenergi_zappi_XXXXXXXX_charge_mode
        state: Eco+
      - condition: trigger
        id:
        - Charging0
        - Charging1
        - Charging2
      sequence:
      - repeat:
          sequence:
          - data:
              value: '{{default_mode}}'
            action: rest_command.solax_local_set_inverter_mode
          - delay:
              hours: 0
              minutes: 0
              seconds: '{{mode_delay}}'
              milliseconds: 0
          - action: homeassistant.update_entity
            data:
              entity_id:
              - sensor.solax_rest_local_settings
          - delay:
              hours: 0
              minutes: 0
              seconds: '{{refresh_settings_delay}}'
              milliseconds: 0
          until:
          - condition: template
            value_template: '{{ (state_attr(''sensor.solax_local_settings'', ''Data'')[10]
              == default_mode) or repeat.index == loops }}'
      - event: Solax Zappi Octopus Control
        event_data:
          message: EV started charging @ {{now().strftime('%H:%M')}}.
          title: EV Charging Started
          class: normal
        enabled: true
    - conditions:
      - condition: trigger
        id:
        - Finished Charging
      sequence:
      - if:
        - condition: time
          after: '23:30:00'
          before: sensor.discharge_window_closed
        - condition: state
          entity_id: input_boolean.export_battery
          state: 'on'
        - condition: numeric_state
          entity_id: sensor.solax_local_battery_soc
          value_template: '{{ state.state | float(0)  - 14 }}'
          above: input_number.solax_manual_forced_discharge_limit_soc
        - condition: template
          value_template: '{{(state_attr(''sensor.solax_local_settings'', ''Data'')[10]
            != 3)}}'
        then:
        - repeat:
            sequence:
            - data:
                value: 3
              action: rest_command.solax_local_set_inverter_mode
            - delay:
                hours: 0
                minutes: 0
                seconds: '{{manual_mode_delay}}'
                milliseconds: 0
            - data:
                value: 2
              action: rest_command.solax_local_set_manual_mode_behaviour
            - delay:
                hours: 0
                minutes: 0
                seconds: '{{manual_mode_delay}}'
                milliseconds: 0
            - action: homeassistant.update_entity
              data:
                entity_id:
                - sensor.solax_rest_local_settings
            - delay:
                hours: 0
                minutes: 0
                seconds: '{{refresh_settings_delay}}'
                milliseconds: 0
            until:
            - condition: template
              value_template: '{{ (state_attr(''sensor.solax_local_settings'', ''Data'')[10]
                == 3 and state_attr(''sensor.solax_local_settings'', ''Data'')[11]
                == 2) or repeat.index == loops }}'
        - event: Solax Zappi Octopus Control
          event_data:
            message: EV stopped charging @ {{now().strftime('%H:%M')}}. Attempting
              Discharge. Zappi charge session {{states('sensor.myenergi_zappi_XXXXXXXX_charge_added_session')}}kWh.
            title: EV Stopped Charging - Attempting Battery Export.
            class: normal
          enabled: true
        else:
        - event: Solax Zappi Octopus Control
          event_data:
            message: EV stopped charging @ {{now().strftime('%H:%M')}}. Zappi charge
              session {{states('sensor.myenergi_zappi_XXXXXXXX_charge_added_session')}}kWh.
            title: EV Stopped Charging.
            class: normal
          enabled: true
    - conditions:
      - condition: trigger
        id:
        - Disconnected To Connected
        - Time to Start Charging
        - Allow Octopus to Determine Schedule
        - Solax Discharge Prior to EV
      - condition: state
        entity_id: sensor.zappi_plug_status
        state: EV Connected
      - condition: state
        entity_id: input_boolean.saving_session_active
        state: 'off'
      sequence:
      - if:
        - condition: state
          entity_id: input_boolean.zappi_eco_always
          state: 'on'
        then:
        - action: select.select_option
          metadata: {}
          data:
            option: Eco+
          target:
            entity_id: select.myenergi_zappi_XXXXXXXX_charge_mode
        else:
        - action: select.select_option
          metadata: {}
          data:
            option: Stopped
          target:
            entity_id: select.myenergi_zappi_XXXXXXXX_charge_mode
      - choose:
        - conditions:
          - condition: or
            conditions:
            - condition: state
              entity_id: input_boolean.export_battery_prior
              state: 'off'
            - condition: template
              value_template: '{{trigger.id == "Solax Discharge Prior to EV"}}'
          sequence:
          - if:
            - condition: or
              conditions:
              - condition: time
                after: sensor.ev_start_time
                before: sensor.octopus_intelligent_target_time
              - condition: state
                entity_id: input_boolean.zappi_eco_mode_override
                state: 'on'
            then:
            - metadata: {}
              data:
                option: Eco+
              target:
                entity_id: select.myenergi_zappi_XXXXXXXX_charge_mode
              action: select.select_option
            - metadata: {}
              data: {}
              target:
                entity_id: switch.octopus_energy_z_ZZZZZZZZ_intelligent_smart_charge
              enabled: true
              action: switch.turn_on
            - repeat:
                sequence:
                - data:
                    value: '{{default_mode}}'
                  action: rest_command.solax_local_set_inverter_mode
                - delay:
                    hours: 0
                    minutes: 0
                    seconds: '{{mode_delay}}'
                    milliseconds: 0
                - action: homeassistant.update_entity
                  data:
                    entity_id:
                    - sensor.solax_rest_local_settings
                - delay:
                    hours: 0
                    minutes: 0
                    seconds: '{{refresh_settings_delay}}'
                    milliseconds: 0
                until:
                - condition: template
                  value_template: '{{ (state_attr(''sensor.solax_local_settings'',
                    ''Data'')[10] == default_mode) or repeat.index == loops }}'
          - if:
            - condition: not
              conditions:
              - condition: trigger
                id:
                - Time to Start Charging
            then:
            - event: Solax Zappi Octopus Control
              event_data:
                message: EV Connected @ {{now().strftime('%H:%M')}}.Getting shedule
                  at {%if now()|as_timestamp > states('sensor.ev_start_time')|as_timestamp%}
                  {{now().strftime('%H:%M')}} {% else %} {{(states('sensor.ev_start_time')|as_datetime).strftime('%H:%M')}}.
                  {% endif %}
                title: EV Connected - Waiting for Octopus schedule
                class: normal
              enabled: true
        - conditions:
          - condition: state
            entity_id: input_boolean.export_battery_prior
            state: 'on'
          sequence:
          - if:
            - condition: or
              conditions:
              - condition: state
                entity_id: input_boolean.zappi_eco_mode_override
                state: 'on'
              - condition: template
                value_template: '     {{now()|as_timestamp>=states(''sensor.ev_start_time'')|as_timestamp
                  and now()|as_timestamp <=states(''sensor.octopus_intelligent_target_time'')|as_timestamp}}'
            then:
            - event: solax_discharge
              event_data:
                battery_discharge: discharge before EV charge
              enabled: true
            - if:
              - condition: numeric_state
                entity_id: sensor.solax_local_battery_soc
                above: input_number.solax_discharge_limit_soc_before_ev
                value_template: '{{ state.state | float(0)  - 14 }}'
              then:
              - action: select.select_option
                metadata: {}
                data:
                  option: Stopped
                target:
                  entity_id: select.myenergi_zappi_XXXXXXXX_charge_mode
              - repeat:
                  sequence:
                  - data:
                      value: 3
                    action: rest_command.solax_local_set_inverter_mode
                  - delay:
                      hours: 0
                      minutes: 0
                      seconds: '{{manual_mode_delay}}'
                      milliseconds: 0
                  - data:
                      value: 2
                    action: rest_command.solax_local_set_manual_mode_behaviour
                  - delay:
                      hours: 0
                      minutes: 0
                      seconds: '{{manual_mode_delay}}'
                      milliseconds: 0
                  - action: homeassistant.update_entity
                    data:
                      entity_id:
                      - sensor.solax_rest_local_settings
                  - delay:
                      hours: 0
                      minutes: 0
                      seconds: '{{refresh_settings_delay}}'
                      milliseconds: 0
                  - if:
                    - condition: template
                      value_template: '{{repeat.index == loops}}'
                    then:
                    - event: Solax Zappi Octopus Control
                      event_data:
                        message: Manual discharge failure @ {{now().strftime('%H:%M')}}.
                          Setting modes issue.
                        title: Manual Discharge Failure
                        class: high
                      enabled: true
                  until:
                  - condition: template
                    value_template: '{{ (state_attr(''sensor.solax_local_settings'',
                      ''Data'')[10] == 3 and state_attr(''sensor.solax_local_settings'',
                      ''Data'')[11] == 2) or repeat.index == loops }}'
              - event: Solax Zappi Octopus Control
                event_data:
                  message: 'EV Connected @ {{now().strftime(''%H:%M'')}}. Solax Battery
                    will attempt to discharge at {%if now()|as_timestamp > states(''sensor.ev_start_time'')|as_timestamp%}{{now().strftime(''%H:%M'')}}
                    {% else %}{{(states(''sensor.ev_start_time'')|as_datetime|as_local).strftime(''%H:%M'')}}
                    {%endif%}prior to getting a schedule from octopus. '
                  title: EV Connected - Waiting for Solax to Discharge Before Getting
                    Octopus Schedule
                  class: normal
                enabled: true
              else:
              - wait_template: '{{states(''binary_sensor.solax_discharge_before_ev_charge'')==true}}'
                continue_on_timeout: true
                timeout: '5'
              - event: solax_discharge
                event_data:
                  battery_discharge: do nothing
                enabled: true
              - wait_template: '{{states(''binary_sensor.solax_discharge_before_ev_charge'')==false}}'
                continue_on_timeout: true
                timeout: '5'
              - event: Solax Zappi Octopus Control
                event_data:
                  message: Forced discharge failed because the battery is already
                    too close to target SoC @ {{now().strftime('%H:%M')}}
                  title: Forced Discharge Before EV Charge - Failed
                  class: normal
                enabled: true
            else:
            - if:
              - condition: template
                value_template: '{{states(''sensor.earliest_ev_start_time'')|as_timestamp<=states(''sensor.ev_start_time'')|as_timestamp
                  or states(''sensor.earliest_ev_start_time'')|as_timestamp <=now()|as_timestamp}}'
              then:
              - event: Solax Zappi Octopus Control
                event_data:
                  message: 'EV Connected @ {{now().strftime(''%H:%M'')}}. Solax Battery
                    will attempt to discharge at {%if now()|as_timestamp > states(''sensor.ev_start_time'')|as_timestamp%}{{now().strftime(''%H:%M'')}}
                    {% else %}{{(states(''sensor.ev_start_time'')|as_datetime|as_local).strftime(''%H:%M'')}}
                    {%endif%}prior to getting a schedule from octopus. '
                  title: EV Connected - Waiting for Solax to Discharge Before Getting
                    Octopus Schedule
                  class: normal
                enabled: true
              else:
              - event: Solax Zappi Octopus Control
                event_data:
                  message: 'EV Connected @ {{now().strftime(''%H:%M'')}}.Getting shedule
                    at {%if now()|as_timestamp > states(''sensor.ev_start_time'')|as_timestamp%}
                    {{now().strftime(''%H:%M'')}} {% else %} {{(states(''sensor.ev_start_time'')|as_datetime).strftime(''%H:%M'')}}.
                    {% endif %}. Unable to discharge Solax prior to charging EV as
                    this could leave you on peak rate prior to EV dispatch being available. '
                  title: EV Connected - Waiting for Octopus schedule - Solax Discharge
                    Unavailable
                  class: normal
                enabled: true
              enabled: false
            - event: Solax Zappi Octopus Control
              event_data:
                message: 'EV Connected @ {{now().strftime(''%H:%M'')}}. Solax Battery
                  will attempt to discharge at {%if now()|as_timestamp > states(''sensor.ev_start_time'')|as_timestamp%}{{now().strftime(''%H:%M'')}}
                  {% else %}{{(states(''sensor.ev_start_time'')|as_datetime|as_local).strftime(''%H:%M'')}}
                  {%endif%}prior to getting a schedule from octopus. '
                title: EV Connected - Waiting for Octopus schedule & Solax to Discharge
                class: normal
              enabled: false
    - conditions:
      - condition: trigger
        id:
        - Disconnected To Connected
      sequence:
      - if:
        - condition: state
          entity_id: input_boolean.zappi_eco_always
          state: 'on'
        then:
        - action: select.select_option
          metadata: {}
          data:
            option: Eco+
          target:
            entity_id: select.myenergi_zappi_XXXXXXXX_charge_mode
        else:
        - action: select.select_option
          metadata: {}
          data:
            option: Stopped
          target:
            entity_id: select.myenergi_zappi_XXXXXXXX_charge_mode
      - metadata: {}
        data: {}
        target:
          entity_id: switch.octopus_energy_z_ZZZZZZZZ_intelligent_smart_charge
        action: switch.turn_off
      - repeat:
          sequence:
          - data:
              value: '{{default_mode}}'
            action: rest_command.solax_local_set_inverter_mode
          - delay:
              hours: 0
              minutes: 0
              seconds: '{{mode_delay}}'
              milliseconds: 0
          - action: homeassistant.update_entity
            data:
              entity_id:
              - sensor.solax_rest_local_settings
          - delay:
              hours: 0
              minutes: 0
              seconds: '{{refresh_settings_delay}}'
              milliseconds: 0
          until:
          - condition: template
            value_template: '{{ (state_attr(''sensor.solax_local_settings'', ''Data'')[10]
              == default_mode) or repeat.index == loops }}'
      - event: Solax Zappi Octopus Control
        event_data:
          message: EV Connected @ {{now().strftime('%H:%M')}}. No plan to charge -
            there may be an issue with automation config
          title: EV Connected - No Charge Plan
          class: high
        enabled: true
    - conditions:
      - condition: trigger
        id:
        - Connected to Disconnected
        - Charging to Disconnected
      sequence:
      - if:
        - condition: state
          entity_id: input_boolean.zappi_eco_always
          state: 'on'
        then:
        - action: select.select_option
          metadata: {}
          data:
            option: Eco+
          target:
            entity_id: select.myenergi_zappi_XXXXXXXX_charge_mode
        else:
        - action: select.select_option
          metadata: {}
          data:
            option: Stopped
          target:
            entity_id: select.myenergi_zappi_XXXXXXXX_charge_mode
      - metadata: {}
        data: {}
        target:
          entity_id: switch.octopus_energy_z_ZZZZZZZZ_intelligent_smart_charge
        action: switch.turn_off
      - repeat:
          sequence:
          - data:
              value: '{{default_mode}}'
            action: rest_command.solax_local_set_inverter_mode
          - delay:
              hours: 0
              minutes: 0
              seconds: '{{mode_delay}}'
              milliseconds: 0
          - action: homeassistant.update_entity
            data:
              entity_id:
              - sensor.solax_rest_local_settings
          - delay:
              hours: 0
              minutes: 0
              seconds: '{{refresh_settings_delay}}'
              milliseconds: 0
          until:
          - condition: template
            value_template: '{{ (state_attr(''sensor.solax_local_settings'', ''Data'')[10]
              == default_mode) or repeat.index == loops }}'
      - event: Solax Zappi Octopus Control
        event_data:
          message: EV disconnected @ {{now().strftime('%H:%M')}}
          title: EV Disconnected
          class: normal
        enabled: true
    - conditions:
      - condition: trigger
        id:
        - Zappi Fault
      sequence:
      - event: Solax Zappi Octopus Control
        event_data:
          message: ZAPPI FAULT @ {{now().strftime('%H:%M')}}. Go outside and follow
            instructions on charger
          title: ZAPPI FAULT
          class: high
        enabled: true
    - conditions:
      - condition: trigger
        id:
        - Fast
      sequence:
      - metadata: {}
        data:
          option: Stopped
        target:
          entity_id: select.myenergi_zappi_XXXXXXXX_charge_mode
        action: select.select_option
      - event: Solax Zappi Octopus Control
        event_data:
          message: EV started BOOST charging @ {{now().strftime('%H:%M')}}. Rate =
            {{states('select.daily_grid_import')}}
          title: EV FAST Charging Started
          class: normal
        enabled: true
    - conditions:
      - condition: trigger
        id:
        - ForceDischarge
      - condition: template
        value_template: '{{(state_attr(''sensor.solax_local_settings'', ''Data'')[10]
          != 3)}}'
      sequence:
      - if:
        - condition: numeric_state
          entity_id: sensor.solax_local_battery_soc
          above: input_number.solax_manual_forced_discharge_limit_soc
          value_template: '{{ state.state | float(0)  - 14 }}'
        then:
        - repeat:
            sequence:
            - data:
                value: 3
              action: rest_command.solax_local_set_inverter_mode
            - delay:
                hours: 0
                minutes: 0
                seconds: '{{mode_delay}}'
                milliseconds: 0
            - data:
                value: 2
              action: rest_command.solax_local_set_manual_mode_behaviour
            - delay:
                hours: 0
                minutes: 0
                seconds: '{{mode_delay}}'
                milliseconds: 0
            - action: homeassistant.update_entity
              data:
                entity_id:
                - sensor.solax_rest_local_settings
            - delay:
                hours: 0
                minutes: 0
                seconds: '{{refresh_settings_delay}}'
                milliseconds: 0
            - if:
              - condition: template
                value_template: '{{repeat.index == loops}}'
              then:
              - event: Solax Zappi Octopus Control
                event_data:
                  message: Manual discharge failure @ {{now().strftime('%H:%M')}}.
                    Setting modes issue.
                  title: Manual Discharge Failure
                  class: high
                enabled: true
            until:
            - condition: template
              value_template: '{{ (state_attr(''sensor.solax_local_settings'', ''Data'')[10]
                == 3 and state_attr(''sensor.solax_local_settings'', ''Data'')[11]
                == 2) or repeat.index == loops }}'
        - event: Solax Zappi Octopus Control
          event_data:
            message: Manual Discharge @ {{now().strftime('%H:%M')}}
            title: Manual Discharge Started
            class: normal
          enabled: true
        - action: input_boolean.turn_on
          metadata: {}
          data: {}
          target:
            entity_id: input_boolean.export_battery_manual
    - conditions:
      - condition: trigger
        id:
        - StopForceDischarge
      - condition: template
        value_template: '{{(state_attr(''sensor.solax_local_settings'', ''Data'')[10]
          == 3)}}'
      sequence:
      - repeat:
          sequence:
          - data:
              value: '{{default_mode}}'
            action: rest_command.solax_local_set_inverter_mode
          - delay:
              hours: 0
              minutes: 0
              seconds: '{{mode_delay}}'
              milliseconds: 0
          - data:
              value: 0
            action: rest_command.solax_local_set_manual_mode_behaviour
          - delay:
              hours: 0
              minutes: 0
              seconds: '{{mode_delay}}'
              milliseconds: 0
          - action: homeassistant.update_entity
            data:
              entity_id:
              - sensor.solax_rest_local_settings
          - delay:
              hours: 0
              minutes: 0
              seconds: '{{refresh_settings_delay}}'
              milliseconds: 0
          until:
          - condition: template
            value_template: '{{ (state_attr(''sensor.solax_local_settings'', ''Data'')[10]
              == default_mode) or repeat.index == loops }}'
      - event: Solax Zappi Octopus Control
        event_data:
          message: Manual Discharge Stopped @ {{now().strftime('%H:%M')}}
          title: Manual Discharge Stopped
          class: normal
        enabled: true
      - if:
        - condition: state
          entity_id: binary_sensor.solax_discharge_before_ev_charge
          state: 'on'
        then:
        - delay:
            hours: 0
            minutes: 1
            seconds: 0
            milliseconds: 0
        - event: solax_discharge
          event_data:
            battery_discharge: do nothing
      - action: input_boolean.turn_off
        metadata: {}
        data: {}
        target:
          entity_id: input_boolean.export_battery_manual
    - conditions:
      - condition: trigger
        id:
        - Discharge_battery_at_2330
      - condition: or
        conditions:
        - condition: state
          entity_id: sensor.zappi_plug_status
          state: EV Disconnected
        - condition: and
          conditions:
          - condition: state
            entity_id: sensor.zappi_plug_status
            state: EV Connected
            for:
              hours: 0
              minutes: 10
              seconds: 0
          - condition: template
            value_template: '{%if zappi_eco_mode_override == on %}

              {{(now()|as_timestamp-states(''sensor.zappi_last_connected'')|as_timestamp)|abs
              > 15*60}}

              {%else%}

              {{(now()|as_timestamp-states(''sensor.ev_start_time'')|as_timestamp)|abs
              > 15*60}}

              {%endif%}'
      sequence:
      - if:
        - condition: state
          entity_id: input_boolean.export_battery
          state: 'on'
        - condition: numeric_state
          entity_id: sensor.solax_local_battery_soc
          value_template: '{{ state.state | float(0)  - 14 }}'
          above: input_number.solax_manual_forced_discharge_limit_soc
        - condition: template
          value_template: '{{(state_attr(''sensor.solax_local_settings'', ''Data'')[10]
            != 3)}}'
        then:
        - repeat:
            sequence:
            - data:
                value: 3
              action: rest_command.solax_local_set_inverter_mode
            - delay:
                hours: 0
                minutes: 0
                seconds: '{{manual_mode_delay}}'
                milliseconds: 0
            - data:
                value: 2
              action: rest_command.solax_local_set_manual_mode_behaviour
            - delay:
                hours: 0
                minutes: 0
                seconds: '{{manual_mode_delay}}'
                milliseconds: 0
            - action: homeassistant.update_entity
              data:
                entity_id:
                - sensor.solax_rest_local_settings
            - delay:
                hours: 0
                minutes: 0
                seconds: '{{refresh_settings_delay}}'
                milliseconds: 0
            - if:
              - condition: template
                value_template: '{{repeat.index == loops}}'
              then:
              - event: Solax Zappi Octopus Control
                event_data:
                  message: Manual discharge failure @ {{now().strftime('%H:%M')}}.
                    Setting modes issue.
                  title: Manual Discharge Failure
                  class: high
                enabled: true
            until:
            - condition: template
              value_template: '{{ (state_attr(''sensor.solax_local_settings'', ''Data'')[10]
                == 3 and state_attr(''sensor.solax_local_settings'', ''Data'')[11]
                == 2) or repeat.index == loops }}'
        - event: Solax Zappi Octopus Control
          event_data:
            message: 'Attempting Discharge @ {{now().strftime(''%H:%M'')}}. '
            title: Battery Export Started
            class: normal
          enabled: true
        else:
        - event: Solax Zappi Octopus Control
          event_data:
            message: 'Cheap Rate @ {{now().strftime(''%H:%M'')}}. '
            title: Cheap Rate
            class: normal
          enabled: true
    - conditions:
      - condition: trigger
        id:
        - Peak Rate
      - condition: state
        entity_id: input_boolean.saving_session_active
        state: 'off'
      sequence:
      - repeat:
          sequence:
          - data:
              value: '{{default_mode}}'
            action: rest_command.solax_local_set_inverter_mode
          - delay:
              hours: 0
              minutes: 0
              seconds: '{{mode_delay}}'
              milliseconds: 0
          - action: homeassistant.update_entity
            data:
              entity_id:
              - sensor.solax_rest_local_settings
          - delay:
              hours: 0
              minutes: 0
              seconds: '{{refresh_settings_delay}}'
              milliseconds: 0
          until:
          - condition: template
            value_template: '{{ (state_attr(''sensor.solax_local_settings'', ''Data'')[10]
              == default_mode) or repeat.index == loops }}'
      - event: Solax Zappi Octopus Control
        event_data:
          message: Peak Rate @ {{now().strftime('%H:%M')}}
          title: Peak Rate
          class: normal
    - conditions:
      - condition: trigger
        id:
        - Battery at min SoC
      sequence:
      - event: Solax Zappi Octopus Control
        event_data:
          message: Battery close to min SoC {{now().strftime('%H:%M')}}. {{states('sensor.solax_local_battery_soc')}}%
          title: Battery Flat
          class: high
        enabled: true
    - conditions:
      - condition: trigger
        id:
        - Dispatch Finished
      - condition: numeric_state
        entity_id: sensor.octopus_total_planned_dispatch
        below: 1
      sequence:
      - action: switch.turn_off
        metadata: {}
        data: {}
        target:
          entity_id: switch.octopus_energy_z_ZZZZZZZZ_intelligent_smart_charge
      - if:
        - condition: state
          entity_id: input_boolean.zappi_eco_always
          state: 'on'
        then:
        - action: select.select_option
          metadata: {}
          data:
            option: Eco+
          target:
            entity_id: select.myenergi_zappi_XXXXXXXX_charge_mode
        else:
        - action: select.select_option
          metadata: {}
          data:
            option: Stopped
          target:
            entity_id: select.myenergi_zappi_XXXXXXXX_charge_mode
    - conditions:
      - condition: trigger
        id:
        - Zappi eco mode
      - condition: state
        entity_id: sensor.zappi_plug_status
        state: EV Connected
      sequence:
      - if:
        - condition: state
          entity_id: input_boolean.zappi_eco_always
          state: 'on'
        then:
        - action: select.select_option
          metadata: {}
          data:
            option: Eco+
          target:
            entity_id: select.myenergi_zappi_XXXXXXXX_charge_mode
        else:
        - action: select.select_option
          metadata: {}
          data:
            option: Stopped
          target:
            entity_id: select.myenergi_zappi_XXXXXXXX_charge_mode
    - conditions:
      - condition: state
        entity_id: sensor.solax_local_inverter_mode
        state: Manual
        for:
          hours: 0
          minutes: 2
          seconds: 0
      - condition: time
        after: '23:30:00'
        before: input_datetime.solax_battery_start_charge_time
        enabled: false
      - condition: or
        conditions:
        - condition: state
          entity_id: input_boolean.export_battery
          state: 'on'
        - condition: state
          entity_id: binary_sensor.solax_discharge_before_ev_charge
          state: 'on'
      sequence:
      - if:
        - condition: numeric_state
          entity_id: sensor.solax_local_battery_soc
          value_template: '{{ state.state | float(0)  - 14 }}'
          above: input_number.solax_manual_forced_discharge_limit_soc
        then:
        - event: Solax Zappi Octopus Control
          event_data:
            message: Manual discharge failure @ {{now().strftime('%H:%M')}}. Setting
              modes issue. Attempting to recover.
            title: Manual Discharge Failure
            class: high
          enabled: true
        - repeat:
            sequence:
            - data:
                value: 3
              action: rest_command.solax_local_set_inverter_mode
            - delay:
                hours: 0
                minutes: 0
                seconds: '{{mode_delay}}'
                milliseconds: 0
            - data:
                value: 2
              action: rest_command.solax_local_set_manual_mode_behaviour
            - delay:
                hours: 0
                minutes: 0
                seconds: '{{mode_delay}}'
                milliseconds: 0
            - action: homeassistant.update_entity
              data:
                entity_id:
                - sensor.solax_rest_local_settings
            - delay:
                hours: 0
                minutes: 0
                seconds: '{{refresh_settings_delay}}'
                milliseconds: 0
            - if:
              - condition: template
                value_template: '{{repeat.index == loops}}'
              then:
              - event: Solax Zappi Octopus Control
                event_data:
                  message: Manual discharge failure @ {{now().strftime('%H:%M')}}.
                    Setting modes issue.
                  title: Manual Discharge Failure
                  class: high
                enabled: true
            until:
            - condition: template
              value_template: '{{ (state_attr(''sensor.solax_local_settings'', ''Data'')[10]
                == 3 and state_attr(''sensor.solax_local_settings'', ''Data'')[11]
                == 2) or repeat.index == loops }}'
        else:
        - repeat:
            sequence:
            - data:
                value: '{{default_mode}}'
              action: rest_command.solax_local_set_inverter_mode
            - delay:
                hours: 0
                minutes: 0
                seconds: '{{mode_delay}}'
                milliseconds: 0
            - action: homeassistant.update_entity
              data:
                entity_id:
                - sensor.solax_rest_local_settings
            - delay:
                hours: 0
                minutes: 0
                seconds: '{{refresh_settings_delay}}'
                milliseconds: 0
            until:
            - condition: template
              value_template: '{{ (state_attr(''sensor.solax_local_settings'', ''Data'')[10]
                == default_mode) or repeat.index == loops }}'
    - conditions:
      - condition: trigger
        id:
        - Charge Solax
      - condition: template
        value_template: '{{ (state_attr(''sensor.solax_local_settings'', ''Data'')[10]|int
          !=  states(''sensor.solax_default_operation_mode'')|int) }}'
      - condition: state
        entity_id: input_boolean.saving_session_active
        state: 'off'
      sequence:
      - repeat:
          sequence:
          - data:
              value: '{{default_mode}}'
            action: rest_command.solax_local_set_inverter_mode
          - delay:
              hours: 0
              minutes: 0
              seconds: '{{mode_delay}}'
              milliseconds: 0
          - action: homeassistant.update_entity
            data:
              entity_id:
              - sensor.solax_rest_local_settings
          - delay:
              hours: 0
              minutes: 0
              seconds: '{{refresh_settings_delay}}'
              milliseconds: 0
          until:
          - condition: template
            value_template: '{{ (state_attr(''sensor.solax_local_settings'', ''Data'')[10]
              == default_mode) or repeat.index == loops }}'
    - conditions:
      - condition: trigger
        id:
        - Charge Period 2 End
      - condition: state
        entity_id: input_boolean.saving_session_active
        state: 'off'
      - condition: template
        value_template: '{{states(''sensor.solax_local_battery_chd2_enabled'')|bool==true}}'
      sequence:
      - data:
          enabled: '{{ 0 }}

            '
        action: rest_command.solax_local_set_period2_enable
      - delay:
          hours: 0
          minutes: 0
          seconds: '{{refresh_settings_delay}}'
          milliseconds: 0
    enabled: true
  - action: input_boolean.turn_off
    metadata: {}
    data: {}
    target:
      entity_id: input_boolean.solax_automation_running
    enabled: true
  trace:
    stored_traces: 20
  mode: queued
  max: 3

- id: '5002'
  alias: 5002 - Solax Reset Mode After Manual Discharge
  description: "# 5002 - Solax Reset Mode After Manual Discharge\nAfter a force/regular
    discharge set the mode back to default mode when the SoC threshold is met. In
    a free Electric discharge, feed in priority is used to prevent the battery filling
    if it's sunny. After free electric session is done default mode is returned. \n\n#
    Initial installation instructions\n1. This is 5002 only. You also need 5001 5003
    5004 and 5005. \n2. replace z_ZZZZZZZZ with your Octopus Account Number\n3. Copy
    and Paste into your automations.yaml\n\n# Change log v3.5 variable for loops\nv3.3
    Added condition to check if saving session is in progress\nv3.3  Added a validity
    check on which SoC is highest for the discharge before ev charge as it is critical
    that an event is triggered in this option to initialise EV charging.\nv3.2  Add
    a condition to check if export prior and manual export button press.\nv3.0.0 Set
    an event to trigger EV charging if binary_sensor.\nSolax Discharge Before EV Charge
    is on to off\nv2.1.4 Renamed automation\nv2.1.0 - Changes to limits to catch the
    battery closer to the required threshold set by user\nv2.0.0 -productionisation\n"
  triggers:
  - trigger: template
    value_template: "{%set highestSoC = states('sensor.solax_local_feed_in_battery_min_soc')|int
      (default=15),\n                   states('sensor.solax_local_selfuse_battery_min_soc')|int
      (default=15),\n                   states('input_number.solax_discharge_limit_soc_before_ev')|int\n%}\n{{
      states('sensor.solax_local_battery_soc')|int < highestSoC|max+3 }}\n"
    for:
      hours: 0
      minutes: 1
      seconds: 1
    id: Normal Stop Discharge Prior
  - entity_id:
    - sensor.solax_local_battery_soc
    below: input_number.solax_manual_forced_discharge_limit_soc
    for:
      hours: 0
      minutes: 1
      seconds: 1
    id: Normal Stop Discharge
    trigger: numeric_state
    value_template: '{{ state.state | float(0)  - 3 }}'
  - entity_id:
    - sensor.solax_local_battery_soc
    below: input_number.octopus_free_session_battery_prep_soc
    for:
      hours: 0
      minutes: 1
      seconds: 1
    id: FreeElectric
    trigger: numeric_state
    value_template: '{{ state.state | float(0)  - 3 }}'
  - entity_id:
    - sensor.solax_local_battery_soc
    below: input_number.octopus_saving_session_target_battery_soc
    for:
      hours: 0
      minutes: 1
      seconds: 1
    id: Saving Session Stop Discharge
    trigger: numeric_state
    value_template: '{{ state.state | float(0)  - 3 }}'
  conditions:
  - condition: template
    value_template: '{{ (states(''sensor.solax_local_inverter_mode'') == ''Manual'')|bool==true}}'
  actions:
  - action: input_boolean.turn_on
    metadata: {}
    data: {}
    target:
      entity_id: input_boolean.solax_automation_running
  - variables:
      default_mode: '{{states(''sensor.solax_default_operation_mode'')|int(default=0)}}'
      mode_delay: 30
      settings_delay: 5
      refresh_settings_delay: 5
      loops: 5
  - choose:
    - conditions:
      - condition: trigger
        id:
        - Normal Stop Discharge Prior
      - condition: state
        entity_id: input_boolean.export_battery_prior
        state: 'on'
      - condition: state
        entity_id: input_boolean.saving_session_active
        state: 'off'
      sequence:
      - repeat:
          sequence:
          - data:
              value: 0
            action: rest_command.solax_local_set_manual_mode_behaviour
          - delay:
              hours: 0
              minutes: 0
              seconds: '{{mode_delay}}'
              milliseconds: 0
          - data:
              value: '{{default_mode}}'
            action: rest_command.solax_local_set_inverter_mode
          - delay:
              hours: 0
              minutes: 0
              seconds: '{{mode_delay}}'
              milliseconds: 0
          - action: homeassistant.update_entity
            data:
              entity_id:
              - sensor.solax_rest_local_settings
          - delay:
              hours: 0
              minutes: 0
              seconds: '{{refresh_settings_delay}}'
              milliseconds: 0
          until:
          - condition: template
            value_template: '{{ (state_attr(''sensor.solax_local_settings'', ''Data'')[10]
              == default_mode) or repeat.index == loops }}'
      - event: Solax Zappi Octopus Control
        event_data:
          message: 'Discharge finished @ {{now().strftime(''%H:%M'')}}. '
          title: Battery Export Finished
          class: normal
        enabled: true
      - delay:
          hours: 0
          minutes: 1
          seconds: 0
      - event: solax_discharge
        event_data:
          battery_discharge: do nothing
        enabled: true
    - conditions:
      - condition: trigger
        id:
        - Normal Stop Discharge
      - condition: state
        entity_id: input_boolean.saving_session_active
        state: 'off'
      - condition: or
        conditions:
        - condition: time
          after: '23:30:00'
          before: input_datetime.solax_battery_start_charge_time
          enabled: true
        - condition: state
          entity_id: binary_sensor.solax_discharge_before_ev_charge
          state: 'off'
        - condition: state
          entity_id: input_boolean.export_battery_manual
          state: 'on'
      sequence:
      - repeat:
          sequence:
          - data:
              value: 0
            action: rest_command.solax_local_set_manual_mode_behaviour
          - delay:
              hours: 0
              minutes: 0
              seconds: '{{mode_delay}}'
              milliseconds: 0
          - data:
              value: '{{default_mode}}'
            action: rest_command.solax_local_set_inverter_mode
          - delay:
              hours: 0
              minutes: 0
              seconds: '{{mode_delay}}'
              milliseconds: 0
          - action: homeassistant.update_entity
            data:
              entity_id:
              - sensor.solax_rest_local_settings
          - delay:
              hours: 0
              minutes: 0
              seconds: '{{refresh_settings_delay}}'
              milliseconds: 0
          until:
          - condition: template
            value_template: '{{ (state_attr(''sensor.solax_local_settings'', ''Data'')[10]
              == default_mode) or repeat.index == loops }}'
      - event: Solax Zappi Octopus Control
        event_data:
          message: 'Discharge finished @ {{now().strftime(''%H:%M'')}}. '
          title: Battery Export Finished
          class: normal
        enabled: true
      - action: input_boolean.turn_off
        metadata: {}
        data: {}
        target:
          entity_id: input_boolean.export_battery_manual
    - conditions:
      - condition: trigger
        id:
        - FreeElectric
      - condition: state
        entity_id: binary_sensor.octopus_energy_z_ZZZZZZZZ_intelligent_dispatching
        state: 'off'
      - condition: state
        entity_id: binary_sensor.free_electricity_today
        state: 'on'
      - condition: time
        after: input_datetime.octopus_free_electricity_prep
        before: '23:00:00'
      sequence:
      - repeat:
          sequence:
          - data:
              value: 0
            action: rest_command.solax_local_set_manual_mode_behaviour
          - delay:
              hours: 0
              minutes: 0
              seconds: '{{mode_delay}}'
              milliseconds: 0
          - data:
              value: '{{1}}'
            action: rest_command.solax_local_set_inverter_mode
          - delay:
              hours: 0
              minutes: 0
              seconds: '{{mode_delay}}'
              milliseconds: 0
          - action: homeassistant.update_entity
            data:
              entity_id:
              - sensor.solax_rest_local_settings
          - delay:
              hours: 0
              minutes: 0
              seconds: '{{refresh_settings_delay}}'
              milliseconds: 0
          until:
          - condition: template
            value_template: '{{ (state_attr(''sensor.solax_local_settings'', ''Data'')[10]
              == default_mode) or repeat.index == loops }}'
      - event: Solax Zappi Octopus Control
        event_data:
          message: 'Discharge finished @ {{now().strftime(''%H:%M'')}}. '
          title: Free Electric Battery Export Prep
          class: normal
        enabled: true
    - conditions:
      - condition: trigger
        id:
        - Saving Session Stop Discharge
      - condition: time
        after: 05:30:00
        before: '23:30:00'
      - condition: time
        after: input_datetime.saving_session_start
      - condition: or
        conditions:
        - condition: state
          entity_id: input_boolean.octopus_saving_session_manual
          state: 'on'
        - condition: state
          entity_id: input_select.saving_session_today
          state: 'yes'
      sequence:
      - repeat:
          sequence:
          - data:
              value: 0
            action: rest_command.solax_local_set_manual_mode_behaviour
          - delay:
              hours: 0
              minutes: 0
              seconds: '{{mode_delay}}'
              milliseconds: 0
          - data:
              value: '{{default_mode}}'
            action: rest_command.solax_local_set_inverter_mode
          - delay:
              hours: 0
              minutes: 0
              seconds: '{{mode_delay}}'
              milliseconds: 0
          - action: homeassistant.update_entity
            data:
              entity_id:
              - sensor.solax_rest_local_settings
          - delay:
              hours: 0
              minutes: 0
              seconds: '{{refresh_settings_delay}}'
              milliseconds: 0
          until:
          - condition: template
            value_template: '{{ (state_attr(''sensor.solax_local_settings'', ''Data'')[10]
              == default_mode) or repeat.index == loops }}'
      - event: Solax Zappi Octopus Control
        event_data:
          message: 'Discharge finished @ {{now().strftime(''%H:%M'')}}. '
          title: Saving Session Battery Exported
          class: normal
        enabled: true
  - action: input_boolean.turn_off
    metadata: {}
    data: {}
    target:
      entity_id: input_boolean.solax_automation_running
  trace:
    stored_traces: 20
  mode: queued
  max: 3

- id: '5003'
  alias: 5003 - Solax Set UI Options
  description: "Populate UI with Solax Settings\n\n# AUTOMATION 5003 \n1. This is
    5003 only. You need 5001 5002 5004 and 5005.\n2. Copy and Paste into your automations.yaml\n\n#
    Change log\nv3.2 Added Battery Heat Level - 0 to heat only when below freezing,
    1 to heat when below 10 degrees, 2 to heat when below 20 degrees. see https://solaxpowerservice.zendesk.com/hc/en-001/articles/12334533938191-What-is-the-meaning-of-heating-level-in-my-inverter-settings\nv3.1
    Added system on/off\nv2.1.4 Renamed automation\nv2.1.0 \n*Allow queued runs so
    UI looks a bit more seemless when updating the inverter settings\n*Added battery
    warmer controls\nV2.0 Revamp\nv1.0 Initial"
  triggers:
  - entity_id:
    - input_number.solax_feed_in_battery_min_soc
    id: Set Feed in Min SoC
    trigger: state
    for:
      hours: 0
      minutes: 0
      seconds: 10
  - entity_id:
    - input_number.solax_selfuse_battery_min_soc
    id: Solax Self Use Min SoC
    trigger: state
    for:
      hours: 0
      minutes: 0
      seconds: 10
  - entity_id:
    - input_number.solax_feed_in_charge_to_soc
    id: Set Feed in Charge to SoC
    trigger: state
    for:
      hours: 0
      minutes: 0
      seconds: 10
  - entity_id:
    - input_number.solax_selfuse_charge_to_soc
    id: Solax Self Use Charge to SoC
    trigger: state
    for:
      hours: 0
      minutes: 0
      seconds: 10
  - entity_id:
    - input_boolean.self_use_enable_charge_from_grid
    id: Set Self Use Charge From Grid
    trigger: state
    for:
      hours: 0
      minutes: 0
      seconds: 10
  - entity_id:
    - input_select.solax_manual_modes
    id: Set Manual Mode
    trigger: state
    for:
      hours: 0
      minutes: 0
      seconds: 10
  - entity_id:
    - input_select.solax_work_mode
    id: Set Work Mode
    trigger: state
    for:
      hours: 0
      minutes: 0
      seconds: 10
  - entity_id:
    - input_boolean.solaxchargeperiod2
    id: Chargeperiod2
    trigger: state
    for:
      hours: 0
      minutes: 0
      seconds: 10
  - trigger: state
    entity_id:
    - input_datetime.solax_start_charge_2
    id: Charge Period 2 Start
    for:
      hours: 0
      minutes: 0
      seconds: 10
  - trigger: state
    entity_id:
    - input_datetime.solax_stop_charge_2
    id: Charge Period 2 Stop
    for:
      hours: 0
      minutes: 0
      seconds: 10
  - trigger: state
    entity_id:
    - input_datetime.solax_battery_start_charge_time
    id: Solax Battery Start Charge Time
    for:
      hours: 0
      minutes: 0
      seconds: 10
  - trigger: state
    entity_id:
    - input_datetime.solax_battery_stop_charge_time
    id: Solax Battery Stop Charge Time
    for:
      hours: 0
      minutes: 0
      seconds: 10
  - trigger: state
    entity_id:
    - input_datetime.solax_battery_start_discharge_time
    id: Solax Battery Start Discharge Time
    for:
      hours: 0
      minutes: 0
      seconds: 10
  - trigger: state
    entity_id:
    - input_datetime.solax_battery_stop_discharge_time
    id: Solax Battery Stop Discharge Time
    for:
      hours: 0
      minutes: 0
      seconds: 10
  - entity_id:
    - input_boolean.battery_heat_enable
    id: heat enable
    trigger: state
    for:
      hours: 0
      minutes: 0
      seconds: 10
  - trigger: state
    entity_id:
    - input_datetime.solax_battery_start_heat_time
    id: Heat Period Start
    for:
      hours: 0
      minutes: 0
      seconds: 10
  - trigger: state
    entity_id:
    - input_datetime.solax_battery_stop_heat_time
    id: Heat Period Stop
    for:
      hours: 0
      minutes: 0
      seconds: 10
  - trigger: state
    entity_id:
    - input_datetime.solax_start_heat_2
    id: Heat Period Start 2
    for:
      hours: 0
      minutes: 0
      seconds: 10
  - trigger: state
    entity_id:
    - input_datetime.solax_stop_heat_2
    id: Heat Period Stop 2
    for:
      hours: 0
      minutes: 0
      seconds: 10
  - trigger: state
    entity_id:
    - input_boolean.solax_system_enable
    id: Solax On Off
    for:
      hours: 0
      minutes: 0
      seconds: 10
  - trigger: state
    entity_id:
    - input_select.solax_battery_heat_level
    for:
      hours: 0
      minutes: 0
      seconds: 10
    id: Battery Heat Level
  conditions:
  - condition: state
    entity_id: input_boolean.solax_automation_running
    state: 'off'
  actions:
  - action: input_boolean.turn_on
    metadata: {}
    data: {}
    target:
      entity_id: input_boolean.solax_automation_running
  - choose:
    - conditions:
      - condition: trigger
        id:
        - Set Feed in Min SoC
      sequence:
      - data:
          level: '{{states(''input_number.solax_feed_in_battery_min_soc'')}}'
        action: rest_command.solax_local_set_feedin_battery_min_soc
    - conditions:
      - condition: trigger
        id:
        - Solax Self Use Min SoC
      sequence:
      - data:
          level: '{{states(''input_number.solax_selfuse_battery_min_soc'')}}'
        action: rest_command.solax_local_set_selfuse_battery_min_soc
    - conditions:
      - condition: trigger
        id:
        - Set Feed in Charge to SoC
      sequence:
      - data:
          level: '{{states(''input_number.solax_feed_in_charge_to_soc'')}}'
        action: rest_command.solax_local_set_feedin_charge_battery_from_grid
    - conditions:
      - condition: trigger
        id:
        - Solax Self Use Charge to SoC
      sequence:
      - data:
          level: '{{states(''input_number.solax_selfuse_charge_to_soc'')}}'
        action: rest_command.solax_local_set_charge_battery_from_grid
    - conditions:
      - condition: trigger
        id:
        - Set Self Use Charge From Grid
      sequence:
      - action: rest_command.solax_local_set_selfuse_charge_from_grid_enable
        data:
          enabled: '{% if states(''input_boolean.self_use_enable_charge_from_grid'')
            == ''on'' %}{{1}}{% else%}{{0}}{% endif%}'
      - delay:
          hours: 0
          minutes: 0
          seconds: 5
          milliseconds: 0
      - action: rest_command.solax_local_set_forced_charge_start
        data:
          value: '{% set end_time = as_datetime(state_attr(''input_datetime.solax_battery_start_charge_time'',
            ''timestamp'') - 0) %}{{ end_time.hour + end_time.minute * 256 }}'
      - delay:
          hours: 0
          minutes: 0
          seconds: 5
          milliseconds: 0
      - action: rest_command.solax_local_set_forced_charge_stop
        data:
          value: '{% set end_time = as_datetime(state_attr(''input_datetime.solax_battery_stop_charge_time'',
            ''timestamp'') - 0) %}{{ end_time.hour + end_time.minute * 256 }}'
    - conditions:
      - condition: trigger
        id:
        - Set Manual Mode
      sequence:
      - data:
          value: '{{state_attr(trigger.entity_id,''options'').index(states(trigger.entity_id))}}'
        action: rest_command.solax_local_set_manual_mode_behaviour
    - conditions:
      - condition: trigger
        id:
        - Set Work Mode
      sequence:
      - if:
        - condition: template
          value_template: '{{state_attr(trigger.entity_id,''options'').index(states(trigger.entity_id))==0

            or

            state_attr(trigger.entity_id,''options'').index(states(trigger.entity_id))==1

            or

            state_attr(trigger.entity_id,''options'').index(states(trigger.entity_id))==3

            }}'
        then:
        - data:
            value: '{{state_attr(trigger.entity_id,''options'').index(states(trigger.entity_id))}}'
          action: rest_command.solax_local_set_inverter_mode
      - if:
        - condition: template
          value_template: '{{state_attr(trigger.entity_id,''options'').index(states(trigger.entity_id))==1}}'
        then:
        - action: input_number.set_value
          metadata: {}
          data:
            value: 1
          target:
            entity_id: input_number.solax_default_operation_mode
          enabled: false
        - action: input_select.select_option
          metadata: {}
          data:
            option: Feed In Priority
          target:
            entity_id: input_select.solax_default_mode
        enabled: false
      - if:
        - condition: template
          value_template: '{{state_attr(trigger.entity_id,''options'').index(states(trigger.entity_id))==0}}'
        then:
        - action: input_number.set_value
          metadata: {}
          data:
            value: 0
          target:
            entity_id: input_number.solax_default_operation_mode
          enabled: false
        - action: input_select.select_option
          metadata: {}
          data:
            option: Self Use
          target:
            entity_id: input_select.solax_default_mode
        enabled: false
    - conditions:
      - condition: trigger
        id:
        - Chargeperiod2
      sequence:
      - action: rest_command.solax_local_set_period2_enable
        data:
          enabled: '{% if states(''input_boolean.solaxchargeperiod2'') == ''on'' %}{{1}}{%
            else%}{{0}}{% endif%}'
      - delay:
          hours: 0
          minutes: 0
          seconds: 5
          milliseconds: 0
      - action: rest_command.solax_local_set_forced_charge_stop2
        data:
          value: '{% set end_time = as_datetime(state_attr(''input_datetime.solax_stop_charge_2'',
            ''timestamp'') - 0) %}{{ end_time.hour + end_time.minute * 256 }}'
      - delay:
          hours: 0
          minutes: 0
          seconds: 5
          milliseconds: 0
      - action: rest_command.solax_local_set_forced_charge_start2
        data:
          value: '{% set end_time = as_datetime(state_attr(''input_datetime.solax_start_charge_2'',
            ''timestamp'') - 0) %}{{ end_time.hour + end_time.minute * 256 }}'
      - delay:
          hours: 0
          minutes: 0
          seconds: 5
          milliseconds: 0
        enabled: true
    - conditions:
      - condition: trigger
        id:
        - Charge Period 2 Start
      sequence:
      - action: rest_command.solax_local_set_forced_charge_start2
        data:
          value: '{% set end_time = as_datetime(state_attr(''input_datetime.solax_start_charge_2'',
            ''timestamp'') - 0) %}{{ end_time.hour + end_time.minute * 256 }}'
    - conditions:
      - condition: trigger
        id:
        - Charge Period 2 Stop
      sequence:
      - action: rest_command.solax_local_set_forced_charge_stop2
        data:
          value: '{% set end_time = as_datetime(state_attr(''input_datetime.solax_stop_charge_2'',
            ''timestamp'') - 0) %}{{ end_time.hour + end_time.minute * 256 }}'
    - conditions:
      - condition: trigger
        id:
        - Solax Battery Start Charge Time
      sequence:
      - action: rest_command.solax_local_set_forced_charge_start
        data:
          value: '{% set end_time = as_datetime(state_attr(''input_datetime.solax_battery_start_charge_time'',
            ''timestamp'') - 0) %}{{ end_time.hour + end_time.minute * 256 }}'
    - conditions:
      - condition: trigger
        id:
        - Solax Battery Stop Charge Time
      sequence:
      - action: rest_command.solax_local_set_forced_charge_stop
        data:
          value: '{% set end_time = as_datetime(state_attr(''input_datetime.solax_battery_stop_charge_time'',
            ''timestamp'') - 0) %}{{ end_time.hour + end_time.minute * 256 }}'
    - conditions:
      - condition: trigger
        id:
        - Solax Battery Start Discharge Time
      sequence:
      - action: rest_command.solax_local_set_allowed_discharge_start
        data:
          value: '{% set end_time = as_datetime(state_attr(''input_datetime.solax_battery_start_discharge_time'',
            ''timestamp'') - 0) %}{{ end_time.hour + end_time.minute * 256 }}'
    - conditions:
      - condition: trigger
        id:
        - Solax Battery Stop Discharge Time
      sequence:
      - action: rest_command.solax_local_set_allowed_discharge_end
        data:
          value: '{% set end_time = as_datetime(state_attr(''input_datetime.solax_battery_stop_discharge_time'',
            ''timestamp'') -0) %}{{ end_time.hour + end_time.minute * 256 }}'
    - conditions:
      - condition: trigger
        id:
        - heat enable
      sequence:
      - if:
        - condition: state
          entity_id: input_boolean.battery_heat_enable
          state: 'off'
        then:
        - action: rest_command.solax_local_set_heat_start
          data:
            value: '{{ 0 }}'
          enabled: true
        - delay:
            hours: 0
            minutes: 0
            seconds: 5
            milliseconds: 0
          enabled: true
        - action: rest_command.solax_local_set_heat_stop
          data:
            value: '{{ 0 }}'
          enabled: true
        - delay:
            hours: 0
            minutes: 0
            seconds: 5
            milliseconds: 0
          enabled: true
        - action: rest_command.solax_local_set_heat_start2
          data:
            value: '{{ 0 }}'
          enabled: true
        - delay:
            hours: 0
            minutes: 0
            seconds: 5
            milliseconds: 0
          enabled: true
        - action: rest_command.solax_local_set_heat_stop2
          data:
            value: '{{ 0 }}'
          enabled: true
        - delay:
            hours: 0
            minutes: 0
            seconds: 5
            milliseconds: 0
          enabled: true
        - action: rest_command.solax_local_heat_enable
          data:
            enabled: '{% if states(''input_boolean.battery_heat_enable'') == ''on''
              %}{{1}}{% else%}{{0}}{% endif%}'
        - delay:
            hours: 0
            minutes: 0
            seconds: 5
            milliseconds: 0
        else:
        - action: rest_command.solax_local_heat_enable
          data:
            enabled: '{% if states(''input_boolean.battery_heat_enable'') == ''on''
              %}{{1}}{% else%}{{0}}{% endif%}'
        - delay:
            hours: 0
            minutes: 0
            seconds: 5
            milliseconds: 0
    - conditions:
      - condition: trigger
        id:
        - Heat Period Start
      sequence:
      - action: rest_command.solax_local_set_heat_start
        data:
          value: '{% set end_time = as_datetime(state_attr(''input_datetime.solax_battery_start_heat_time'',
            ''timestamp'') - 0) %}{{ end_time.hour + end_time.minute * 256 }}'
    - conditions:
      - condition: trigger
        id:
        - Heat Period Stop
      sequence:
      - action: rest_command.solax_local_set_heat_stop
        data:
          value: '{% set end_time = as_datetime(state_attr(''input_datetime.solax_battery_stop_heat_time'',
            ''timestamp'') - 0) %}{{ end_time.hour + end_time.minute * 256 }}'
    - conditions:
      - condition: trigger
        id:
        - Heat Period Start 2
      sequence:
      - action: rest_command.solax_local_set_heat_start2
        data:
          value: '{% set end_time = as_datetime(state_attr(''input_datetime.solax_start_heat_2'',
            ''timestamp'') - 0) %}{{ end_time.hour + end_time.minute * 256 }}'
    - conditions:
      - condition: trigger
        id:
        - Heat Period Stop 2
      sequence:
      - action: rest_command.solax_local_set_heat_stop2
        data:
          value: '{% set end_time = as_datetime(state_attr(''input_datetime.solax_stop_heat_2'',
            ''timestamp'') - 0) %}{{ end_time.hour + end_time.minute * 256 }}'
    - conditions:
      - condition: trigger
        id:
        - Solax On Off
      sequence:
      - action: rest_command.solax_local_set_system_state
        data:
          enabled: '{% if states(''input_boolean.solax_system_enable'') == ''on''
            %}{{1}}{% else%}{{0}}{% endif%}'
    - conditions:
      - condition: trigger
        id:
        - Battery Heat Level
      sequence:
      - data:
          value: '{{states(''input_select.solax_battery_heat_level'')}}'
        action: rest_command.solax_local_set_battery_heat_level
  - delay:
      hours: 0
      minutes: 0
      seconds: 5
      milliseconds: 0
    enabled: true
  - action: input_boolean.turn_off
    metadata: {}
    data: {}
    target:
      entity_id: input_boolean.solax_automation_running
  mode: queued
  max: 9

- id: '5004'
  alias: 5004 - Solax Reload Settings
  description: "Populate UI with Solax Settings \n\n# AUTOMATION 5004\n 1. This is
    5004 only. You also need 5001 5002 5003 and 5005. \n 2. Paste into your automations.yaml\n\n#
    Change log\nv3.1 Added system on/off\n v2.1.4 Renamed automation\n v2.1 Battery
    Warmer\n v2.0 Revamp\n"
  triggers:
  - trigger: time_pattern
    minutes: /12
  - trigger: state
    entity_id:
    - input_boolean.solax_automation_running
    from: 'on'
    to: 'off'
    enabled: true
    for:
      hours: 0
      minutes: 0
      seconds: 10
  - entity_id:
    - input_button.refresh
    trigger: state
  conditions:
  - condition: state
    entity_id: input_boolean.solax_automation_running
    state: 'off'
  actions:
  - variables:
      mode_delay: 15
      settings_delay: 10
      refresh_settings_delay: 10
  - action: automation.turn_off
    metadata: {}
    data:
      stop_actions: true
    target:
      entity_id: automation.solax_set_ui_options
  - delay:
      hours: 0
      minutes: 0
      seconds: 1
      milliseconds: 0
  - action: homeassistant.update_entity
    data:
      entity_id:
      - sensor.solax_rest_local_settings
  - delay:
      hours: 0
      minutes: 0
      seconds: '{{refresh_settings_delay}}'
  - metadata: {}
    data:
      option: '{{states(''sensor.solax_local_inverter_mode'')}}'
    target:
      entity_id: input_select.solax_work_mode
    action: input_select.select_option
  - metadata: {}
    data:
      option: '{{states(''sensor.solax_local_manual_mode_behaviour'')}}'
    target:
      entity_id: input_select.solax_manual_modes
    action: input_select.select_option
  - metadata: {}
    data:
      value: '{{states(''sensor.solax_local_feed_in_battery_min_soc'')|int}}'
    target:
      entity_id: input_number.solax_feed_in_battery_min_soc
    action: input_number.set_value
  - metadata: {}
    data:
      value: '{{states(''sensor.solax_local_feed_in_battery_charge_from_grid_to'')|int}}'
    target:
      entity_id: input_number.solax_feed_in_charge_to_soc
    action: input_number.set_value
  - metadata: {}
    data:
      value: '{{states(''sensor.solax_local_selfuse_battery_chrg_frm_grd_to'')|int}}'
    target:
      entity_id: input_number.solax_selfuse_charge_to_soc
    action: input_number.set_value
    enabled: true
  - metadata: {}
    data:
      value: '{{states(''sensor.solax_local_selfuse_battery_min_soc'')|int}}'
    target:
      entity_id: input_number.solax_selfuse_battery_min_soc
    action: input_number.set_value
    enabled: true
  - if:
    - condition: template
      value_template: '{{states(''sensor.solax_local_battery_chd2_enabled'')|bool==true}}'
    then:
    - action: input_boolean.turn_on
      target:
        entity_id: input_boolean.solaxchargeperiod2
      data: {}
  - if:
    - condition: template
      value_template: '{{states(''sensor.solax_local_battery_chd2_enabled'')|bool==false}}'
    then:
    - action: input_boolean.turn_off
      target:
        entity_id:
        - input_boolean.solaxchargeperiod2
      data: {}
  - if:
    - condition: state
      entity_id: sensor.solax_local_self_use_battery_charge_from_grid
      state: '1'
    then:
    - action: input_boolean.turn_on
      target:
        entity_id: input_boolean.self_use_enable_charge_from_grid
      data: {}
  - if:
    - condition: state
      entity_id: sensor.solax_local_self_use_battery_charge_from_grid
      state: '0'
    then:
    - action: input_boolean.turn_off
      target:
        entity_id:
        - input_boolean.self_use_enable_charge_from_grid
      data: {}
  - action: input_datetime.set_datetime
    metadata: {}
    data:
      time: '{{states(''sensor.solax_local_battery_setting_start_charge'')}}'
    target:
      entity_id: input_datetime.solax_battery_start_charge_time
  - action: input_datetime.set_datetime
    metadata: {}
    data:
      time: '{{states(''sensor.solax_local_battery_setting_stop_charge'')}}'
    target:
      entity_id: input_datetime.solax_battery_stop_charge_time
  - action: input_datetime.set_datetime
    metadata: {}
    data:
      time: '{{states(''sensor.solax_local_battery_setting_start_discharge'')}}'
    target:
      entity_id: input_datetime.solax_battery_start_discharge_time
  - action: input_datetime.set_datetime
    metadata: {}
    data:
      time: '{{states(''sensor.solax_local_battery_setting_stop_discharge'')}}'
    target:
      entity_id: input_datetime.solax_battery_stop_discharge_time
  - action: input_datetime.set_datetime
    metadata: {}
    data:
      time: '{{states(''sensor.solax_local_battery_setting_start_charge_2'')}}'
    target:
      entity_id: input_datetime.solax_start_charge_2
  - action: input_datetime.set_datetime
    metadata: {}
    data:
      time: '{{states(''sensor.solax_local_battery_setting_stop_charge_2'')}}'
    target:
      entity_id: input_datetime.solax_stop_charge_2
  - if:
    - condition: state
      entity_id: sensor.solax_local_battery_heat_enabled
      state: 'True'
    then:
    - action: input_boolean.turn_on
      target:
        entity_id: input_boolean.battery_heat_enable
      data: {}
    else:
    - action: input_boolean.turn_off
      target:
        entity_id:
        - input_boolean.battery_heat_enable
      data: {}
  - action: input_datetime.set_datetime
    metadata: {}
    data:
      time: '{{states(''sensor.solax_local_battery_heat_start'')}}'
    target:
      entity_id: input_datetime.solax_battery_start_heat_time
  - action: input_datetime.set_datetime
    metadata: {}
    data:
      time: '{{states(''sensor.solax_local_battery_heat_stop'')}}'
    target:
      entity_id: input_datetime.solax_battery_stop_heat_time
  - action: input_datetime.set_datetime
    metadata: {}
    data:
      time: '{{states(''sensor.solax_local_battery_heat_start_2'')}}'
    target:
      entity_id: input_datetime.solax_start_heat_2
  - action: input_datetime.set_datetime
    metadata: {}
    data:
      time: '{{states(''sensor.solax_local_battery_heat_stop_2'')}}'
    target:
      entity_id: input_datetime.solax_stop_heat_2
  - if:
    - condition: state
      entity_id: sensor.solax_local_system_state
      state: 'True'
    then:
    - action: input_boolean.turn_on
      target:
        entity_id:
        - input_boolean.solax_system_enable
      data: {}
  - if:
    - condition: state
      entity_id: sensor.solax_local_system_state
      state: 'False'
    then:
    - action: input_boolean.turn_off
      target:
        entity_id:
        - input_boolean.solax_system_enable
      data: {}
  - metadata: {}
    data:
      option: '{{states(''sensor.solax_local_battery_heat_level'')}}'
    target:
      entity_id: input_select.solax_battery_heat_level
    action: input_select.select_option
  - delay:
      hours: 0
      minutes: 0
      seconds: 1
      milliseconds: 0
  - action: automation.turn_on
    metadata: {}
    data: {}
    target:
      entity_id: automation.solax_set_ui_options
  trace:
    stored_traces: 20
  mode: single

- id: '5005'
  alias: 5005 - Solax Zappi Octopus Control - Notifier
  description: '# 5005 - Solax Zappi Octopus Control - Notifier

    Allows for notification of activity such as EV Connected, EV charging started,
    amount Octopus will dispatch, Solax battery forced discharge events etc


    # Initial installation instructions

    1. Copy to your automations.yaml and reload yaml from developer tools


    # Change Log

    v3.1 Better notification management

    v2.2 Added Alert Exclusions

    v2.1.4 Renamed automation

    v2.1.3 Simplications

    v2.0 Initial production release

    v1.0 Initial'
  triggers:
  - trigger: event
    event_type: Solax Zappi Octopus Control
    event_data:
      class: normal
    id: Normal
  - trigger: event
    event_type: Solax Zappi Octopus Control
    event_data:
      class: high
    id: High
  conditions: []
  actions:
  - choose:
    - conditions:
      - condition: trigger
        id:
        - High
      - condition: or
        conditions:
        - condition: state
          entity_id: input_boolean.solax_zappi_octopus_control_notifications
          state: 'off'
        - condition: state
          entity_id: input_boolean.nofify_mobile
          state: 'off'
      sequence:
      - action: persistent_notification.create
        data:
          title: '{{trigger.event.data.title}}'
          message: '{{trigger.event.data.message}}'
      - if:
        - condition: template
          value_template: '{{states(''input_text.mobile_device_selected'') != ''None
            Selected''}}'
        then:
        - repeat:
            for_each: '{{state_attr(''sensor.solax_zappi_octopus_devices_to_notify'',
              ''mobile_devices'') | map(attribute=''device'') | reject(''match'',"
              ")|list}}

              '
            sequence:
            - action: notify.{{repeat.item}}
              metadata: {}
              data:
                title: '{{trigger.event.data.title}}'
                message: '{{trigger.event.data.message}}'
    - conditions:
      - condition: or
        conditions:
        - condition: trigger
          id:
          - Normal
        - condition: trigger
          id:
          - High
      - condition: state
        entity_id: input_boolean.solax_zappi_octopus_control_notifications
        state: 'on'
      sequence:
      - if:
        - condition: template
          value_template: '{{trigger.event.data.title not in state_attr(''sensor.solax_zappi_octopus_notification_to_exclude'',''notification_list'')
            | map(attribute=''notification'') | list}}'
        then:
        - action: persistent_notification.create
          data:
            title: '{{trigger.event.data.title}}'
            message: '{{trigger.event.data.message}}'
        - if:
          - condition: template
            value_template: '{{states(''input_text.mobile_device_selected'') != ''None
              Selected''}}'
          then:
          - repeat:
              for_each: '{{state_attr(''sensor.solax_zappi_octopus_devices_to_notify'',
                ''mobile_devices'') | map(attribute=''device'') | reject(''match'',"
                ")|list}}

                '
              sequence:
              - action: notify.{{repeat.item}}
                metadata: {}
                data:
                  title: '{{trigger.event.data.title}}'
                  message: '{{trigger.event.data.message}}'
  mode: queued
  max: 10

- id: '6001'
  alias: 6001 - Octopus - Free Electric Automation
  description: "# 6001 - Automation to get the most from Octopus Free Electric Sessions\n\n#
    Initial config instructions\n1. Find and replace:\nzappi_XXXXXXXX with your zappi
    number, \nz_ZZZZZZZZ with Octopus account\n2. Paste into your automations.yaml\n\n#
    Change log\nv2.1.4 Renamed automation\nv2.1 - Removed legacy dev work and fix
    bug with charge period 2\nv2.0 - Productionise\nv1.1 - Initial\n\n\n# Overview\nOctopus
    offer free electric sessions in the summer.\nThis automation allows you to automatically
    charge the solax battery and also sets the zappi to fast mode. \nTo prepare for
    the free electricity, options are provided to export the house battery to benefit
    from export rates and to give headroom to charge from the grid for free in the
    session. You can set a time and export threshold. However beware that on a sunny
    day you may already be at the inverters limit so won't be able to discharge the
    battery so you have to balance the time at which you discharge and the battery
    SoC level for which you need to last the day before the free session. To prevent
    the battery filling the inverter mode is set to feed in priority and will return
    to your default mode after the free electric session. If export rates become unfavourable
    you can use the target battery SoC as the charge to if you allow charging from
    grid overnight."
  triggers:
  - at: sensor.octopus_free_electricity_start
    id: start
    trigger: time
    enabled: true
  - at: sensor.octopus_free_electric_stop
    id: stop
    trigger: time
    enabled: true
  - entity_id:
    - binary_sensor.free_electricity_today
    to: 'on'
    id: Prepare
    trigger: state
    for:
      hours: 0
      minutes: 2
      seconds: 0
  - at: input_datetime.octopus_free_electricity_prep
    id: ExportBatteryPrep
    trigger: time
  - trigger: time_pattern
    minutes: /17
  conditions:
  - condition: state
    entity_id: binary_sensor.free_electricity_today
    state: 'on'
  - condition: state
    entity_id: input_boolean.solax_automation_running
    state: 'off'
    enabled: false
  actions:
  - action: input_boolean.turn_on
    metadata: {}
    data: {}
    target:
      entity_id: input_boolean.solax_automation_running
  - variables:
      default_mode: '{{states(''sensor.solax_default_operation_mode'')|int}}'
      default_charge_to: '{{states(''input_number.solax_default_charge_to_limit_soc'')|int}}'
      mode_delay: 15
      settings_delay: 15
      refresh_settings_delay: 10
    enabled: true
  - choose:
    - conditions:
      - condition: trigger
        id:
        - Prepare
      sequence:
      - if:
        - condition: state
          entity_id: input_boolean.octopus_free_electric_soc_use
          state: 'on'
        then:
        - condition: not
          conditions:
          - condition: template
            value_template: "{{states('input_number.octopus_free_session_battery_prep_soc')|int==states('sensor.solax_local_feed_in_battery_charge_from_grid_to')|int
              \nand states('input_number.octopus_free_session_battery_prep_soc')|int==states('sensor.solax_local_selfuse_battery_chrg_frm_grd_to')}}"
        - repeat:
            sequence:
            - data:
                level: '{{states(''input_number.octopus_free_session_battery_prep_soc'')}}'
              action: rest_command.solax_local_set_feedin_charge_battery_from_grid
            - delay:
                hours: 0
                minutes: 0
                seconds: '{{mode_delay}}'
                milliseconds: 0
            - data:
                level: '{{states(''input_number.octopus_free_session_battery_prep_soc'')}}'
              action: rest_command.solax_local_set_charge_battery_from_grid
            - delay:
                hours: 0
                minutes: 0
                seconds: '{{mode_delay}}'
                milliseconds: 0
            - action: homeassistant.update_entity
              data:
                entity_id:
                - sensor.solax_rest_local_settings
            - delay:
                hours: 0
                minutes: 0
                seconds: '{{refresh_settings_delay}}'
                milliseconds: 0
            until:
            - condition: template
              value_template: "{{ (state_attr('sensor.solax_local_settings', 'Data')[2]
                == states('input_number.octopus_free_session_battery_prep_soc') \nand
                state_attr('sensor.solax_local_settings', 'Data')[13] == states('input_number.octopus_free_session_battery_prep_soc'))
                \nor repeat.index == 3 }}"
        else:
        - condition: not
          conditions:
          - condition: template
            value_template: '{{default_charge_to == states(''sensor.solax_local_feed_in_battery_charge_from_grid_to'')|int
              and default_charge_to == states(''sensor.solax_local_selfuse_battery_chrg_frm_grd_to'')|int}}'
        - repeat:
            sequence:
            - data:
                level: '{{default_charge_to}}'
              action: rest_command.solax_local_set_feedin_charge_battery_from_grid
            - delay:
                hours: 0
                minutes: 0
                seconds: '{{mode_delay}}'
                milliseconds: 0
            - data:
                level: '{{default_charge_to}}'
              action: rest_command.solax_local_set_charge_battery_from_grid
            - delay:
                hours: 0
                minutes: 0
                seconds: '{{mode_delay}}'
                milliseconds: 0
            - action: homeassistant.update_entity
              data:
                entity_id:
                - sensor.solax_rest_local_settings
            - delay:
                hours: 0
                minutes: 0
                seconds: '{{refresh_settings_delay}}'
                milliseconds: 0
            until:
            - condition: template
              value_template: "{{ (state_attr('sensor.solax_local_settings', 'Data')[2]
                == default_charge_to \nand state_attr('sensor.solax_local_settings',
                'Data')[13] == default_charge_to) \nor repeat.index == 3 }}"
      - condition: not
        conditions:
        - condition: template
          value_template: "{% set start_time =\n    as_datetime(state_attr('input_datetime.octopus_free_electricity_start',\n
            \   'timestamp') - 0) \n%}\n\n{% set end_time =\n    as_datetime(state_attr('input_datetime.octopus_free_electricity_stop',\n
            \   'timestamp') - 0) \n%}\n\n\n{{ (state_attr('sensor.solax_local_settings',
            'Data')[10] == 1\nand state_attr('sensor.solax_local_settings', 'Data')[7]
            == 1 \nand state_attr('sensor.solax_local_settings', 'Data')[8] == start_time.hour
            + start_time.minute * 256 \nand state_attr('sensor.solax_local_settings',
            'Data')[9] == end_time.hour + end_time.minute * 256) \n}}"
      - repeat:
          sequence:
          - data:
              value: '{{1}}'
            action: rest_command.solax_local_set_inverter_mode
          - delay:
              hours: 0
              minutes: 0
              seconds: '{{mode_delay}}'
              milliseconds: 0
          - action: rest_command.solax_local_set_period2_enable
            data:
              enabled: '{{1}}

                '
          - delay:
              hours: 0
              minutes: 0
              seconds: '{{mode_delay}}'
              milliseconds: 0
          - action: rest_command.solax_local_set_forced_charge_start2
            data:
              value: '{% set start_time = as_datetime(state_attr(''input_datetime.octopus_free_electricity_start'',
                ''timestamp'') - 0) %}{{ start_time.hour + start_time.minute * 256
                }}'
          - delay:
              hours: 0
              minutes: 0
              seconds: '{{mode_delay}}'
              milliseconds: 0
          - action: rest_command.solax_local_set_forced_charge_stop2
            data:
              value: '{% set end_time = as_datetime(state_attr(''input_datetime.octopus_free_electricity_stop'',
                ''timestamp'') - 0) %}{{ end_time.hour + end_time.minute * 256 }}'
          - delay:
              hours: 0
              minutes: 0
              seconds: '{{mode_delay}}'
              milliseconds: 0
          - action: homeassistant.update_entity
            data:
              entity_id:
              - sensor.solax_rest_local_settings
          - delay:
              hours: 0
              minutes: 0
              seconds: '{{refresh_settings_delay}}'
              milliseconds: 0
          until:
          - condition: template
            value_template: "{% set start_time =\n    as_datetime(state_attr('input_datetime.octopus_free_electricity_start',\n
              \   'timestamp') - 0) \n%}\n\n{% set end_time =\n    as_datetime(state_attr('input_datetime.octopus_free_electricity_stop',\n
              \   'timestamp') - 0) \n%}\n\n\n{{ (state_attr('sensor.solax_local_settings',
              'Data')[10] == 1\nand state_attr('sensor.solax_local_settings', 'Data')[7]
              == 1 \nand state_attr('sensor.solax_local_settings', 'Data')[8] == start_time.hour
              + start_time.minute * 256 \nand state_attr('sensor.solax_local_settings',
              'Data')[9] == end_time.hour + end_time.minute * 256) \nor repeat.index
              == 3 }}"
    - conditions:
      - condition: trigger
        id:
        - start
      sequence:
      - action: automation.turn_off
        metadata: {}
        data:
          stop_actions: true
        target:
          entity_id: automation.solax_zappi_octopus_control
      - metadata: {}
        data: {}
        target:
          entity_id: switch.octopus_energy_z_ZZZZZZZZ_intelligent_smart_charge
        action: switch.turn_off
      - metadata: {}
        data:
          option: Fast
        target:
          entity_id: select.myenergi_zappi_XXXXXXXX_charge_mode
        action: select.select_option
      - event: Solax Zappi Octopus Control
        event_data:
          message: 'Free electric session started @ {{now().strftime(''%H:%M'')}}. '
          title: Free Electric Started
          class: high
        enabled: true
    - conditions:
      - condition: trigger
        id:
        - stop
      sequence:
      - repeat:
          sequence:
          - data:
              value: '{{states(''sensor.solax_default_operation_mode'')|int}}'
            action: rest_command.solax_local_set_inverter_mode
          - delay:
              hours: 0
              minutes: 0
              seconds: '{{mode_delay}}'
              milliseconds: 0
          - data:
              value: 0
            action: rest_command.solax_local_set_manual_mode_behaviour
          - delay:
              hours: 0
              minutes: 0
              seconds: '{{mode_delay}}'
              milliseconds: 0
          - data:
              value: 0
            action: rest_command.solax_local_set_period2_enable
          - delay:
              hours: 0
              minutes: 0
              seconds: '{{mode_delay}}'
              milliseconds: 0
          - data:
              level: '{{states(''input_number.solax_default_charge_to_limit_soc'')}}'
            action: rest_command.solax_local_set_charge_battery_from_grid
          - delay:
              hours: 0
              minutes: 0
              seconds: '{{mode_delay}}'
              milliseconds: 0
          - data:
              level: '{{states(''input_number.solax_default_charge_to_limit_soc'')}}'
            action: rest_command.solax_local_set_feedin_charge_battery_from_grid
          - delay:
              hours: 0
              minutes: 0
              seconds: '{{mode_delay}}'
              milliseconds: 0
          - action: homeassistant.update_entity
            data:
              entity_id:
              - sensor.solax_rest_local_settings
          - delay:
              hours: 0
              minutes: 0
              seconds: '{{refresh_settings_delay}}'
              milliseconds: 0
          until:
          - condition: template
            value_template: "{{ (state_attr('sensor.solax_local_settings', 'Data')[10]
              == states('sensor.solax_default_operation_mode')|int \nand state_attr('sensor.solax_local_settings',
              'Data')[7] == 0 \nand state_attr('sensor.solax_local_settings', 'Data')[2]
              == states('input_number.solax_default_charge_to_limit_soc') \nand state_attr('sensor.solax_local_settings',
              'Data')[13] == states('input_number.solax_default_charge_to_limit_soc'))
              \nor repeat.index == 3 }}"
      - event: Solax Zappi Octopus Control
        event_data:
          message: 'Free electric session finished @ {{now().strftime(''%H:%M'')}}. '
          title: Free Electric Finished
          class: high
        enabled: true
      - action: automation.turn_on
        metadata: {}
        data:
          stop_actions: true
        target:
          entity_id: automation.solax_zappi_octopus_control
    - conditions:
      - condition: trigger
        id:
        - ExportBatteryPrep
      - condition: state
        entity_id: input_boolean.export_battery
        state: 'on'
        enabled: false
      - condition: numeric_state
        entity_id: sensor.solax_local_battery_soc
        above: input_number.octopus_free_session_battery_prep_soc
        value_template: '{{ state.state | float(0)  - 14 }}'
      - condition: state
        entity_id: binary_sensor.octopus_energy_z_ZZZZZZZZ_intelligent_dispatching
        state: 'off'
        enabled: false
      - condition: template
        value_template: '{{(state_attr(''sensor.solax_local_settings'', ''Data'')[10]!=
          3)}}'
      sequence:
      - if:
        - condition: numeric_state
          entity_id: sensor.solax_local_battery_soc
          above: input_number.octopus_free_session_battery_prep_soc
          value_template: '{{ state.state | float(0)  - 14 }}'
        then:
        - repeat:
            sequence:
            - data:
                value: 3
              action: rest_command.solax_local_set_inverter_mode
            - delay:
                hours: 0
                minutes: 0
                seconds: '{{mode_delay}}'
                milliseconds: 0
            - data:
                value: 2
              action: rest_command.solax_local_set_manual_mode_behaviour
            - delay:
                hours: 0
                minutes: 0
                seconds: '{{mode_delay}}'
                milliseconds: 0
            - action: homeassistant.update_entity
              data:
                entity_id:
                - sensor.solax_rest_local_settings
            - delay:
                hours: 0
                minutes: 0
                seconds: '{{mode_delay}}'
                milliseconds: 0
            until:
            - condition: template
              value_template: "{{ (state_attr('sensor.solax_local_settings', 'Data')[10]
                == 3 \nand state_attr('sensor.solax_local_settings', 'Data')[11] ==
                2) \nor repeat.index == 3 }}"
        - event: Solax Zappi Octopus Control
          event_data:
            message: Free electric session prep export started @ {{now().strftime('%H:%M')}}.
              Discharging to {{states('input_number.octopus_free_session_battery_prep_soc')}}%
            title: Free Electric Prep
            class: high
          enabled: true
  - action: input_boolean.turn_off
    metadata: {}
    data: {}
    target:
      entity_id: input_boolean.solax_automation_running
  mode: single

- id: '6002'
  alias: 6002 - Octopus - Saving Sessions Automation
  description: "# 6002 - Automatically join Octopus Saving Session Events\nAutomation
    to automatically or manually join a saving session. Prepares Battery by charging
    before session.\nDischarges Battery in the session and stops Zappi.\nReturns to
    normal operation.\n\n# Initial config instructions\n1. Find and replace:\nzappi_XXXXXXXX
    with your zappi number, \nz_ZZZZZZZZ with Octopus account\n2. Paste into your
    automations.yaml\n\n# Change log\nv3.0.1 - Fixed mangled joined a session message\nv3.0.0
    - Fixed bug where if someone uses charge period 2 outside of a saving session
    and the EV is charging, when charge period 2 ends the EV stops charging. I've
    purposefully left the functionality to disable charge period 2 when it ends as
    it's quite useful if users forget to disable it for the next day. I've made the
    assumption that most users only use charge period 1 for daily charging.\nv2.1.4
    - Renamed automation\n            - Added ability to optionally try for a Dispatch
    during battery prep.\n             - Added ability to optionally try for a Dispatch
    once the Saving Session finishes.\nv2.1.3 - Added Prep options and ability to
    stop the battery prep once battery is at target SoC\nv2.1 - Removed legacy dev
    work\nv2.0 - Rework for manual joining\nv1.1 - Initial"
  triggers:
  - event_type: octopus_energy_new_octoplus_saving_session
    trigger: event
    id: Octopus New Saving Session
    enabled: true
  - trigger: state
    entity_id:
    - sensor.octopus_is_there_a_saving_session_today
    id: Is there a session today?
  - trigger: state
    entity_id:
    - input_boolean.octopus_saving_session_manual
    to: 'off'
    id: Is there a session today?
    for:
      hours: 0
      minutes: 1
      seconds: 0
  - trigger: state
    entity_id:
    - input_boolean.octopus_saving_session_manual
    to: 'on'
    id: Manual
  - trigger: state
    entity_id:
    - input_select.saving_session_today
    from: 'no'
    to: 'yes'
    id: saving session changes to yes
  - trigger: state
    entity_id:
    - input_select.saving_session_today
    from: 'yes'
    to: 'no'
    id: saving session changes to no
  - trigger: time
    at: input_datetime.solax_start_charge_2
    id: Saving Session Preparation
  - trigger: numeric_state
    entity_id:
    - sensor.solax_local_battery_soc
    above: input_number.octopus_saving_session_target_battery_charge_soc
    id: Saving Session Stop Battery Prep SoC
  - trigger: time
    at: input_datetime.saving_session_start
    id: Saving Session Started
  - trigger: time
    at: input_datetime.saving_session_end
    id: Saving Session Ended
  - trigger: state
    entity_id:
    - input_number.octopus_saving_session_prep_time
    id: Update charge period
    for:
      hours: 0
      minutes: 1
      seconds: 0
  conditions: []
  actions:
  - variables:
      default_mode: '{{states(''sensor.solax_default_operation_mode'')|int(default=0)}}'
      mode_delay: 15
      settings_delay: 15
      refresh_settings_delay: 10
      saving_session_event_entity: event.octopus_energy_z_ZZZZZZZZ_octoplus_saving_session_events
  - choose:
    - conditions:
      - condition: trigger
        id:
        - Octopus New Saving Session
      sequence:
      - condition: template
        value_template: '{{ state_attr(saving_session_event_entity, ''available_events'')
          != None and state_attr(saving_session_event_entity, ''available_events'')
          | length > 0 }}'
      - data:
          event_code: '{{ state_attr(saving_session_event_entity, ''available_events'')[0][''code'']
            }}'
        target:
          entity_id: event.octopus_energy_z_ZZZZZZZZ_octoplus_saving_session_events
        action: octopus_energy.join_octoplus_saving_session_event
      - event: Solax Zappi Octopus Control
        event_data:
          message: "{% set event = state_attr(saving_session_event_entity,\n  'available_events')[0]
            %} {% set event_start = event['start'] %} Joined a new Octopus Energy
            saving session. It starts at {{event_start.strftime('%H:%M') }} on {{
            event_start.day }}/{{event_start.month }} for {{ event.duration_in_minutes
            | int }} minutes.\n"
          title: Octopus Saving Sessions Updated
          class: high
        enabled: true
    - conditions:
      - condition: trigger
        id:
        - Is there a session today?
      - condition: state
        entity_id: input_boolean.octopus_saving_session_manual
        state: 'off'
      sequence:
      - action: input_datetime.set_datetime
        data_template:
          datetime: '{{state_attr(''sensor.octopus_is_there_a_saving_session_today'',''session_start'')}}'
          entity_id: input_datetime.saving_session_start
      - action: input_datetime.set_datetime
        data_template:
          datetime: '{{state_attr(''sensor.octopus_is_there_a_saving_session_today'',''session_end'')}}'
          entity_id: input_datetime.saving_session_end
      - action: input_select.select_option
        metadata: {}
        data:
          option: '{{states(''sensor.octopus_is_there_a_saving_session_today'')}}'
        target:
          entity_id: input_select.saving_session_today
      - if:
        - condition: state
          entity_id: input_select.saving_session_today
          state: 'no'
        then:
        - action: input_boolean.turn_on
          metadata: {}
          data: {}
          target:
            entity_id: input_boolean.solax_automation_running
        - data:
            enabled: '{{ 0 }}

              '
          action: rest_command.solax_local_set_period2_enable
        - delay:
            hours: 0
            minutes: 0
            seconds: '{{settings_delay}}'
            milliseconds: 0
        - action: input_boolean.turn_off
          metadata: {}
          data: {}
          target:
            entity_id: input_boolean.solax_automation_running
    - conditions:
      - condition: trigger
        id:
        - saving session changes to yes
        - Manual
        - Update charge period
      - condition: template
        value_template: "{{ (states('input_select.saving_session_today') == 'yes'
          \n    and states('input_datetime.saving_session_start') != None) \n    or
          states('input_boolean.octopus_saving_session_manual') == 'on'}}"
      - condition: template
        value_template: '{{(state_attr(''sensor.solax_local_settings'', ''Data'')[10]
          != 3)}}'
      sequence:
      - action: input_boolean.turn_on
        metadata: {}
        data: {}
        target:
          entity_id: input_boolean.solax_automation_running
      - repeat:
          sequence:
          - if:
            - condition: numeric_state
              entity_id: input_number.octopus_saving_session_prep_time
              above: 4
            then:
            - data:
                enabled: '{{ 1 }}

                  '
              action: rest_command.solax_local_set_period2_enable
            else:
            - data:
                enabled: '{{ 0 }}

                  '
              action: rest_command.solax_local_set_period2_enable
          - delay:
              hours: 0
              minutes: 0
              seconds: '{{settings_delay}}'
              milliseconds: 0
          - data:
              value: '{% set start_time = as_datetime(state_attr(''input_datetime.saving_session_start'',
                ''timestamp'') - states(''input_number.octopus_saving_session_prep_time'')|int*60-60)
                %} {{ start_time.hour + start_time.minute * 256 }}'
            action: rest_command.solax_local_set_forced_charge_start2
          - delay:
              hours: 0
              minutes: 0
              seconds: '{{settings_delay}}'
              milliseconds: 0
          - data:
              value: '{% set end_time = as_datetime(state_attr(''input_datetime.saving_session_start'',
                ''timestamp'') - 60) %} {{ end_time.hour + end_time.minute * 256 }}'
            action: rest_command.solax_local_set_forced_charge_stop2
          - delay:
              hours: 0
              minutes: 0
              seconds: '{{settings_delay}}'
              milliseconds: 0
          - action: homeassistant.update_entity
            data:
              entity_id:
              - sensor.solax_rest_local_settings
          - delay:
              hours: 0
              minutes: 0
              seconds: '{{refresh_settings_delay}}'
          until:
          - condition: template
            value_template: "{% set end_time = as_datetime(state_attr('input_datetime.saving_session_start',
              'timestamp') - 60).strftime('%H:%M') %} \n{% set start_time = as_datetime(state_attr('input_datetime.saving_session_start',
              'timestamp') -60 - states('input_number.octopus_saving_session_prep_time')|int*60).strftime('%H:%M')
              \ %} \n{% if states('input_number.octopus_saving_session_prep_time')|int
              >=5 %}\n{% set chd2 = true%}\n{% else %}\n{% set chd2 = false%}\n{%
              endif %}\n\n{{ (states('sensor.solax_local_battery_chd2_enabled')|bool==chd2
              \n    and states('sensor.solax_local_battery_setting_stop_charge_2')
              == end_time\n    and states('sensor.solax_local_battery_setting_start_charge_2')
              == start_time)\n    or repeat.index == 3 }}"
      - action: input_select.select_option
        metadata: {}
        data:
          option: 'yes'
        target:
          entity_id: input_select.saving_session_today
      - action: input_boolean.turn_off
        metadata: {}
        data: {}
        target:
          entity_id: input_boolean.solax_automation_running
    - conditions:
      - condition: trigger
        id:
        - Saving Session Preparation
      - condition: or
        conditions:
        - condition: state
          entity_id: input_select.saving_session_today
          state: 'yes'
        - condition: state
          entity_id: input_boolean.octopus_saving_session_manual
          state: 'on'
      - condition: time
        after: input_datetime.solax_start_charge_2
        before: input_datetime.solax_stop_charge_2
      sequence:
      - if:
        - condition: numeric_state
          entity_id: sensor.solax_local_battery_soc
          above: input_number.octopus_saving_session_target_battery_charge_soc
        then:
        - data:
            enabled: '{{ 0 }}

              '
          action: rest_command.solax_local_set_period2_enable
        - delay:
            hours: 0
            minutes: 0
            seconds: '{{settings_delay}}'
            milliseconds: 0
        else:
        - action: rest_command.solax_local_set_charge_battery_from_grid
          data:
            level: '{{states(''input_number.octopus_saving_session_target_battery_charge_soc'')}}

              '
        - delay:
            hours: 0
            minutes: 0
            seconds: '{{settings_delay}}'
            milliseconds: 0
        - action: rest_command.solax_local_set_feedin_charge_battery_from_grid
          data:
            level: '{{states(''input_number.octopus_saving_session_target_battery_charge_soc'')}}

              '
        - delay:
            hours: 0
            minutes: 0
            seconds: '{{settings_delay}}'
            milliseconds: 0
        - data:
            enabled: '{{ 1 }}

              '
          action: rest_command.solax_local_set_period2_enable
        - delay:
            hours: 0
            minutes: 0
            seconds: '{{refresh_settings_delay}}'
            milliseconds: 0
        - if:
          - condition: state
            entity_id: input_boolean.octopus_saving_session_get_dispatch_in_prep
            state: 'on'
          - condition: state
            entity_id: sensor.zappi_plug_status
            state: EV Connected
          - condition: template
            value_template: '{{states(''input_number.octopus_saving_session_target_battery_charge_soc'')|int
              - states(''sensor.solax_local_battery_soc'')|int >= 10}} '
          then:
          - metadata: {}
            data:
              option: Eco+
            target:
              entity_id: select.myenergi_zappi_XXXXXXXX_charge_mode
            action: select.select_option
          - metadata: {}
            data: {}
            target:
              entity_id: switch.octopus_energy_z_ZZZZZZZZ_intelligent_smart_charge
            enabled: true
            action: switch.turn_on
      - event: Solax Zappi Octopus Control
        event_data:
          message: Battery prep checking started @ {{now().strftime('%H:%M')}}. Battery
            @ {{states('sensor.solax_local_battery_soc')}}%
          title: Charge Period 2 Active
          class: high
        enabled: true
    - conditions:
      - condition: trigger
        id:
        - Saving Session Stop Battery Prep SoC
      - condition: time
        after: input_datetime.solax_start_charge_2
        before: input_datetime.solax_stop_charge_2
      - condition: state
        entity_id: input_boolean.solaxchargeperiod2
        state: 'on'
      sequence:
      - action: rest_command.solax_local_set_charge_battery_from_grid
        data:
          level: '{{states(''input_number.solax_default_charge_to_limit_soc'')}}

            '
      - delay:
          hours: 0
          minutes: 0
          seconds: '{{settings_delay}}'
          milliseconds: 0
      - action: rest_command.solax_local_set_feedin_charge_battery_from_grid
        data:
          level: '{{states(''input_number.solax_default_charge_to_limit_soc'')}}

            '
      - delay:
          hours: 0
          minutes: 0
          seconds: '{{settings_delay}}'
          milliseconds: 0
      - data:
          enabled: '{{ 0 }}

            '
        action: rest_command.solax_local_set_period2_enable
      - delay:
          hours: 0
          minutes: 0
          seconds: '{{refresh_settings_delay}}'
          milliseconds: 0
      - if:
        - condition: state
          entity_id: sensor.zappi_plug_status
          state: Charging
        - condition: or
          conditions:
          - condition: state
            entity_id: input_select.saving_session_today
            state: 'yes'
          - condition: state
            entity_id: input_boolean.octopus_saving_session_manual
            state: 'on'
        then:
        - metadata: {}
          data:
            option: Stopped
          target:
            entity_id: select.myenergi_zappi_XXXXXXXX_charge_mode
          action: select.select_option
        - metadata: {}
          data: {}
          target:
            entity_id: switch.octopus_energy_z_ZZZZZZZZ_intelligent_smart_charge
          enabled: true
          action: switch.turn_off
        enabled: false
    - conditions:
      - condition: trigger
        id:
        - Saving Session Started
      - condition: or
        conditions:
        - condition: state
          entity_id: input_select.saving_session_today
          state: 'yes'
        - condition: state
          entity_id: input_boolean.octopus_saving_session_manual
          state: 'on'
      sequence:
      - action: input_boolean.turn_on
        metadata: {}
        data: {}
        target:
          entity_id: input_boolean.solax_automation_running
      - action: input_boolean.turn_on
        metadata: {}
        data: {}
        target:
          entity_id: input_boolean.saving_session_active
      - if:
        - condition: numeric_state
          entity_id: sensor.solax_local_battery_soc
          above: input_number.octopus_saving_session_target_battery_soc
          value_template: '{{ state.state | float(0)  - 4 }}'
        then:
        - repeat:
            sequence:
            - data:
                value: 3
              action: rest_command.solax_local_set_inverter_mode
            - delay:
                hours: 0
                minutes: 0
                seconds: '{{mode_delay}}'
                milliseconds: 0
            - data:
                value: 2
              action: rest_command.solax_local_set_manual_mode_behaviour
            - delay:
                hours: 0
                minutes: 0
                seconds: '{{mode_delay}}'
                milliseconds: 0
            - action: homeassistant.update_entity
              data:
                entity_id:
                - sensor.solax_rest_local_settings
            - delay:
                hours: 0
                minutes: 0
                seconds: '{{refresh_settings_delay}}'
            until:
            - condition: template
              value_template: '{{ (state_attr(''sensor.solax_local_settings'', ''Data'')[10]
                == 3 and state_attr(''sensor.solax_local_settings'', ''Data'')[11]
                == 2) or repeat.index == 3 }}'
      - action: switch.turn_off
        metadata: {}
        data: {}
        target:
          entity_id: switch.octopus_energy_z_ZZZZZZZZ_intelligent_smart_charge
      - action: select.select_option
        metadata: {}
        data:
          option: Stopped
        target:
          entity_id: select.myenergi_zappi_XXXXXXXX_charge_mode
      - action: input_boolean.turn_off
        metadata: {}
        data: {}
        target:
          entity_id: input_boolean.solax_automation_running
      - event: Solax Zappi Octopus Control
        event_data:
          message: 'Attempting Discharge at {{now().strftime(''%H:%M'') }}

            '
          title: Octopus Saving Sessions - Discharging
          class: high
        enabled: true
    - conditions:
      - condition: trigger
        id:
        - Saving Session Ended
      - condition: or
        conditions:
        - condition: state
          entity_id: input_select.saving_session_today
          state: 'yes'
        - condition: state
          entity_id: input_boolean.octopus_saving_session_manual
          state: 'on'
      sequence:
      - action: input_boolean.turn_on
        metadata: {}
        data: {}
        target:
          entity_id: input_boolean.solax_automation_running
      - action: input_boolean.turn_off
        metadata: {}
        data: {}
        target:
          entity_id: input_boolean.saving_session_active
      - repeat:
          sequence:
          - data:
              value: '{{default_mode}}'
            action: rest_command.solax_local_set_inverter_mode
          - delay:
              hours: 0
              minutes: 0
              seconds: '{{mode_delay}}'
              milliseconds: 0
          - action: homeassistant.update_entity
            data:
              entity_id:
              - sensor.solax_rest_local_settings
          - delay:
              hours: 0
              minutes: 0
              seconds: '{{refresh_settings_delay}}'
              milliseconds: 0
          until:
          - condition: template
            value_template: '{{ (state_attr(''sensor.solax_local_settings'', ''Data'')[10]
              == default_mode) or repeat.index == 3 }}'
      - if:
        - condition: state
          entity_id: input_boolean.octopus_saving_session_get_dispatch_after
          state: 'on'
        - condition: state
          entity_id: sensor.zappi_plug_status
          state: EV Connected
        then:
        - metadata: {}
          data:
            option: Eco+
          target:
            entity_id: select.myenergi_zappi_XXXXXXXX_charge_mode
          action: select.select_option
        - metadata: {}
          data: {}
          target:
            entity_id: switch.octopus_energy_z_ZZZZZZZZ_intelligent_smart_charge
          enabled: true
          action: switch.turn_on
      - action: input_boolean.turn_off
        metadata: {}
        data: {}
        target:
          entity_id: input_boolean.octopus_saving_session_manual
      - event: Solax Zappi Octopus Control
        event_data:
          message: "Octopus Saving Session ended @ {{now().strftime('%H:%M')}}. Battery
            @\n{{states('sensor.solax_local_battery_soc')}}%. \n"
          title: Saving Session Ended
          class: high
        enabled: true
      - action: input_boolean.turn_off
        metadata: {}
        data: {}
        target:
          entity_id: input_boolean.solax_automation_running
    - conditions:
      - condition: trigger
        id:
        - saving session changes to no
      - condition: template
        value_template: '{{ states(''sensor.solax_local_battery_chd2_enabled'')|bool==true}}'
      sequence:
      - action: input_boolean.turn_on
        metadata: {}
        data: {}
        target:
          entity_id: input_boolean.solax_automation_running
      - repeat:
          sequence:
          - data:
              enabled: '{{ 0 }}

                '
            action: rest_command.solax_local_set_period2_enable
          - delay:
              hours: 0
              minutes: 0
              seconds: '{{settings_delay}}'
              milliseconds: 0
          - action: homeassistant.update_entity
            data:
              entity_id:
              - sensor.solax_rest_local_settings
          - delay:
              hours: 0
              minutes: 0
              seconds: '{{refresh_settings_delay}}'
          until:
          - condition: template
            value_template: '{{ (states(''sensor.solax_local_battery_chd2_enabled'')|bool==false)
              or repeat.index == 3 }}'
      - action: input_boolean.turn_off
        metadata: {}
        data: {}
        target:
          entity_id: input_boolean.solax_automation_running
  trace:
    stored_traces: 20
  mode: queued
  max: 5

